//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Sim
{
    public partial class SimOnPhysics : Fox.Sim.SimObject 
    {
        // Properties
        public StringMap<EntityPtr<Sim.SimAssociationUnit>> simRootBones { get; } = new StringMap<EntityPtr<Sim.SimAssociationUnit>>();
        
        public StringMap<EntityPtr<Sim.SimAssociationUnit>> simBones { get; } = new StringMap<EntityPtr<Sim.SimAssociationUnit>>();
        
        public StringMap<EntityPtr<Sim.SimAssociationUnit>> simTransBones { get; } = new StringMap<EntityPtr<Sim.SimAssociationUnit>>();
        
        public StringMap<EntityPtr<Sim.SimAssociationUnit>> simHitBones { get; } = new StringMap<EntityPtr<Sim.SimAssociationUnit>>();
        
        public uint formatVersion { get; set; }
        
        public EntityLink physicsData { get; set; }
        
        public SimLodLevelName minLodLevel { get; set; }
        
        public SimLodLevelName maxLodLevel { get; set; }
        
        public bool isEnableGeoCheck { get; set; }
        
        public bool convertMoveToWind { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static SimOnPhysics()
        {
            classInfo = new EntityInfo(new String("SimOnPhysics"), base.GetClassEntityInfo(), 328, "Sim", 2);
			
			classInfo.StaticProperties.Insert(new String("simRootBones"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 152, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Sim.SimAssociationUnit), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("simBones"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 200, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Sim.SimAssociationUnit), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("simTransBones"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 248, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Sim.SimAssociationUnit), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("simHitBones"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 296, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Sim.SimAssociationUnit), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("formatVersion"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 344, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("physicsData"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minLodLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(SimLodLevelName), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxLodLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(SimLodLevelName), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isEnableGeoCheck"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("convertMoveToWind"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public SimOnPhysics(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "formatVersion":
                    this.formatVersion = value.GetValueAsUInt32();
                    return;
                case "physicsData":
                    this.physicsData = value.GetValueAsEntityLink();
                    return;
                case "minLodLevel":
                    this.minLodLevel = (SimLodLevelName)value.GetValueAsInt32();
                    return;
                case "maxLodLevel":
                    this.maxLodLevel = (SimLodLevelName)value.GetValueAsInt32();
                    return;
                case "isEnableGeoCheck":
                    this.isEnableGeoCheck = value.GetValueAsBool();
                    return;
                case "convertMoveToWind":
                    this.convertMoveToWind = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "simRootBones":
                    this.simRootBones.Add(key, EntityPtr<Sim.SimAssociationUnit>.Get(value.GetValueAsEntityPtr().Entity as Sim.SimAssociationUnit));
                    return;
                case "simBones":
                    this.simBones.Add(key, EntityPtr<Sim.SimAssociationUnit>.Get(value.GetValueAsEntityPtr().Entity as Sim.SimAssociationUnit));
                    return;
                case "simTransBones":
                    this.simTransBones.Add(key, EntityPtr<Sim.SimAssociationUnit>.Get(value.GetValueAsEntityPtr().Entity as Sim.SimAssociationUnit));
                    return;
                case "simHitBones":
                    this.simHitBones.Add(key, EntityPtr<Sim.SimAssociationUnit>.Get(value.GetValueAsEntityPtr().Entity as Sim.SimAssociationUnit));
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}