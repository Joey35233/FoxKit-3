//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Sim
{
    public partial class SimEngineOnPhysicsParam : Fox.Sim.SimEngineParam 
    {
        // Properties
        public bool isEnableGeoCheck { get; set; }
        
        public bool convertMoveToWind { get; set; }
        
        public int minLodLevel { get; set; }
        
        public int maxLodLevel { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static SimEngineOnPhysicsParam()
        {
            classInfo = new EntityInfo(new String("SimEngineOnPhysicsParam"), base.GetClassEntityInfo(), 36, "Sim", 3);
			
			classInfo.StaticProperties.Insert(new String("isEnableGeoCheck"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 57, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("convertMoveToWind"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minLodLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 48, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxLodLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 52, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public SimEngineOnPhysicsParam(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "isEnableGeoCheck":
                    this.isEnableGeoCheck = value.GetValueAsBool();
                    return;
                case "convertMoveToWind":
                    this.convertMoveToWind = value.GetValueAsBool();
                    return;
                case "minLodLevel":
                    this.minLodLevel = value.GetValueAsInt32();
                    return;
                case "maxLodLevel":
                    this.maxLodLevel = value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}