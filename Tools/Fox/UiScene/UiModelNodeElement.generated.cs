//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.UiScene
{
    public partial class UiModelNodeElement : Fox.Core.DataElement 
    {
        // Properties
        public String modelNodeName { get; set; }
        
        public bool visible { get; set; }
        
        public float priority { get; set; }
        
        public System.Numerics.Vector3 scale { get; set; }
        
        public System.Numerics.Quaternion rotQuat { get; set; }
        
        public System.Numerics.Vector3 translate { get; set; }
        
        public Color color { get; set; }
        
        public UiModelNodeElementBlend blendType { get; set; }
        
        public bool returnInit { get; set; }
        
        public bool initVisible { get; set; }
        
        public float initPriority { get; set; }
        
        public System.Numerics.Vector3 initScale { get; set; }
        
        public System.Numerics.Quaternion initRotQuat { get; set; }
        
        public System.Numerics.Vector3 initTranslate { get; set; }
        
        public Color initColor { get; set; }
        
        public int initBlendType { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiModelNodeElement()
        {
            classInfo = new EntityInfo(new String("UiModelNodeElement"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("modelNodeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("visible"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.Float, 68, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scale"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotQuat"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("translate"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blendType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiModelNodeElementBlend), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("returnInit"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initVisible"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 149, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initPriority"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initScale"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initRotQuat"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initTranslate"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("initBlendType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiModelNodeElement(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "modelNodeName":
                    this.modelNodeName = value.GetValueAsString();
                    return;
                case "visible":
                    this.visible = value.GetValueAsBool();
                    return;
                case "priority":
                    this.priority = value.GetValueAsFloat();
                    return;
                case "scale":
                    this.scale = value.GetValueAsVector3();
                    return;
                case "rotQuat":
                    this.rotQuat = value.GetValueAsQuat();
                    return;
                case "translate":
                    this.translate = value.GetValueAsVector3();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "blendType":
                    this.blendType = (UiModelNodeElementBlend)value.GetValueAsInt32();
                    return;
                case "returnInit":
                    this.returnInit = value.GetValueAsBool();
                    return;
                case "initVisible":
                    this.initVisible = value.GetValueAsBool();
                    return;
                case "initPriority":
                    this.initPriority = value.GetValueAsFloat();
                    return;
                case "initScale":
                    this.initScale = value.GetValueAsVector3();
                    return;
                case "initRotQuat":
                    this.initRotQuat = value.GetValueAsQuat();
                    return;
                case "initTranslate":
                    this.initTranslate = value.GetValueAsVector3();
                    return;
                case "initColor":
                    this.initColor = value.GetValueAsColor();
                    return;
                case "initBlendType":
                    this.initBlendType = value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}