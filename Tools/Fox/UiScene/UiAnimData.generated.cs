//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.UiScene
{
    public partial class UiAnimData : Fox.Core.Data 
    {
        // Properties
        public FilePtr<File> data { get; set; }
        
        public FilePtr<File> data_s { get; set; }
        
        public EntityLink model { get; set; }
        
        public float speed { get; set; }
        
        public UiAnimDataFlag flag { get; set; }
        
        public System.Collections.Generic.IList<String> srcNodeNames { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> destNodeNames { get; } = new System.Collections.Generic.List<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiAnimData()
        {
            classInfo = new EntityInfo(new String("UiAnimData"), base.GetClassEntityInfo(), 0, "Ui", 4);
			
			classInfo.StaticProperties.Insert(new String("data"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("data_s"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("model"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("speed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flag"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiAnimDataFlag), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("srcNodeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 216, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("destNodeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 232, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiAnimData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "data":
                    this.data = value.GetValueAsFilePtr();
                    return;
                case "data_s":
                    this.data_s = value.GetValueAsFilePtr();
                    return;
                case "model":
                    this.model = value.GetValueAsEntityLink();
                    return;
                case "speed":
                    this.speed = value.GetValueAsFloat();
                    return;
                case "flag":
                    this.flag = (UiAnimDataFlag)value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "srcNodeNames":
                    while(this.srcNodeNames.Count <= index) { this.srcNodeNames.Add(default(String)); }
                    this.srcNodeNames[index] = value.GetValueAsString();
                    return;
                case "destNodeNames":
                    while(this.destNodeNames.Count <= index) { this.destNodeNames.Add(default(String)); }
                    this.destNodeNames[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}