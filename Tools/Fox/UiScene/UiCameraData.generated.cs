//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.UiScene
{
    public partial class UiCameraData : Fox.Core.Data 
    {
        // Properties
        public String cameraName { get; set; }
        
        public System.Numerics.Vector3 translate { get; set; }
        
        public System.Numerics.Quaternion rotate { get; set; }
        
        public bool useOrtho { get; set; }
        
        public float orthoHeight { get; set; }
        
        public float nearClip { get; set; }
        
        public float farClip { get; set; }
        
        public float fov { get; set; }
        
        public UiCameraDataFov fovType { get; set; }
        
        public UiCameraDataFlag debug { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiCameraData()
        {
            classInfo = new EntityInfo(new String("UiCameraData"), base.GetClassEntityInfo(), 0, "Ui", 0);
			
			classInfo.StaticProperties.Insert(new String("cameraName"), new PropertyInfo(PropertyInfo.PropertyType.String, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("translate"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotate"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useOrtho"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("orthoHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nearClip"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("farClip"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fov"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fovType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiCameraDataFov), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debug"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiCameraDataFlag), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiCameraData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "cameraName":
                    this.cameraName = value.GetValueAsString();
                    return;
                case "translate":
                    this.translate = value.GetValueAsVector3();
                    return;
                case "rotate":
                    this.rotate = value.GetValueAsQuat();
                    return;
                case "useOrtho":
                    this.useOrtho = value.GetValueAsBool();
                    return;
                case "orthoHeight":
                    this.orthoHeight = value.GetValueAsFloat();
                    return;
                case "nearClip":
                    this.nearClip = value.GetValueAsFloat();
                    return;
                case "farClip":
                    this.farClip = value.GetValueAsFloat();
                    return;
                case "fov":
                    this.fov = value.GetValueAsFloat();
                    return;
                case "fovType":
                    this.fovType = (UiCameraDataFov)value.GetValueAsInt32();
                    return;
                case "debug":
                    this.debug = (UiCameraDataFlag)value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}