//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.UiScene
{
    public partial class UiModelData : Fox.Core.TransformData 
    {
        // Properties
        public FilePtr<File> data { get; set; }
        
        public String sceneName { get; set; }
        
        public int priority { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> animations { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public bool useLayoutCamera { get; set; }
        
        public UiModelDataFlag flag { get; set; }
        
        public float billboardMin { get; set; }
        
        public float billboardMax { get; set; }
        
        public EntityHandle connection_connectModelDataHandle { get; set; }
        
        public String connection_connectModelNodeName { get; set; }
        
        public Color color { get; set; }
        
        public UiInheritanceSetting inheritanceSetting { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<UiScene.UiModelNodeElement>> modelNodes { get; } = new System.Collections.Generic.List<EntityPtr<UiScene.UiModelNodeElement>>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiModelData()
        {
            classInfo = new EntityInfo(new String("UiModelData"), base.GetClassEntityInfo(), 0, "Ui", 6);
			
			classInfo.StaticProperties.Insert(new String("data"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sceneName"), new PropertyInfo(PropertyInfo.PropertyType.String, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("animations"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 344, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useLayoutCamera"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flag"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiModelDataFlag), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("billboardMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("billboardMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 372, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connection_connectModelDataHandle"), new PropertyInfo(PropertyInfo.PropertyType.EntityHandle, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connection_connectModelNodeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 392, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 400, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inheritanceSetting"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 416, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(UiInheritanceSetting), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("modelNodes"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 424, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(UiScene.UiModelNodeElement), null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiModelData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "data":
                    this.data = value.GetValueAsFilePtr();
                    return;
                case "sceneName":
                    this.sceneName = value.GetValueAsString();
                    return;
                case "priority":
                    this.priority = value.GetValueAsInt32();
                    return;
                case "useLayoutCamera":
                    this.useLayoutCamera = value.GetValueAsBool();
                    return;
                case "flag":
                    this.flag = (UiModelDataFlag)value.GetValueAsUInt32();
                    return;
                case "billboardMin":
                    this.billboardMin = value.GetValueAsFloat();
                    return;
                case "billboardMax":
                    this.billboardMax = value.GetValueAsFloat();
                    return;
                case "connection_connectModelDataHandle":
                    this.connection_connectModelDataHandle = value.GetValueAsEntityHandle();
                    return;
                case "connection_connectModelNodeName":
                    this.connection_connectModelNodeName = value.GetValueAsString();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "inheritanceSetting":
                    this.inheritanceSetting = (UiInheritanceSetting)value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "animations":
                    while(this.animations.Count <= index) { this.animations.Add(default(EntityLink)); }
                    this.animations[index] = value.GetValueAsEntityLink();
                    return;
                case "modelNodes":
                    while(this.modelNodes.Count <= index) { this.modelNodes.Add(default(EntityPtr<UiScene.UiModelNodeElement>)); }
                    this.modelNodes[index] = EntityPtr<UiScene.UiModelNodeElement>.Get(value.GetValueAsEntityPtr().Entity as UiScene.UiModelNodeElement);
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}