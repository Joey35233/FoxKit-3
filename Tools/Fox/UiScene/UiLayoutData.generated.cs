//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.UiScene
{
    public partial class UiLayoutData : Fox.Core.TransformData 
    {
        // Properties
        public Path layoutPath { get; set; }
        
        public Color color { get; set; }
        
        public bool visible { get; set; }
        
        public int drawPriority { get; set; }
        
        public EntityHandle connection_connectModelDataHandle { get; set; }
        
        public String connection_connectModelNodeName { get; set; }
        
        public bool useParentCamera { get; set; }
        
        public int fontTableIndex { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiLayoutData()
        {
            classInfo = new EntityInfo(new String("UiLayoutData"), base.GetClassEntityInfo(), 0, "Ui", 6);
			
			classInfo.StaticProperties.Insert(new String("layoutPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("visible"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawPriority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 340, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connection_connectModelDataHandle"), new PropertyInfo(PropertyInfo.PropertyType.EntityHandle, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connection_connectModelNodeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useParentCamera"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fontTableIndex"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 372, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiLayoutData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "layoutPath":
                    this.layoutPath = value.GetValueAsPath();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "visible":
                    this.visible = value.GetValueAsBool();
                    return;
                case "drawPriority":
                    this.drawPriority = value.GetValueAsInt32();
                    return;
                case "connection_connectModelDataHandle":
                    this.connection_connectModelDataHandle = value.GetValueAsEntityHandle();
                    return;
                case "connection_connectModelNodeName":
                    this.connection_connectModelNodeName = value.GetValueAsString();
                    return;
                case "useParentCamera":
                    this.useParentCamera = value.GetValueAsBool();
                    return;
                case "fontTableIndex":
                    this.fontTableIndex = value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}