//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Nav
{
    public partial class NavCurrentNavigationDesc : Fox.Core.Entity 
    {
        // Properties
        public System.Numerics.Vector3 destination { get; set; }
        
        public System.Numerics.Vector3 destinationDirection { get; set; }
        
        public System.Numerics.Vector3 position { get; set; }
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> startPositions { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Numerics.Vector3 direction { get; set; }
        
        public float steeringMargin { get; set; }
        
        public float minimumTurningRadius { get; set; }
        
        public float turningRadius { get; set; }
        
        public float radius { get; set; }
        
        public ushort attribute { get; set; }
        
        public float pathUpdateDist { get; set; }
        
        public uint pathfindOptionEnableFlags { get; set; }
        
        public bool enableAutoIncrementStep { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static NavCurrentNavigationDesc()
        {
            classInfo = new EntityInfo(new String("NavCurrentNavigationDesc"), base.GetClassEntityInfo(), 0, "Nav", 0);
			
			classInfo.StaticProperties.Insert(new String("destination"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 48, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("destinationDirection"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("position"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startPositions"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 128, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("direction"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("steeringMargin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minimumTurningRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("turningRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("radius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attribute"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("pathUpdateDist"), new PropertyInfo(PropertyInfo.PropertyType.Float, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("pathfindOptionEnableFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 204, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableAutoIncrementStep"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public NavCurrentNavigationDesc(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "destination":
                    this.destination = value.GetValueAsVector3();
                    return;
                case "destinationDirection":
                    this.destinationDirection = value.GetValueAsVector3();
                    return;
                case "position":
                    this.position = value.GetValueAsVector3();
                    return;
                case "direction":
                    this.direction = value.GetValueAsVector3();
                    return;
                case "steeringMargin":
                    this.steeringMargin = value.GetValueAsFloat();
                    return;
                case "minimumTurningRadius":
                    this.minimumTurningRadius = value.GetValueAsFloat();
                    return;
                case "turningRadius":
                    this.turningRadius = value.GetValueAsFloat();
                    return;
                case "radius":
                    this.radius = value.GetValueAsFloat();
                    return;
                case "attribute":
                    this.attribute = value.GetValueAsUInt16();
                    return;
                case "pathUpdateDist":
                    this.pathUpdateDist = value.GetValueAsFloat();
                    return;
                case "pathfindOptionEnableFlags":
                    this.pathfindOptionEnableFlags = value.GetValueAsUInt32();
                    return;
                case "enableAutoIncrementStep":
                    this.enableAutoIncrementStep = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "startPositions":
                    while(this.startPositions.Count <= index) { this.startPositions.Add(default(System.Numerics.Vector3)); }
                    this.startPositions[index] = value.GetValueAsVector3();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}