//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Geox
{
    public partial class GeoxCollisionPrimitive : Fox.Core.TransformData 
    {
        // Properties
        public CollisionPrimitive_Category collisionCategory { get; set; }
        
        public CollisionPrimitive_PrimType primitiveType { get; set; }
        
        public String groupTag { get; set; }
        
        public String collisionMaterial { get; set; }
        
        public System.Collections.Generic.IList<String> collisionAttributeNames { get; } = new System.Collections.Generic.List<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GeoxCollisionPrimitive()
        {
            classInfo = new EntityInfo(new String("GeoxCollisionPrimitive"), base.GetClassEntityInfo(), 0, "Geox", 0);
			
			classInfo.StaticProperties.Insert(new String("collisionCategory"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(CollisionPrimitive_Category), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("primitiveType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(CollisionPrimitive_PrimType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("groupTag"), new PropertyInfo(PropertyInfo.PropertyType.String, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionMaterial"), new PropertyInfo(PropertyInfo.PropertyType.String, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionAttributeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 328, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GeoxCollisionPrimitive(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "collisionCategory":
                    this.collisionCategory = (CollisionPrimitive_Category)value.GetValueAsInt32();
                    return;
                case "primitiveType":
                    this.primitiveType = (CollisionPrimitive_PrimType)value.GetValueAsInt32();
                    return;
                case "groupTag":
                    this.groupTag = value.GetValueAsString();
                    return;
                case "collisionMaterial":
                    this.collisionMaterial = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "collisionAttributeNames":
                    while(this.collisionAttributeNames.Count <= index) { this.collisionAttributeNames.Add(default(String)); }
                    this.collisionAttributeNames[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}