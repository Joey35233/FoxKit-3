//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Geox
{
    public partial class GeoxPartsTargetObject : Fox.Core.TransformData 
    {
        // Properties
        public PrimType primType { get; set; }
        
        public AxisSort axisSortFlag { get; set; }
        
        public ulong systemAttribute { get; set; }
        
        public uint through { get; set; }
        
        public bool isValid { get; set; }
        
        public String categoryTag { get; set; }
        
        public System.Collections.Generic.IList<String> groupTags { get; } = new System.Collections.Generic.List<String>();
        
        public EntityLink applicationDataLink { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GeoxPartsTargetObject()
        {
            classInfo = new EntityInfo(new String("GeoxPartsTargetObject"), base.GetClassEntityInfo(), 0, "Target", 2);
			
			classInfo.StaticProperties.Insert(new String("primType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(PrimType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("axisSortFlag"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(AxisSort), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("systemAttribute"), new PropertyInfo(PropertyInfo.PropertyType.UInt64, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("through"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isValid"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("categoryTag"), new PropertyInfo(PropertyInfo.PropertyType.String, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("groupTags"), new PropertyInfo(PropertyInfo.PropertyType.String, 336, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("applicationDataLink"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GeoxPartsTargetObject(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "primType":
                    this.primType = (PrimType)value.GetValueAsInt32();
                    return;
                case "axisSortFlag":
                    this.axisSortFlag = (AxisSort)value.GetValueAsInt32();
                    return;
                case "systemAttribute":
                    this.systemAttribute = value.GetValueAsUInt64();
                    return;
                case "through":
                    this.through = value.GetValueAsUInt32();
                    return;
                case "isValid":
                    this.isValid = value.GetValueAsBool();
                    return;
                case "categoryTag":
                    this.categoryTag = value.GetValueAsString();
                    return;
                case "applicationDataLink":
                    this.applicationDataLink = value.GetValueAsEntityLink();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "groupTags":
                    while(this.groupTags.Count <= index) { this.groupTags.Add(default(String)); }
                    this.groupTags[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}