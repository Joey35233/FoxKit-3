//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Geox
{
    public partial class GeoxTargetDesc : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<System.Numerics.Vector3> posArray { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> scaleArray { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Collections.Generic.IList<System.Numerics.Quaternion> rotArray { get; } = new System.Collections.Generic.List<System.Numerics.Quaternion>();
        
        public System.Collections.Generic.IList<uint> primTypeArray { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<ulong> systemAttributeArray { get; } = new System.Collections.Generic.List<ulong>();
        
        public System.Collections.Generic.IList<uint> throughValueArray { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<uint> flagArray { get; } = new System.Collections.Generic.List<uint>();
        
        public String categoryTag { get; set; }
        
        public System.Collections.Generic.IList<String> nameArray { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> attachSkeletonArray { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> groupArray { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<uint> objIndexForgroupTagArray { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<EntityLink> applicationDataLinkArray { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GeoxTargetDesc()
        {
            classInfo = new EntityInfo(new String("GeoxTargetDesc"), base.GetClassEntityInfo(), 264, "Target", 0);
			
			classInfo.StaticProperties.Insert(new String("posArray"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scaleArray"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotArray"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 152, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("primTypeArray"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 168, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("systemAttributeArray"), new PropertyInfo(PropertyInfo.PropertyType.UInt64, 184, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("throughValueArray"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 200, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flagArray"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 216, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("categoryTag"), new PropertyInfo(PropertyInfo.PropertyType.String, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nameArray"), new PropertyInfo(PropertyInfo.PropertyType.String, 240, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attachSkeletonArray"), new PropertyInfo(PropertyInfo.PropertyType.String, 256, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("groupArray"), new PropertyInfo(PropertyInfo.PropertyType.String, 272, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("objIndexForgroupTagArray"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 288, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("applicationDataLinkArray"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 304, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GeoxTargetDesc(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "categoryTag":
                    this.categoryTag = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "posArray":
                    while(this.posArray.Count <= index) { this.posArray.Add(default(System.Numerics.Vector3)); }
                    this.posArray[index] = value.GetValueAsVector3();
                    return;
                case "scaleArray":
                    while(this.scaleArray.Count <= index) { this.scaleArray.Add(default(System.Numerics.Vector3)); }
                    this.scaleArray[index] = value.GetValueAsVector3();
                    return;
                case "rotArray":
                    while(this.rotArray.Count <= index) { this.rotArray.Add(default(System.Numerics.Quaternion)); }
                    this.rotArray[index] = value.GetValueAsQuat();
                    return;
                case "primTypeArray":
                    while(this.primTypeArray.Count <= index) { this.primTypeArray.Add(default(uint)); }
                    this.primTypeArray[index] = value.GetValueAsUInt32();
                    return;
                case "systemAttributeArray":
                    while(this.systemAttributeArray.Count <= index) { this.systemAttributeArray.Add(default(ulong)); }
                    this.systemAttributeArray[index] = value.GetValueAsUInt64();
                    return;
                case "throughValueArray":
                    while(this.throughValueArray.Count <= index) { this.throughValueArray.Add(default(uint)); }
                    this.throughValueArray[index] = value.GetValueAsUInt32();
                    return;
                case "flagArray":
                    while(this.flagArray.Count <= index) { this.flagArray.Add(default(uint)); }
                    this.flagArray[index] = value.GetValueAsUInt32();
                    return;
                case "nameArray":
                    while(this.nameArray.Count <= index) { this.nameArray.Add(default(String)); }
                    this.nameArray[index] = value.GetValueAsString();
                    return;
                case "attachSkeletonArray":
                    while(this.attachSkeletonArray.Count <= index) { this.attachSkeletonArray.Add(default(String)); }
                    this.attachSkeletonArray[index] = value.GetValueAsString();
                    return;
                case "groupArray":
                    while(this.groupArray.Count <= index) { this.groupArray.Add(default(String)); }
                    this.groupArray[index] = value.GetValueAsString();
                    return;
                case "objIndexForgroupTagArray":
                    while(this.objIndexForgroupTagArray.Count <= index) { this.objIndexForgroupTagArray.Add(default(uint)); }
                    this.objIndexForgroupTagArray[index] = value.GetValueAsUInt32();
                    return;
                case "applicationDataLinkArray":
                    while(this.applicationDataLinkArray.Count <= index) { this.applicationDataLinkArray.Add(default(EntityLink)); }
                    this.applicationDataLinkArray[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}