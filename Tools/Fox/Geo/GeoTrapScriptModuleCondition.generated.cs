//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Geo
{
    public partial class GeoTrapScriptModuleCondition : Fox.Geo.GeoTrapCondition 
    {
        // Properties
        public bool isAndCheck { get; set; }
        
        public System.Collections.Generic.IList<Path> checkScriptPathArray { get; } = new System.Collections.Generic.List<Path>();
        
        public System.Collections.Generic.IList<Path> execScriptPathArray { get; } = new System.Collections.Generic.List<Path>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GeoTrapScriptModuleCondition()
        {
            classInfo = new EntityInfo(new String("GeoTrapScriptModuleCondition"), base.GetClassEntityInfo(), 0, "Trap", 1);
			
			classInfo.StaticProperties.Insert(new String("isAndCheck"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("checkScriptPathArray"), new PropertyInfo(PropertyInfo.PropertyType.Path, 328, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("execScriptPathArray"), new PropertyInfo(PropertyInfo.PropertyType.Path, 344, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GeoTrapScriptModuleCondition(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "isAndCheck":
                    this.isAndCheck = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "checkScriptPathArray":
                    while(this.checkScriptPathArray.Count <= index) { this.checkScriptPathArray.Add(default(Path)); }
                    this.checkScriptPathArray[index] = value.GetValueAsPath();
                    return;
                case "execScriptPathArray":
                    while(this.execScriptPathArray.Count <= index) { this.execScriptPathArray.Add(default(Path)); }
                    this.execScriptPathArray[index] = value.GetValueAsPath();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}