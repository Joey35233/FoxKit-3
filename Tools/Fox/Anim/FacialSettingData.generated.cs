//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Anim
{
    public partial class FacialSettingData : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<EntityPtr<Anim.FacialMaskElement>> aspectMaskList { get; } = new System.Collections.Generic.List<EntityPtr<Anim.FacialMaskElement>>();
        
        public EntityPtr<Anim.FacialMaskElement> mouthMask { get; set; }
        
        public EntityPtr<Anim.FacialMaskElement> lipMask { get; set; }
        
        public String rootName { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static FacialSettingData()
        {
            classInfo = new EntityInfo(new String("FacialSettingData"), base.GetClassEntityInfo(), 104, null, 2);
			
			classInfo.StaticProperties.Insert(new String("aspectMaskList"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Anim.FacialMaskElement), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mouthMask"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Anim.FacialMaskElement), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lipMask"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Anim.FacialMaskElement), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rootName"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public FacialSettingData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "mouthMask":
                    this.mouthMask = EntityPtr<Anim.FacialMaskElement>.Get(value.GetValueAsEntityPtr().Entity as Anim.FacialMaskElement);
                    return;
                case "lipMask":
                    this.lipMask = EntityPtr<Anim.FacialMaskElement>.Get(value.GetValueAsEntityPtr().Entity as Anim.FacialMaskElement);
                    return;
                case "rootName":
                    this.rootName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "aspectMaskList":
                    while(this.aspectMaskList.Count <= index) { this.aspectMaskList.Add(default(EntityPtr<Anim.FacialMaskElement>)); }
                    this.aspectMaskList[index] = EntityPtr<Anim.FacialMaskElement>.Get(value.GetValueAsEntityPtr().Entity as Anim.FacialMaskElement);
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}