//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Anim
{
    public partial class EventDataUnit : Fox.Core.Data 
    {
        // Properties
        public String eventName { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<Anim.TimeSection>> sections { get; } = new System.Collections.Generic.List<EntityPtr<Anim.TimeSection>>();
        
        public System.Collections.Generic.IList<String> paramString { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<int> paramInt { get; } = new System.Collections.Generic.List<int>();
        
        public System.Collections.Generic.IList<float> paramFloat { get; } = new System.Collections.Generic.List<float>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static EventDataUnit()
        {
            classInfo = new EntityInfo(new String("EventDataUnit"), base.GetClassEntityInfo(), 136, null, 2);
			
			classInfo.StaticProperties.Insert(new String("eventName"), new PropertyInfo(PropertyInfo.PropertyType.String, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sections"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 128, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Anim.TimeSection), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("paramString"), new PropertyInfo(PropertyInfo.PropertyType.String, 144, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("paramInt"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 160, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("paramFloat"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public EventDataUnit(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "eventName":
                    this.eventName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "sections":
                    while(this.sections.Count <= index) { this.sections.Add(default(EntityPtr<Anim.TimeSection>)); }
                    this.sections[index] = EntityPtr<Anim.TimeSection>.Get(value.GetValueAsEntityPtr().Entity as Anim.TimeSection);
                    return;
                case "paramString":
                    while(this.paramString.Count <= index) { this.paramString.Add(default(String)); }
                    this.paramString[index] = value.GetValueAsString();
                    return;
                case "paramInt":
                    while(this.paramInt.Count <= index) { this.paramInt.Add(default(int)); }
                    this.paramInt[index] = value.GetValueAsInt32();
                    return;
                case "paramFloat":
                    while(this.paramFloat.Count <= index) { this.paramFloat.Add(default(float)); }
                    this.paramFloat[index] = value.GetValueAsFloat();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}