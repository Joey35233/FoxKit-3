//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.PartsBuilder
{
    public partial class ModelDescription : Fox.PartsBuilder.PartDescription 
    {
        // Properties
        public FilePtr<File> modelFile { get; set; }
        
        public FilePtr<File> connectPointFile { get; set; }
        
        public FilePtr<File> gameRigFile { get; set; }
        
        public FilePtr<File> helpBoneFile { get; set; }
        
        public FilePtr<File> lipAdjustBinaryFile { get; set; }
        
        public FilePtr<File> facialSettingFile { get; set; }
        
        public System.Collections.Generic.IList<String> invisibleMeshNames { get; } = new System.Collections.Generic.List<String>();
        
        public float lodFarPixelSize { get; set; }
        
        public float lodNearPixelSize { get; set; }
        
        public float lodPolygonSize { get; set; }
        
        public ModelDescription_DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public ModelDescription_RejectFarRangeShadowCast rejectFarRangeShadowCast { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ModelDescription()
        {
            classInfo = new EntityInfo(new String("ModelDescription"), base.GetClassEntityInfo(), 288, "PartsBuilder", 12);
			
			classInfo.StaticProperties.Insert(new String("modelFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connectPointFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gameRigFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("helpBoneFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lipAdjustBinaryFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("facialSettingFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("invisibleMeshNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 296, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodFarPixelSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 316, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodNearPixelSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodPolygonSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(ModelDescription_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rejectFarRangeShadowCast"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(ModelDescription_RejectFarRangeShadowCast), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ModelDescription(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "modelFile":
                    this.modelFile = value.GetValueAsFilePtr();
                    return;
                case "connectPointFile":
                    this.connectPointFile = value.GetValueAsFilePtr();
                    return;
                case "gameRigFile":
                    this.gameRigFile = value.GetValueAsFilePtr();
                    return;
                case "helpBoneFile":
                    this.helpBoneFile = value.GetValueAsFilePtr();
                    return;
                case "lipAdjustBinaryFile":
                    this.lipAdjustBinaryFile = value.GetValueAsFilePtr();
                    return;
                case "facialSettingFile":
                    this.facialSettingFile = value.GetValueAsFilePtr();
                    return;
                case "lodFarPixelSize":
                    this.lodFarPixelSize = value.GetValueAsFloat();
                    return;
                case "lodNearPixelSize":
                    this.lodNearPixelSize = value.GetValueAsFloat();
                    return;
                case "lodPolygonSize":
                    this.lodPolygonSize = value.GetValueAsFloat();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (ModelDescription_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "rejectFarRangeShadowCast":
                    this.rejectFarRangeShadowCast = (ModelDescription_RejectFarRangeShadowCast)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "invisibleMeshNames":
                    while(this.invisibleMeshNames.Count <= index) { this.invisibleMeshNames.Add(default(String)); }
                    this.invisibleMeshNames[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}