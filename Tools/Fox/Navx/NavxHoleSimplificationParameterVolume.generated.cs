//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Navx
{
    public partial class NavxHoleSimplificationParameterVolume : Fox.Core.TransformData 
    {
        // Properties
        public String sceneName { get; set; }
        
        public String worldName { get; set; }
        
        public float convexThreshold { get; set; }
        
        public float obbExpandThreshold { get; set; }
        
        public float obbToAabbThreshold { get; set; }
        
        public float smoothingThreshold { get; set; }
        
        public bool isNotClosePassage { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static NavxHoleSimplificationParameterVolume()
        {
            classInfo = new EntityInfo(new String("NavxHoleSimplificationParameterVolume"), base.GetClassEntityInfo(), 288, "Navx", 1);
			
			classInfo.StaticProperties.Insert(new String("sceneName"), new PropertyInfo(PropertyInfo.PropertyType.String, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("worldName"), new PropertyInfo(PropertyInfo.PropertyType.String, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("convexThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("obbExpandThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("obbToAabbThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smoothingThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 332, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isNotClosePassage"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public NavxHoleSimplificationParameterVolume(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "sceneName":
                    this.sceneName = value.GetValueAsString();
                    return;
                case "worldName":
                    this.worldName = value.GetValueAsString();
                    return;
                case "convexThreshold":
                    this.convexThreshold = value.GetValueAsFloat();
                    return;
                case "obbExpandThreshold":
                    this.obbExpandThreshold = value.GetValueAsFloat();
                    return;
                case "obbToAabbThreshold":
                    this.obbToAabbThreshold = value.GetValueAsFloat();
                    return;
                case "smoothingThreshold":
                    this.smoothingThreshold = value.GetValueAsFloat();
                    return;
                case "isNotClosePassage":
                    this.isNotClosePassage = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}