//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Navx
{
    public partial class NavxWorldGenerateParameter : Fox.Core.TransformData 
    {
        // Properties
        public float resolution { get; set; }
        
        public float verticalThreshold { get; set; }
        
        public bool doesDivideIslandWithSector { get; set; }
        
        public bool doesHoleSimplification { get; set; }
        
        public float holeSimplificationConvexThreshold { get; set; }
        
        public float holeSimplificationObbExpandThreshold { get; set; }
        
        public float holeSimplificationObbToAabbThreshold { get; set; }
        
        public float holeSimplificationSmoothingThreshold { get; set; }
        
        public bool isHoleSimplificationDoesNotClosePassage { get; set; }
        
        public uint holeSimplificationReduceCount { get; set; }
        
        public bool doesAdjustSearchSpaceToNavmesh { get; set; }
        
        public bool doesGenerateFillNavVolumeInRadius { get; set; }
        
        public Path roughGraphFilePath { get; set; }
        
        public FilePtr<File> roughGraphFilePtr { get; set; }
        
        public String worldName { get; set; }
        
        public uint maxFileSizeInKb { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<Navx.NavxNavigableParameter>> parameters { get; } = new System.Collections.Generic.List<EntityPtr<Navx.NavxNavigableParameter>>();
        
        public uint sectorSizeHorizontal { get; set; }
        
        public uint tileSizeHorizontal { get; set; }
        
        public uint searchSpaceBucketSizeHorizontal { get; set; }
        
        public System.Collections.Generic.IList<String> collisionAttributes { get; } = new System.Collections.Generic.List<String>();
        
        public Path loadFox2FileListScriptPath { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static NavxWorldGenerateParameter()
        {
            classInfo = new EntityInfo(new String("NavxWorldGenerateParameter"), base.GetClassEntityInfo(), 400, "Navx", 27);
			
			classInfo.StaticProperties.Insert(new String("resolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("verticalThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("doesDivideIslandWithSector"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("doesHoleSimplification"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 313, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("holeSimplificationConvexThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 316, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("holeSimplificationObbExpandThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("holeSimplificationObbToAabbThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("holeSimplificationSmoothingThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isHoleSimplificationDoesNotClosePassage"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 332, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("holeSimplificationReduceCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("doesAdjustSearchSpaceToNavmesh"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 340, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("doesGenerateFillNavVolumeInRadius"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 341, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("roughGraphFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 344, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("roughGraphFilePtr"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("worldName"), new PropertyInfo(PropertyInfo.PropertyType.String, 376, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxFileSizeInKb"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("parameters"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 392, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Navx.NavxNavigableParameter), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sectorSizeHorizontal"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 408, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("tileSizeHorizontal"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 412, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("searchSpaceBucketSizeHorizontal"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 416, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionAttributes"), new PropertyInfo(PropertyInfo.PropertyType.String, 424, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("loadFox2FileListScriptPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 440, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public NavxWorldGenerateParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "resolution":
                    this.resolution = value.GetValueAsFloat();
                    return;
                case "verticalThreshold":
                    this.verticalThreshold = value.GetValueAsFloat();
                    return;
                case "doesDivideIslandWithSector":
                    this.doesDivideIslandWithSector = value.GetValueAsBool();
                    return;
                case "doesHoleSimplification":
                    this.doesHoleSimplification = value.GetValueAsBool();
                    return;
                case "holeSimplificationConvexThreshold":
                    this.holeSimplificationConvexThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationObbExpandThreshold":
                    this.holeSimplificationObbExpandThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationObbToAabbThreshold":
                    this.holeSimplificationObbToAabbThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationSmoothingThreshold":
                    this.holeSimplificationSmoothingThreshold = value.GetValueAsFloat();
                    return;
                case "isHoleSimplificationDoesNotClosePassage":
                    this.isHoleSimplificationDoesNotClosePassage = value.GetValueAsBool();
                    return;
                case "holeSimplificationReduceCount":
                    this.holeSimplificationReduceCount = value.GetValueAsUInt32();
                    return;
                case "doesAdjustSearchSpaceToNavmesh":
                    this.doesAdjustSearchSpaceToNavmesh = value.GetValueAsBool();
                    return;
                case "doesGenerateFillNavVolumeInRadius":
                    this.doesGenerateFillNavVolumeInRadius = value.GetValueAsBool();
                    return;
                case "roughGraphFilePath":
                    this.roughGraphFilePath = value.GetValueAsPath();
                    return;
                case "roughGraphFilePtr":
                    this.roughGraphFilePtr = value.GetValueAsFilePtr();
                    return;
                case "worldName":
                    this.worldName = value.GetValueAsString();
                    return;
                case "maxFileSizeInKb":
                    this.maxFileSizeInKb = value.GetValueAsUInt32();
                    return;
                case "sectorSizeHorizontal":
                    this.sectorSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "tileSizeHorizontal":
                    this.tileSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "searchSpaceBucketSizeHorizontal":
                    this.searchSpaceBucketSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "loadFox2FileListScriptPath":
                    this.loadFox2FileListScriptPath = value.GetValueAsPath();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "parameters":
                    while(this.parameters.Count <= index) { this.parameters.Add(default(EntityPtr<Navx.NavxNavigableParameter>)); }
                    this.parameters[index] = EntityPtr<Navx.NavxNavigableParameter>.Get(value.GetValueAsEntityPtr().Entity as Navx.NavxNavigableParameter);
                    return;
                case "collisionAttributes":
                    while(this.collisionAttributes.Count <= index) { this.collisionAttributes.Add(default(String)); }
                    this.collisionAttributes[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}