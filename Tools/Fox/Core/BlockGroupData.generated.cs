//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Core
{
    public partial class BlockGroupData : Fox.Core.Data 
    {
        // Properties
        public float blockMemorySize { get; set; }
        
        public BlockGroupData_ByteOrder sizeOrder { get; set; }
        
        public uint blockSizeInBytes { get; set; }
        
        public uint blockCount { get; set; }
        
        public System.Collections.Generic.IList<Path> block { get; } = new System.Collections.Generic.List<Path>();
        
        public System.Collections.Generic.IList<EntityLink> relatedBlockGroups { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public System.Collections.Generic.IList<EntityLink> prerequisiteBlockGroups { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static BlockGroupData()
        {
            classInfo = new EntityInfo(new String("BlockGroupData"), base.GetClassEntityInfo(), 0, null, 1);
			
			classInfo.StaticProperties.Insert(new String("blockMemorySize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sizeOrder"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(BlockGroupData_ByteOrder), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockSizeInBytes"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("block"), new PropertyInfo(PropertyInfo.PropertyType.Path, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("relatedBlockGroups"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 152, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("prerequisiteBlockGroups"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 168, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public BlockGroupData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "blockMemorySize":
                    this.blockMemorySize = value.GetValueAsFloat();
                    return;
                case "sizeOrder":
                    this.sizeOrder = (BlockGroupData_ByteOrder)value.GetValueAsInt32();
                    return;
                case "blockSizeInBytes":
                    this.blockSizeInBytes = value.GetValueAsUInt32();
                    return;
                case "blockCount":
                    this.blockCount = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "block":
                    while(this.block.Count <= index) { this.block.Add(default(Path)); }
                    this.block[index] = value.GetValueAsPath();
                    return;
                case "relatedBlockGroups":
                    while(this.relatedBlockGroups.Count <= index) { this.relatedBlockGroups.Add(default(EntityLink)); }
                    this.relatedBlockGroups[index] = value.GetValueAsEntityLink();
                    return;
                case "prerequisiteBlockGroups":
                    while(this.prerequisiteBlockGroups.Count <= index) { this.prerequisiteBlockGroups.Add(default(EntityLink)); }
                    this.prerequisiteBlockGroups[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}