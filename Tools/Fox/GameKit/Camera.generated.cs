//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class Camera : Fox.Core.Entity 
    {
        // Properties
        public String priorityName { get; set; }
        
        public bool enable { get; set; }
        
        public System.Numerics.Quaternion transform_rotation_quat { get; set; }
        
        public System.Numerics.Vector3 transform_translation { get; set; }
        
        public float focusDistance { get; set; }
        
        public float focalLength { get; set; }
        
        public bool useEffectiveFocalLength { get; set; }
        
        public float effectiveFocalLengthRatio { get; set; }
        
        public float aperture { get; set; }
        
        public System.Numerics.Quaternion listenerVirtualTrans_rotation_quat { get; set; }
        
        public System.Numerics.Vector3 listenerVirtualTrans_translation { get; set; }
        
        public bool listenerVirtualFlag { get; set; }
        
        public float nearClipDistance { get; set; }
        
        public float farClipDistance { get; set; }
        
        public float shutterSpeed { get; set; }
        
        public bool useDefaultExposureValue { get; set; }
        
        public float minExposure { get; set; }
        
        public float maxExposure { get; set; }
        
        public float exposureCompensation { get; set; }
        
        public bool useDefaultBloom { get; set; }
        
        public float bloomSize { get; set; }
        
        public float bloomWeight { get; set; }
        
        public float bloomBrightnessExtraction { get; set; }
        
        public bool cancelCameraBlur { get; set; }
        
        public float keyValue { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Camera()
        {
            classInfo = new EntityInfo(new String("Camera"), base.GetClassEntityInfo(), 0, null, 10);
			
			classInfo.StaticProperties.Insert(new String("priorityName"), new PropertyInfo(PropertyInfo.PropertyType.String, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transform_rotation_quat"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 288, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transform_translation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("focusDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("focalLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 60, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useEffectiveFocalLength"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 227, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("effectiveFocalLengthRatio"), new PropertyInfo(PropertyInfo.PropertyType.Float, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("aperture"), new PropertyInfo(PropertyInfo.PropertyType.Float, 68, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("listenerVirtualTrans_rotation_quat"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("listenerVirtualTrans_translation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("listenerVirtualFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 226, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nearClipDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("farClipDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 76, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shutterSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useDefaultExposureValue"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 229, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minExposure"), new PropertyInfo(PropertyInfo.PropertyType.Float, 84, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxExposure"), new PropertyInfo(PropertyInfo.PropertyType.Float, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("exposureCompensation"), new PropertyInfo(PropertyInfo.PropertyType.Float, 92, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useDefaultBloom"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 230, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bloomSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bloomWeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bloomBrightnessExtraction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 100, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cancelCameraBlur"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 228, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("keyValue"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Camera(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "priorityName":
                    this.priorityName = value.GetValueAsString();
                    return;
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "transform_rotation_quat":
                    this.transform_rotation_quat = value.GetValueAsQuat();
                    return;
                case "transform_translation":
                    this.transform_translation = value.GetValueAsVector3();
                    return;
                case "focusDistance":
                    this.focusDistance = value.GetValueAsFloat();
                    return;
                case "focalLength":
                    this.focalLength = value.GetValueAsFloat();
                    return;
                case "useEffectiveFocalLength":
                    this.useEffectiveFocalLength = value.GetValueAsBool();
                    return;
                case "effectiveFocalLengthRatio":
                    this.effectiveFocalLengthRatio = value.GetValueAsFloat();
                    return;
                case "aperture":
                    this.aperture = value.GetValueAsFloat();
                    return;
                case "listenerVirtualTrans_rotation_quat":
                    this.listenerVirtualTrans_rotation_quat = value.GetValueAsQuat();
                    return;
                case "listenerVirtualTrans_translation":
                    this.listenerVirtualTrans_translation = value.GetValueAsVector3();
                    return;
                case "listenerVirtualFlag":
                    this.listenerVirtualFlag = value.GetValueAsBool();
                    return;
                case "nearClipDistance":
                    this.nearClipDistance = value.GetValueAsFloat();
                    return;
                case "farClipDistance":
                    this.farClipDistance = value.GetValueAsFloat();
                    return;
                case "shutterSpeed":
                    this.shutterSpeed = value.GetValueAsFloat();
                    return;
                case "useDefaultExposureValue":
                    this.useDefaultExposureValue = value.GetValueAsBool();
                    return;
                case "minExposure":
                    this.minExposure = value.GetValueAsFloat();
                    return;
                case "maxExposure":
                    this.maxExposure = value.GetValueAsFloat();
                    return;
                case "exposureCompensation":
                    this.exposureCompensation = value.GetValueAsFloat();
                    return;
                case "useDefaultBloom":
                    this.useDefaultBloom = value.GetValueAsBool();
                    return;
                case "bloomSize":
                    this.bloomSize = value.GetValueAsFloat();
                    return;
                case "bloomWeight":
                    this.bloomWeight = value.GetValueAsFloat();
                    return;
                case "bloomBrightnessExtraction":
                    this.bloomBrightnessExtraction = value.GetValueAsFloat();
                    return;
                case "cancelCameraBlur":
                    this.cancelCameraBlur = value.GetValueAsBool();
                    return;
                case "keyValue":
                    this.keyValue = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}