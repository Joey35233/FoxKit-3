//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class TerrainDecal : Fox.Core.TransformData 
    {
        // Properties
        public EntityLink material { get; set; }
        
        public Color gridColor { get; set; }
        
        public Color color { get; set; }
        
        public float stepLength { get; set; }
        
        public float width { get; set; }
        
        public float transparency { get; set; }
        
        public float textureRepeatU { get; set; }
        
        public float textureRepeatV { get; set; }
        
        public int renderingPriority { get; set; }
        
        public float edgeTransparencyLength { get; set; }
        
        public float smoothEdgeLength { get; set; }
        
        public bool isTargetBlockTerrain { get; set; }
        
        public TerrainDecal_DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public bool isDisableAlbedo { get; set; }
        
        public bool hasSerializedNodes { get; set; }
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> serializedGraphNodes { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TerrainDecal()
        {
            classInfo = new EntityInfo(new String("TerrainDecal"), base.GetClassEntityInfo(), 384, "Terrain", 9);
			
			classInfo.StaticProperties.Insert(new String("material"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gridColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stepLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("width"), new PropertyInfo(PropertyInfo.PropertyType.Float, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transparency"), new PropertyInfo(PropertyInfo.PropertyType.Float, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("textureRepeatU"), new PropertyInfo(PropertyInfo.PropertyType.Float, 356, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("textureRepeatV"), new PropertyInfo(PropertyInfo.PropertyType.Float, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("renderingPriority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("edgeTransparencyLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 400, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smoothEdgeLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 404, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isTargetBlockTerrain"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 413, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 408, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TerrainDecal_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isDisableAlbedo"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 412, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hasSerializedNodes"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 414, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("serializedGraphNodes"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 416, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TerrainDecal(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "material":
                    this.material = value.GetValueAsEntityLink();
                    return;
                case "gridColor":
                    this.gridColor = value.GetValueAsColor();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "stepLength":
                    this.stepLength = value.GetValueAsFloat();
                    return;
                case "width":
                    this.width = value.GetValueAsFloat();
                    return;
                case "transparency":
                    this.transparency = value.GetValueAsFloat();
                    return;
                case "textureRepeatU":
                    this.textureRepeatU = value.GetValueAsFloat();
                    return;
                case "textureRepeatV":
                    this.textureRepeatV = value.GetValueAsFloat();
                    return;
                case "renderingPriority":
                    this.renderingPriority = value.GetValueAsInt32();
                    return;
                case "edgeTransparencyLength":
                    this.edgeTransparencyLength = value.GetValueAsFloat();
                    return;
                case "smoothEdgeLength":
                    this.smoothEdgeLength = value.GetValueAsFloat();
                    return;
                case "isTargetBlockTerrain":
                    this.isTargetBlockTerrain = value.GetValueAsBool();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (TerrainDecal_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "isDisableAlbedo":
                    this.isDisableAlbedo = value.GetValueAsBool();
                    return;
                case "hasSerializedNodes":
                    this.hasSerializedNodes = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "serializedGraphNodes":
                    while(this.serializedGraphNodes.Count <= index) { this.serializedGraphNodes.Add(default(System.Numerics.Vector3)); }
                    this.serializedGraphNodes[index] = value.GetValueAsVector3();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}