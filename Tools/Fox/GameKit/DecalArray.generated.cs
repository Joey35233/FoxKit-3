//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.GameKit
{
    [UnityEditor.InitializeOnLoad]
    public partial class DecalArray : Fox.Core.TransformData 
    {
        // Properties
        public Fox.Core.EntityLink material;
        
        public DecalArray_ProjectionMode projectionMode;
        
        public float nearClipScale;
        
        public DecalArray_ProjectionTarget projectionTarget;
        
        public float repeatU;
        
        public float repeatV;
        
        public float transparency;
        
        public DecalArray_PolygonDataSource polygonDataSource;
        
        public DecalArray_DrawRejectionLevel drawRejectionLevel;
        
        public float drawRejectionDegree;
        
        public uint decalFlags;
        
        public Fox.Core.DynamicArray<UnityEngine.Vector3> scales = new Fox.Core.DynamicArray<UnityEngine.Vector3>();
        
        public Fox.Core.DynamicArray<UnityEngine.Quaternion> rotations = new Fox.Core.DynamicArray<UnityEngine.Quaternion>();
        
        public Fox.Core.DynamicArray<UnityEngine.Vector3> translations = new Fox.Core.DynamicArray<UnityEngine.Vector3>();
        
        public Fox.Core.DynamicArray<Fox.Core.EntityLink> targets = new Fox.Core.DynamicArray<Fox.Core.EntityLink>();
        
        public Fox.Core.DynamicArray<uint> targetIndices = new Fox.Core.DynamicArray<uint>();
        
        public Fox.Core.DynamicArray<uint> targetStartIndices = new Fox.Core.DynamicArray<uint>();
        
        public Fox.Core.DynamicArray<int> renderingPriorities = new Fox.Core.DynamicArray<int>();
        
        public bool isDisableAlbedo;
        
        public bool isPreserveAspect;
        
        public bool isWrap;
        
        public bool showObject;
        
        public bool isVisibleGeom;
        
        public bool isSSDecal;
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DecalArray()
        {
            classInfo = new Fox.EntityInfo("DecalArray", typeof(DecalArray), new Fox.Core.TransformData().GetClassEntityInfo(), 448, "Decal", 1);
			classInfo.StaticProperties.Insert("material", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityLink, 304, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("projectionMode", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 344, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(DecalArray_ProjectionMode), Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("nearClipScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 348, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("projectionTarget", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 352, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(DecalArray_ProjectionTarget), Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("repeatU", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 356, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("repeatV", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 360, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("transparency", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 364, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("polygonDataSource", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 368, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(DecalArray_PolygonDataSource), Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("drawRejectionLevel", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 372, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(DecalArray_DrawRejectionLevel), Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("drawRejectionDegree", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 376, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("decalFlags", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 380, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("scales", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 384, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("rotations", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Quat, 400, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("translations", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 416, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("targets", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityLink, 432, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("targetIndices", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 448, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("targetStartIndices", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 464, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("renderingPriorities", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 480, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isDisableAlbedo", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isPreserveAspect", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isWrap", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("showObject", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isVisibleGeom", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isSSDecal", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructors
		public DecalArray(ulong address, ulong id) : base(address, id) { }
		public DecalArray() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Value value)
        {
            switch(propertyName)
            {
                case "material":
                    this.material = value.GetValueAsEntityLink();
                    return;
                case "projectionMode":
                    this.projectionMode = (DecalArray_ProjectionMode)value.GetValueAsInt32();
                    return;
                case "nearClipScale":
                    this.nearClipScale = value.GetValueAsFloat();
                    return;
                case "projectionTarget":
                    this.projectionTarget = (DecalArray_ProjectionTarget)value.GetValueAsInt32();
                    return;
                case "repeatU":
                    this.repeatU = value.GetValueAsFloat();
                    return;
                case "repeatV":
                    this.repeatV = value.GetValueAsFloat();
                    return;
                case "transparency":
                    this.transparency = value.GetValueAsFloat();
                    return;
                case "polygonDataSource":
                    this.polygonDataSource = (DecalArray_PolygonDataSource)value.GetValueAsInt32();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (DecalArray_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "drawRejectionDegree":
                    this.drawRejectionDegree = value.GetValueAsFloat();
                    return;
                case "decalFlags":
                    this.decalFlags = value.GetValueAsUInt32();
                    return;
                case "isDisableAlbedo":
                    this.isDisableAlbedo = value.GetValueAsBool();
                    return;
                case "isPreserveAspect":
                    this.isPreserveAspect = value.GetValueAsBool();
                    return;
                case "isWrap":
                    this.isWrap = value.GetValueAsBool();
                    return;
                case "showObject":
                    this.showObject = value.GetValueAsBool();
                    return;
                case "isVisibleGeom":
                    this.isVisibleGeom = value.GetValueAsBool();
                    return;
                case "isSSDecal":
                    this.isSSDecal = value.GetValueAsBool();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Value value)
        {
            switch(propertyName)
            {
                case "scales":
                    while(this.scales.Count <= index) { this.scales.Add(default(UnityEngine.Vector3)); }
                    this.scales[index] = value.GetValueAsVector3();
                    return;
                case "rotations":
                    while(this.rotations.Count <= index) { this.rotations.Add(default(UnityEngine.Quaternion)); }
                    this.rotations[index] = value.GetValueAsQuat();
                    return;
                case "translations":
                    while(this.translations.Count <= index) { this.translations.Add(default(UnityEngine.Vector3)); }
                    this.translations[index] = value.GetValueAsVector3();
                    return;
                case "targets":
                    while(this.targets.Count <= index) { this.targets.Add(default(Fox.Core.EntityLink)); }
                    this.targets[index] = value.GetValueAsEntityLink();
                    return;
                case "targetIndices":
                    while(this.targetIndices.Count <= index) { this.targetIndices.Add(default(uint)); }
                    this.targetIndices[index] = value.GetValueAsUInt32();
                    return;
                case "targetStartIndices":
                    while(this.targetStartIndices.Count <= index) { this.targetStartIndices.Add(default(uint)); }
                    this.targetStartIndices[index] = value.GetValueAsUInt32();
                    return;
                case "renderingPriorities":
                    while(this.renderingPriorities.Count <= index) { this.renderingPriorities.Add(default(int)); }
                    this.renderingPriorities[index] = value.GetValueAsInt32();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}