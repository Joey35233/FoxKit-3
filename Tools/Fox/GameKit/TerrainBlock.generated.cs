//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class TerrainBlock : Fox.Core.Data 
    {
        // Properties
        public uint id { get; set; }
        
        public String terrainName { get; set; }
        
        public FilePtr<File> filePtr { get; set; }
        
        public Path filePath { get; set; }
        
        public System.Numerics.Vector3 pos { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TerrainBlock()
        {
            classInfo = new EntityInfo(new String("TerrainBlock"), base.GetClassEntityInfo(), 144, null, 0);
			
			classInfo.StaticProperties.Insert(new String("id"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("terrainName"), new PropertyInfo(PropertyInfo.PropertyType.String, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("filePtr"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("filePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("pos"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TerrainBlock(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "id":
                    this.id = value.GetValueAsUInt32();
                    return;
                case "terrainName":
                    this.terrainName = value.GetValueAsString();
                    return;
                case "filePtr":
                    this.filePtr = value.GetValueAsFilePtr();
                    return;
                case "filePath":
                    this.filePath = value.GetValueAsPath();
                    return;
                case "pos":
                    this.pos = value.GetValueAsVector3();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}