//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class WindParameter : Fox.GameKit.EnvironmentParameter 
    {
        // Properties
        public float speed { get; set; }
        
        public System.Numerics.Quaternion rotation { get; set; }
        
        public System.Numerics.Vector3 velocity { get; set; }
        
        public float speedTurbulentRate { get; set; }
        
        public float speedTurbulentCycle { get; set; }
        
        public float rotTurbulentRate { get; set; }
        
        public float rotTurbulentCycle { get; set; }
        
        public float influenceOfGlobal { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static WindParameter()
        {
            classInfo = new EntityInfo(new String("WindParameter"), base.GetClassEntityInfo(), 80, null, 6);
			
			classInfo.StaticProperties.Insert(new String("speed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("velocity"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("speedTurbulentRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("speedTurbulentCycle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 84, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotTurbulentRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotTurbulentCycle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 92, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("influenceOfGlobal"), new PropertyInfo(PropertyInfo.PropertyType.Float, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public WindParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "speed":
                    this.speed = value.GetValueAsFloat();
                    return;
                case "rotation":
                    this.rotation = value.GetValueAsQuat();
                    return;
                case "velocity":
                    this.velocity = value.GetValueAsVector3();
                    return;
                case "speedTurbulentRate":
                    this.speedTurbulentRate = value.GetValueAsFloat();
                    return;
                case "speedTurbulentCycle":
                    this.speedTurbulentCycle = value.GetValueAsFloat();
                    return;
                case "rotTurbulentRate":
                    this.rotTurbulentRate = value.GetValueAsFloat();
                    return;
                case "rotTurbulentCycle":
                    this.rotTurbulentCycle = value.GetValueAsFloat();
                    return;
                case "influenceOfGlobal":
                    this.influenceOfGlobal = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}