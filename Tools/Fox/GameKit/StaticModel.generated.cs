//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class StaticModel : Fox.Core.TransformData 
    {
        // Properties
        public FilePtr<File> modelFile { get; set; }
        
        public FilePtr<File> geomFile { get; set; }
        
        public bool isVisibleGeom { get; set; }
        
        public bool isIsolated { get; set; }
        
        public float lodFarSize { get; set; }
        
        public float lodNearSize { get; set; }
        
        public float lodPolygonSize { get; set; }
        
        public Color color { get; set; }
        
        public StaticModel_DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public StaticModel_DrawMode drawMode { get; set; }
        
        public StaticModel_RejectFarRangeShadowCast rejectFarRangeShadowCast { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static StaticModel()
        {
            classInfo = new EntityInfo(new String("StaticModel"), base.GetClassEntityInfo(), 352, "Model", 9);
			
			classInfo.StaticProperties.Insert(new String("modelFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("geomFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isVisibleGeom"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isIsolated"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 353, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodFarSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodNearSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 356, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodPolygonSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(StaticModel_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawMode"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 388, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(StaticModel_DrawMode), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rejectFarRangeShadowCast"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 392, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(StaticModel_RejectFarRangeShadowCast), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public StaticModel(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "modelFile":
                    this.modelFile = value.GetValueAsFilePtr();
                    return;
                case "geomFile":
                    this.geomFile = value.GetValueAsFilePtr();
                    return;
                case "isVisibleGeom":
                    this.isVisibleGeom = value.GetValueAsBool();
                    return;
                case "isIsolated":
                    this.isIsolated = value.GetValueAsBool();
                    return;
                case "lodFarSize":
                    this.lodFarSize = value.GetValueAsFloat();
                    return;
                case "lodNearSize":
                    this.lodNearSize = value.GetValueAsFloat();
                    return;
                case "lodPolygonSize":
                    this.lodPolygonSize = value.GetValueAsFloat();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (StaticModel_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "drawMode":
                    this.drawMode = (StaticModel_DrawMode)value.GetValueAsInt32();
                    return;
                case "rejectFarRangeShadowCast":
                    this.rejectFarRangeShadowCast = (StaticModel_RejectFarRangeShadowCast)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}