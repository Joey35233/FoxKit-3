//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class GkTargetHitInfo : Fox.Core.Entity 
    {
        // Properties
        public EntityPtr<FoxGameKit.GkTargetData> offense { get; set; }
        
        public EntityPtr<FoxGameKit.GkTargetData> defense { get; set; }
        
        public System.Numerics.Vector3 hitPosition { get; set; }
        
        public System.Numerics.Vector3 hitNormal { get; set; }
        
        public System.Numerics.Vector3 hitDirection { get; set; }
        
        public System.Numerics.Vector3 attackDirection { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GkTargetHitInfo()
        {
            classInfo = new EntityInfo(new String("GkTargetHitInfo"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("offense"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 48, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(FoxGameKit.GkTargetData), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("defense"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(FoxGameKit.GkTargetData), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hitPosition"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hitNormal"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hitDirection"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attackDirection"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GkTargetHitInfo(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "offense":
                    this.offense = EntityPtr<FoxGameKit.GkTargetData>.Get(value.GetValueAsEntityPtr().Entity as FoxGameKit.GkTargetData);
                    return;
                case "defense":
                    this.defense = EntityPtr<FoxGameKit.GkTargetData>.Get(value.GetValueAsEntityPtr().Entity as FoxGameKit.GkTargetData);
                    return;
                case "hitPosition":
                    this.hitPosition = value.GetValueAsVector3();
                    return;
                case "hitNormal":
                    this.hitNormal = value.GetValueAsVector3();
                    return;
                case "hitDirection":
                    this.hitDirection = value.GetValueAsVector3();
                    return;
                case "attackDirection":
                    this.attackDirection = value.GetValueAsVector3();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}