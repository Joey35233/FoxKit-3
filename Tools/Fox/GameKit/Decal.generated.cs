//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class Decal : Fox.Core.TransformData 
    {
        // Properties
        public EntityLink material { get; set; }
        
        public Decal_ProjectionMode projectionMode { get; set; }
        
        public float nearClipScale { get; set; }
        
        public Decal_ProjectionTarget projectionTarget { get; set; }
        
        public float repeatU { get; set; }
        
        public float repeatV { get; set; }
        
        public float transparency { get; set; }
        
        public Decal_PolygonDataSource polygonDataSource { get; set; }
        
        public int renderingPriority { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> targets { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public Decal_DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public float drawRejectionDegree { get; set; }
        
        public uint decalFlags { get; set; }
        
        public bool isDisableAlbedo { get; set; }
        
        public bool isPreserveAspect { get; set; }
        
        public bool isWrap { get; set; }
        
        public bool showObject { get; set; }
        
        public bool isVisibleGeom { get; set; }
        
        public bool isSSDecal { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Decal()
        {
            classInfo = new EntityInfo(new String("Decal"), base.GetClassEntityInfo(), 0, "Decal", 12);
			
			classInfo.StaticProperties.Insert(new String("material"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("projectionMode"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 344, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Decal_ProjectionMode), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nearClipScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 348, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("projectionTarget"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Decal_ProjectionTarget), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("repeatU"), new PropertyInfo(PropertyInfo.PropertyType.Float, 356, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("repeatV"), new PropertyInfo(PropertyInfo.PropertyType.Float, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transparency"), new PropertyInfo(PropertyInfo.PropertyType.Float, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("polygonDataSource"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Decal_PolygonDataSource), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("renderingPriority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 372, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("targets"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 384, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 376, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Decal_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionDegree"), new PropertyInfo(PropertyInfo.PropertyType.Float, 380, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("decalFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 400, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isDisableAlbedo"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isPreserveAspect"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isWrap"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("showObject"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isVisibleGeom"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isSSDecal"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Decal(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "material":
                    this.material = value.GetValueAsEntityLink();
                    return;
                case "projectionMode":
                    this.projectionMode = (Decal_ProjectionMode)value.GetValueAsInt32();
                    return;
                case "nearClipScale":
                    this.nearClipScale = value.GetValueAsFloat();
                    return;
                case "projectionTarget":
                    this.projectionTarget = (Decal_ProjectionTarget)value.GetValueAsInt32();
                    return;
                case "repeatU":
                    this.repeatU = value.GetValueAsFloat();
                    return;
                case "repeatV":
                    this.repeatV = value.GetValueAsFloat();
                    return;
                case "transparency":
                    this.transparency = value.GetValueAsFloat();
                    return;
                case "polygonDataSource":
                    this.polygonDataSource = (Decal_PolygonDataSource)value.GetValueAsInt32();
                    return;
                case "renderingPriority":
                    this.renderingPriority = value.GetValueAsInt32();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (Decal_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "drawRejectionDegree":
                    this.drawRejectionDegree = value.GetValueAsFloat();
                    return;
                case "decalFlags":
                    this.decalFlags = value.GetValueAsUInt32();
                    return;
                case "isDisableAlbedo":
                    this.isDisableAlbedo = value.GetValueAsBool();
                    return;
                case "isPreserveAspect":
                    this.isPreserveAspect = value.GetValueAsBool();
                    return;
                case "isWrap":
                    this.isWrap = value.GetValueAsBool();
                    return;
                case "showObject":
                    this.showObject = value.GetValueAsBool();
                    return;
                case "isVisibleGeom":
                    this.isVisibleGeom = value.GetValueAsBool();
                    return;
                case "isSSDecal":
                    this.isSSDecal = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "targets":
                    while(this.targets.Count <= index) { this.targets.Add(default(EntityLink)); }
                    this.targets[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}