//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class ObjectBrushPluginStaticModel : Fox.GameKit.ObjectBrushPlugin 
    {
        // Properties
        public FilePtr<File> modelFile { get; set; }
        
        public FilePtr<File> geomFile { get; set; }
        
        public float minSize { get; set; }
        
        public float maxSize { get; set; }
        
        public float lodFarSize { get; set; }
        
        public float lodNearSize { get; set; }
        
        public DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public bool isGeomActivity { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ObjectBrushPluginStaticModel()
        {
            classInfo = new EntityInfo(new String("ObjectBrushPluginStaticModel"), base.GetClassEntityInfo(), 152, null, 3);
			
			classInfo.StaticProperties.Insert(new String("modelFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("geomFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 196, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodFarSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 204, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodNearSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isGeomActivity"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ObjectBrushPluginStaticModel(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "modelFile":
                    this.modelFile = value.GetValueAsFilePtr();
                    return;
                case "geomFile":
                    this.geomFile = value.GetValueAsFilePtr();
                    return;
                case "minSize":
                    this.minSize = value.GetValueAsFloat();
                    return;
                case "maxSize":
                    this.maxSize = value.GetValueAsFloat();
                    return;
                case "lodFarSize":
                    this.lodFarSize = value.GetValueAsFloat();
                    return;
                case "lodNearSize":
                    this.lodNearSize = value.GetValueAsFloat();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "isGeomActivity":
                    this.isGeomActivity = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}