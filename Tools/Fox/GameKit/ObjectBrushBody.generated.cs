//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class ObjectBrushBody : Fox.Core.TransformDataBody 
    {
        // Properties
        public System.Collections.Generic.IList<EntityHandle> pluginBodyHandle { get; } = new System.Collections.Generic.List<EntityHandle>();
        
        public uint numPlugins { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ObjectBrushBody()
        {
            classInfo = new EntityInfo(new String("ObjectBrushBody"), base.GetClassEntityInfo(), 0, "ObjectBrush", 0);
			
			classInfo.StaticProperties.Insert(new String("pluginBodyHandle"), new PropertyInfo(PropertyInfo.PropertyType.EntityHandle, 144, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("numPlugins"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ObjectBrushBody(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "numPlugins":
                    this.numPlugins = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "pluginBodyHandle":
                    while(this.pluginBodyHandle.Count <= index) { this.pluginBodyHandle.Add(default(EntityHandle)); }
                    this.pluginBodyHandle[index] = value.GetValueAsEntityHandle();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}