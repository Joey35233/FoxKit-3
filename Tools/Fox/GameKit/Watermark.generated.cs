//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class Watermark : Fox.Core.Data 
    {
        // Properties
        public bool isVisible { get; set; }
        
        public Watermark_StandardMode standard { get; set; }
        
        public float offsetX { get; set; }
        
        public float offsetY { get; set; }
        
        public float textureScaleX { get; set; }
        
        public float textureScaleY { get; set; }
        
        public float alphaBlend { get; set; }
        
        public Path texturePath { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Watermark()
        {
            classInfo = new EntityInfo(new String("Watermark"), base.GetClassEntityInfo(), 0, null, 1);
			
			classInfo.StaticProperties.Insert(new String("isVisible"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("standard"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Watermark_StandardMode), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offsetX"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offsetY"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("textureScaleX"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("textureScaleY"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("alphaBlend"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("texturePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Watermark(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "isVisible":
                    this.isVisible = value.GetValueAsBool();
                    return;
                case "standard":
                    this.standard = (Watermark_StandardMode)value.GetValueAsInt32();
                    return;
                case "offsetX":
                    this.offsetX = value.GetValueAsFloat();
                    return;
                case "offsetY":
                    this.offsetY = value.GetValueAsFloat();
                    return;
                case "textureScaleX":
                    this.textureScaleX = value.GetValueAsFloat();
                    return;
                case "textureScaleY":
                    this.textureScaleY = value.GetValueAsFloat();
                    return;
                case "alphaBlend":
                    this.alphaBlend = value.GetValueAsFloat();
                    return;
                case "texturePath":
                    this.texturePath = value.GetValueAsPath();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}