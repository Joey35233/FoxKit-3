//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.GameKit
{
    public partial class Terrain : Fox.Core.TransformData 
    {
        // Properties
        public Path filePath { get; set; }
        
        public Path loadFilePath { get; set; }
        
        public Path dummyFilePath { get; set; }
        
        public float meterPerOneRepeat { get; set; }
        
        public float meterPerPixel { get; set; }
        
        public bool isWireFrame { get; set; }
        
        public bool lodFlag { get; set; }
        
        public bool isSave { get; set; }
        
        public bool isDebugMaterial { get; set; }
        
        public EntityLink[] materials { get; } = new EntityLink[16];
        
        public float lodParam { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> materialConfigs { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public Path baseColorTexture { get; set; }
        
        public float materialLodScale { get; set; }
        
        public float materialLodNearOffset { get; set; }
        
        public float materialLodFarOffset { get; set; }
        
        public float materialLodHeightOffset { get; set; }
        
        public bool isUseWorldTexture { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Terrain()
        {
            classInfo = new EntityInfo(new String("Terrain"), base.GetClassEntityInfo(), 0, null, 14);
			
			classInfo.StaticProperties.Insert(new String("filePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("loadFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dummyFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("meterPerOneRepeat"), new PropertyInfo(PropertyInfo.PropertyType.Float, 972, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("meterPerPixel"), new PropertyInfo(PropertyInfo.PropertyType.Float, 976, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isWireFrame"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 968, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 969, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isSave"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 980, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isDebugMaterial"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 981, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materials"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 328, 16, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodParam"), new PropertyInfo(PropertyInfo.PropertyType.Float, 984, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialConfigs"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 1016, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseColorTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 992, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialLodScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1000, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialLodNearOffset"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1008, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialLodFarOffset"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1004, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialLodHeightOffset"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1012, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isUseWorldTexture"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 1032, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Terrain(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "filePath":
                    this.filePath = value.GetValueAsPath();
                    return;
                case "loadFilePath":
                    this.loadFilePath = value.GetValueAsPath();
                    return;
                case "dummyFilePath":
                    this.dummyFilePath = value.GetValueAsPath();
                    return;
                case "meterPerOneRepeat":
                    this.meterPerOneRepeat = value.GetValueAsFloat();
                    return;
                case "meterPerPixel":
                    this.meterPerPixel = value.GetValueAsFloat();
                    return;
                case "isWireFrame":
                    this.isWireFrame = value.GetValueAsBool();
                    return;
                case "lodFlag":
                    this.lodFlag = value.GetValueAsBool();
                    return;
                case "isSave":
                    this.isSave = value.GetValueAsBool();
                    return;
                case "isDebugMaterial":
                    this.isDebugMaterial = value.GetValueAsBool();
                    return;
                case "lodParam":
                    this.lodParam = value.GetValueAsFloat();
                    return;
                case "baseColorTexture":
                    this.baseColorTexture = value.GetValueAsPath();
                    return;
                case "materialLodScale":
                    this.materialLodScale = value.GetValueAsFloat();
                    return;
                case "materialLodNearOffset":
                    this.materialLodNearOffset = value.GetValueAsFloat();
                    return;
                case "materialLodFarOffset":
                    this.materialLodFarOffset = value.GetValueAsFloat();
                    return;
                case "materialLodHeightOffset":
                    this.materialLodHeightOffset = value.GetValueAsFloat();
                    return;
                case "isUseWorldTexture":
                    this.isUseWorldTexture = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "materials":
                    
                    this.materials[index] = value.GetValueAsEntityLink();
                    return;
                case "materialConfigs":
                    while(this.materialConfigs.Count <= index) { this.materialConfigs.Add(default(EntityLink)); }
                    this.materialConfigs[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}