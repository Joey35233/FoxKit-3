//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Demo
{
    public partial class DemoControlCharacterDesc : Fox.Core.DataElement 
    {
        // Properties
        public String characterId { get; set; }
        
        public String releaseGroupName { get; set; }
        
        public String releaseTag { get; set; }
        
        public bool controlledAtStart { get; set; }
        
        public System.Numerics.Vector3 translation { get; set; }
        
        public System.Numerics.Quaternion rotation { get; set; }
        
        public String startGroupName { get; set; }
        
        public String startTag { get; set; }
        
        public System.Numerics.Vector3 startTranslation { get; set; }
        
        public System.Numerics.Quaternion startRotation { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DemoControlCharacterDesc()
        {
            classInfo = new EntityInfo(new String("DemoControlCharacterDesc"), base.GetClassEntityInfo(), 128, null, 2);
			
			classInfo.StaticProperties.Insert(new String("characterId"), new PropertyInfo(PropertyInfo.PropertyType.String, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("releaseGroupName"), new PropertyInfo(PropertyInfo.PropertyType.String, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("releaseTag"), new PropertyInfo(PropertyInfo.PropertyType.String, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("controlledAtStart"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("translation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startGroupName"), new PropertyInfo(PropertyInfo.PropertyType.String, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startTag"), new PropertyInfo(PropertyInfo.PropertyType.String, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startTranslation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startRotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public DemoControlCharacterDesc(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "characterId":
                    this.characterId = value.GetValueAsString();
                    return;
                case "releaseGroupName":
                    this.releaseGroupName = value.GetValueAsString();
                    return;
                case "releaseTag":
                    this.releaseTag = value.GetValueAsString();
                    return;
                case "controlledAtStart":
                    this.controlledAtStart = value.GetValueAsBool();
                    return;
                case "translation":
                    this.translation = value.GetValueAsVector3();
                    return;
                case "rotation":
                    this.rotation = value.GetValueAsQuat();
                    return;
                case "startGroupName":
                    this.startGroupName = value.GetValueAsString();
                    return;
                case "startTag":
                    this.startTag = value.GetValueAsString();
                    return;
                case "startTranslation":
                    this.startTranslation = value.GetValueAsVector3();
                    return;
                case "startRotation":
                    this.startRotation = value.GetValueAsQuat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}