//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ph
{
    public partial class PhBallsocketConstraint : Fox.Ph.PhConstraint 
    {
        // Properties
        public bool limitedFlag { get; set; }
        
        public System.Numerics.Quaternion refA { get; set; }
        
        public System.Numerics.Quaternion refB { get; set; }
        
        public float limit { get; set; }
        
        public bool springFlag { get; set; }
        
        public bool springRefCustomFlag { get; set; }
        
        public System.Numerics.Quaternion springRef { get; set; }
        
        public float springConstant { get; set; }
        
        public float flexibility { get; set; }
        
        public bool stopTwist { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhBallsocketConstraint()
        {
            classInfo = new EntityInfo(new String("PhBallsocketConstraint"), base.GetClassEntityInfo(), 0, "Ph", 0);
			
			classInfo.StaticProperties.Insert(new String("limitedFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("refA"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("refB"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("limit"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("springFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("springRefCustomFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("springRef"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("springConstant"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flexibility"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stopTwist"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhBallsocketConstraint(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "limitedFlag":
                    this.limitedFlag = value.GetValueAsBool();
                    return;
                case "refA":
                    this.refA = value.GetValueAsQuat();
                    return;
                case "refB":
                    this.refB = value.GetValueAsQuat();
                    return;
                case "limit":
                    this.limit = value.GetValueAsFloat();
                    return;
                case "springFlag":
                    this.springFlag = value.GetValueAsBool();
                    return;
                case "springRefCustomFlag":
                    this.springRefCustomFlag = value.GetValueAsBool();
                    return;
                case "springRef":
                    this.springRef = value.GetValueAsQuat();
                    return;
                case "springConstant":
                    this.springConstant = value.GetValueAsFloat();
                    return;
                case "flexibility":
                    this.flexibility = value.GetValueAsFloat();
                    return;
                case "stopTwist":
                    this.stopTwist = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}