//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ph
{
    public partial class PhMultiShoulderConstraintParam : Fox.Ph.PhConstraintParam 
    {
        // Properties
        public System.Numerics.Vector3 refVec0 { get; set; }
        
        public System.Numerics.Vector3 refVec1 { get; set; }
        
        public float refLimit0 { get; set; }
        
        public float refLimit1 { get; set; }
        
        public float velocityMax { get; set; }
        
        public float torqueMax { get; set; }
        
        public float velocityRate { get; set; }
        
        public bool isPoweredFlag { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhMultiShoulderConstraintParam()
        {
            classInfo = new EntityInfo(new String("PhMultiShoulderConstraintParam"), base.GetClassEntityInfo(), 112, "Ph", 0);
			
			classInfo.StaticProperties.Insert(new String("refVec0"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("refVec1"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("refLimit0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("refLimit1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 100, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("velocityMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("torqueMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 108, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("velocityRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isPoweredFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 116, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhMultiShoulderConstraintParam(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "refVec0":
                    this.refVec0 = value.GetValueAsVector3();
                    return;
                case "refVec1":
                    this.refVec1 = value.GetValueAsVector3();
                    return;
                case "refLimit0":
                    this.refLimit0 = value.GetValueAsFloat();
                    return;
                case "refLimit1":
                    this.refLimit1 = value.GetValueAsFloat();
                    return;
                case "velocityMax":
                    this.velocityMax = value.GetValueAsFloat();
                    return;
                case "torqueMax":
                    this.torqueMax = value.GetValueAsFloat();
                    return;
                case "velocityRate":
                    this.velocityRate = value.GetValueAsFloat();
                    return;
                case "isPoweredFlag":
                    this.isPoweredFlag = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}