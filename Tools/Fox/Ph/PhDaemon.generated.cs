//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ph
{
    public partial class PhDaemon : Fox.Core.Entity 
    {
        // Properties
        public EntityPtr<Ph.PhMaterialManager> materialManager { get; set; }
        
        public float defaultFriction { get; set; }
        
        public float defaultRestitution { get; set; }
        
        public bool isParallel { get; set; }
        
        public bool isUseSmallJob { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhDaemon()
        {
            classInfo = new EntityInfo(new String("PhDaemon"), base.GetClassEntityInfo(), 0, "Ph", 0);
			
			classInfo.StaticProperties.Insert(new String("materialManager"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, typeof(Ph.PhMaterialManager), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("defaultFriction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("defaultRestitution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 204, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isParallel"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isUseSmallJob"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 209, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhDaemon(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "materialManager":
                    this.materialManager = EntityPtr<Ph.PhMaterialManager>.Get(value.GetValueAsEntityPtr().Entity as Ph.PhMaterialManager);
                    return;
                case "defaultFriction":
                    this.defaultFriction = value.GetValueAsFloat();
                    return;
                case "defaultRestitution":
                    this.defaultRestitution = value.GetValueAsFloat();
                    return;
                case "isParallel":
                    this.isParallel = value.GetValueAsBool();
                    return;
                case "isUseSmallJob":
                    this.isUseSmallJob = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}