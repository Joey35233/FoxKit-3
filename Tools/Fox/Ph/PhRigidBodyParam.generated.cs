//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ph
{
    public partial class PhRigidBodyParam : Fox.Core.Entity 
    {
        // Properties
        public System.Numerics.Vector3 defaultPosition { get; set; }
        
        public System.Numerics.Quaternion defaultRotation { get; set; }
        
        public float mass { get; set; }
        
        public float friction { get; set; }
        
        public float restitution { get; set; }
        
        public float maxLinearVelocity { get; set; }
        
        public float maxAngularVelocity { get; set; }
        
        public float linearVelocityDamp { get; set; }
        
        public float angularVelocityDamp { get; set; }
        
        public float permittedDepth { get; set; }
        
        public bool sleepEnable { get; set; }
        
        public float sleepLinearVelocityTh { get; set; }
        
        public float sleepAngularVelocityTh { get; set; }
        
        public float sleepTimeTh { get; set; }
        
        public ushort collisionGroup { get; set; }
        
        public ushort collisionType { get; set; }
        
        public uint collisionId { get; set; }
        
        public System.Numerics.Vector3 centerOfMassOffset { get; set; }
        
        public int motionType { get; set; }
        
        public String material { get; set; }
        
        public bool isNoGravity { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhRigidBodyParam()
        {
            classInfo = new EntityInfo(new String("PhRigidBodyParam"), base.GetClassEntityInfo(), 320, "Ph", 5);
			
			classInfo.StaticProperties.Insert(new String("defaultPosition"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 48, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("defaultRotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mass"), new PropertyInfo(PropertyInfo.PropertyType.Float, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("friction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 108, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("restitution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxLinearVelocity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 116, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxAngularVelocity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("linearVelocityDamp"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("angularVelocityDamp"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("permittedDepth"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sleepEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sleepLinearVelocityTh"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sleepAngularVelocityTh"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sleepTimeTh"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionGroup"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionType"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 150, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionId"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("centerOfMassOffset"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("motionType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("material"), new PropertyInfo(PropertyInfo.PropertyType.String, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isNoGravity"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 161, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhRigidBodyParam(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "defaultPosition":
                    this.defaultPosition = value.GetValueAsVector3();
                    return;
                case "defaultRotation":
                    this.defaultRotation = value.GetValueAsQuat();
                    return;
                case "mass":
                    this.mass = value.GetValueAsFloat();
                    return;
                case "friction":
                    this.friction = value.GetValueAsFloat();
                    return;
                case "restitution":
                    this.restitution = value.GetValueAsFloat();
                    return;
                case "maxLinearVelocity":
                    this.maxLinearVelocity = value.GetValueAsFloat();
                    return;
                case "maxAngularVelocity":
                    this.maxAngularVelocity = value.GetValueAsFloat();
                    return;
                case "linearVelocityDamp":
                    this.linearVelocityDamp = value.GetValueAsFloat();
                    return;
                case "angularVelocityDamp":
                    this.angularVelocityDamp = value.GetValueAsFloat();
                    return;
                case "permittedDepth":
                    this.permittedDepth = value.GetValueAsFloat();
                    return;
                case "sleepEnable":
                    this.sleepEnable = value.GetValueAsBool();
                    return;
                case "sleepLinearVelocityTh":
                    this.sleepLinearVelocityTh = value.GetValueAsFloat();
                    return;
                case "sleepAngularVelocityTh":
                    this.sleepAngularVelocityTh = value.GetValueAsFloat();
                    return;
                case "sleepTimeTh":
                    this.sleepTimeTh = value.GetValueAsFloat();
                    return;
                case "collisionGroup":
                    this.collisionGroup = value.GetValueAsUInt16();
                    return;
                case "collisionType":
                    this.collisionType = value.GetValueAsUInt16();
                    return;
                case "collisionId":
                    this.collisionId = value.GetValueAsUInt32();
                    return;
                case "centerOfMassOffset":
                    this.centerOfMassOffset = value.GetValueAsVector3();
                    return;
                case "motionType":
                    this.motionType = value.GetValueAsInt32();
                    return;
                case "material":
                    this.material = value.GetValueAsString();
                    return;
                case "isNoGravity":
                    this.isNoGravity = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}