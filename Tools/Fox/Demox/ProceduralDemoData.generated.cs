//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Demox
{
    public partial class ProceduralDemoData : Fox.Core.TransformData 
    {
        // Properties
        public StringMap<FilePtr<File>> evfFiles { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<FilePtr<File>> eventFiles { get; } = new StringMap<FilePtr<File>>();
        
        public int priority { get; set; }
        
        public String demoId { get; set; }
        
        public System.Collections.Generic.IList<String> stringParams { get; } = new System.Collections.Generic.List<String>();
        
        public StringMap<EntityLink> entityParams { get; } = new StringMap<EntityLink>();
        
        public StringMap<FilePtr<File>> fileParams { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<int> objectNum { get; } = new StringMap<int>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ProceduralDemoData()
        {
            classInfo = new EntityInfo(new String("ProceduralDemoData"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("evfFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 304, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("eventFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 352, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 400, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoId"), new PropertyInfo(PropertyInfo.PropertyType.String, 408, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stringParams"), new PropertyInfo(PropertyInfo.PropertyType.String, 416, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("entityParams"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 432, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fileParams"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 480, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("objectNum"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 528, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ProceduralDemoData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "priority":
                    this.priority = value.GetValueAsInt32();
                    return;
                case "demoId":
                    this.demoId = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "stringParams":
                    while(this.stringParams.Count <= index) { this.stringParams.Add(default(String)); }
                    this.stringParams[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "evfFiles":
                    this.evfFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "eventFiles":
                    this.eventFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "entityParams":
                    this.entityParams.Add(key, value.GetValueAsEntityLink());
                    return;
                case "fileParams":
                    this.fileParams.Add(key, value.GetValueAsFilePtr());
                    return;
                case "objectNum":
                    this.objectNum.Add(key, value.GetValueAsInt32());
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}