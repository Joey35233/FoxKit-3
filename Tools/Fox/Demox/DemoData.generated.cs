//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Demox
{
    public partial class DemoData : Fox.Core.TransformData 
    {
        // Properties
        public System.Collections.Generic.IList<FilePtr<File>> evfFiles { get; } = new System.Collections.Generic.List<FilePtr<File>>();
        
        public bool onMemory { get; set; }
        
        public int demoLength { get; set; }
        
        public int priority { get; set; }
        
        public Path scriptPath { get; set; }
        
        public StringMap<FilePtr<File>> fmdlFiles { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<FilePtr<File>> helpBoneFiles { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<EntityPtr<Demo.PartsDesc>> partsDesc { get; } = new StringMap<EntityPtr<Demo.PartsDesc>>();
        
        public System.Collections.Generic.IList<EntityPtr<Demo.ClipData>> clipDatas { get; } = new System.Collections.Generic.List<EntityPtr<Demo.ClipData>>();
        
        public System.Collections.Generic.IList<Path> loadFiles { get; } = new System.Collections.Generic.List<Path>();
        
        public String demoId { get; set; }
        
        public EntityLink playingRoot { get; set; }
        
        public EntityLink streamAnimation { get; set; }
        
        public Path demoStreamPath { get; set; }
        
        public Path motionPath { get; set; }
        
        public FilePtr<File> motionFile { get; set; }
        
        public Path audioPath { get; set; }
        
        public FilePtr<File> subtitleFile { get; set; }
        
        public FilePtr<File> subtitleBinaryFile { get; set; }
        
        public FilePtr<File> nodeDataFile { get; set; }
        
        public System.Collections.Generic.IList<String> stringParams { get; } = new System.Collections.Generic.List<String>();
        
        public StringMap<EntityLink> entityParams { get; } = new StringMap<EntityLink>();
        
        public StringMap<FilePtr<File>> fileParams { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<EntityPtr<Demo.DemoControlCharacterDesc>> controlCharacters { get; } = new StringMap<EntityPtr<Demo.DemoControlCharacterDesc>>();
        
        public StringMap<EntityLink> controlDatas { get; } = new StringMap<EntityLink>();
        
        public StringMap<String> controlCollectibles { get; } = new StringMap<String>();
        
        public StringMap<EntityPtr<Demo.DemoParameter>> parameters { get; } = new StringMap<EntityPtr<Demo.DemoParameter>>();
        
        public StringMap<String> setupLights { get; } = new StringMap<String>();
        
        public Utility_InterpType cameraInterpType { get; set; }
        
        public int cameraInterpFrame { get; set; }
        
        public float cameraInterpCurveRate { get; set; }
        
        public float cameraInterpScurveCenter { get; set; }
        
        public System.Numerics.Vector3 cameraTranslation { get; set; }
        
        public System.Numerics.Quaternion cameraRotation { get; set; }
        
        public float cameraParam { get; set; }
        
        public float cameraDistanceToLookAt { get; set; }
        
        public System.Numerics.Vector3 cameraStartTranslation { get; set; }
        
        public System.Numerics.Quaternion cameraStartRotation { get; set; }
        
        public float cameraStartParam { get; set; }
        
        public float cameraStartDistanceToLookAt { get; set; }
        
        public int eventCacheNum { get; set; }
        
        public int eventInterpCacheNum { get; set; }
        
        public int eventSkipCacheNum { get; set; }
        
        public System.Collections.Generic.IList<String> highestTextureStreamModel { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<Path> highestTexture { get; } = new System.Collections.Generic.List<Path>();
        
        public StringMap<int> objectNum { get; } = new StringMap<int>();
        
        public EntityLink blockPositionSetter { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DemoData()
        {
            classInfo = new EntityInfo(new String("DemoData"), base.GetClassEntityInfo(), 1264, null, 36);
			
			classInfo.StaticProperties.Insert(new String("evfFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 304, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("onMemory"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoLength"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scriptPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fmdlFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 344, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("helpBoneFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 392, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("partsDesc"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 440, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Demo.PartsDesc), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("clipDatas"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 488, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Demo.ClipData), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("loadFiles"), new PropertyInfo(PropertyInfo.PropertyType.Path, 504, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoId"), new PropertyInfo(PropertyInfo.PropertyType.String, 608, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("playingRoot"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 616, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("streamAnimation"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 656, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoStreamPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 696, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("motionPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 704, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("motionFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 712, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("audioPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 736, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("subtitleFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 744, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("subtitleBinaryFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 768, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nodeDataFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 792, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stringParams"), new PropertyInfo(PropertyInfo.PropertyType.String, 816, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("entityParams"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 832, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fileParams"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 880, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("controlCharacters"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 928, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Demo.DemoControlCharacterDesc), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("controlDatas"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 976, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("controlCollectibles"), new PropertyInfo(PropertyInfo.PropertyType.String, 1024, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("parameters"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 1072, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Demo.DemoParameter), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("setupLights"), new PropertyInfo(PropertyInfo.PropertyType.String, 560, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraInterpType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(Utility_InterpType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraInterpFrame"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraInterpCurveRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraInterpScurveCenter"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraTranslation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 1168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraRotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 1184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraParam"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraDistanceToLookAt"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1204, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraStartTranslation"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 1216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraStartRotation"), new PropertyInfo(PropertyInfo.PropertyType.Quat, 1232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraStartParam"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraStartDistanceToLookAt"), new PropertyInfo(PropertyInfo.PropertyType.Float, 1252, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("eventCacheNum"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("eventInterpCacheNum"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1260, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("eventSkipCacheNum"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("highestTextureStreamModel"), new PropertyInfo(PropertyInfo.PropertyType.String, 1120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("highestTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 1136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("objectNum"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 1272, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockPositionSetter"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 520, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public DemoData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "onMemory":
                    this.onMemory = value.GetValueAsBool();
                    return;
                case "demoLength":
                    this.demoLength = value.GetValueAsInt32();
                    return;
                case "priority":
                    this.priority = value.GetValueAsInt32();
                    return;
                case "scriptPath":
                    this.scriptPath = value.GetValueAsPath();
                    return;
                case "demoId":
                    this.demoId = value.GetValueAsString();
                    return;
                case "playingRoot":
                    this.playingRoot = value.GetValueAsEntityLink();
                    return;
                case "streamAnimation":
                    this.streamAnimation = value.GetValueAsEntityLink();
                    return;
                case "demoStreamPath":
                    this.demoStreamPath = value.GetValueAsPath();
                    return;
                case "motionPath":
                    this.motionPath = value.GetValueAsPath();
                    return;
                case "motionFile":
                    this.motionFile = value.GetValueAsFilePtr();
                    return;
                case "audioPath":
                    this.audioPath = value.GetValueAsPath();
                    return;
                case "subtitleFile":
                    this.subtitleFile = value.GetValueAsFilePtr();
                    return;
                case "subtitleBinaryFile":
                    this.subtitleBinaryFile = value.GetValueAsFilePtr();
                    return;
                case "nodeDataFile":
                    this.nodeDataFile = value.GetValueAsFilePtr();
                    return;
                case "cameraInterpType":
                    this.cameraInterpType = (Utility_InterpType)value.GetValueAsInt32();
                    return;
                case "cameraInterpFrame":
                    this.cameraInterpFrame = value.GetValueAsInt32();
                    return;
                case "cameraInterpCurveRate":
                    this.cameraInterpCurveRate = value.GetValueAsFloat();
                    return;
                case "cameraInterpScurveCenter":
                    this.cameraInterpScurveCenter = value.GetValueAsFloat();
                    return;
                case "cameraTranslation":
                    this.cameraTranslation = value.GetValueAsVector3();
                    return;
                case "cameraRotation":
                    this.cameraRotation = value.GetValueAsQuat();
                    return;
                case "cameraParam":
                    this.cameraParam = value.GetValueAsFloat();
                    return;
                case "cameraDistanceToLookAt":
                    this.cameraDistanceToLookAt = value.GetValueAsFloat();
                    return;
                case "cameraStartTranslation":
                    this.cameraStartTranslation = value.GetValueAsVector3();
                    return;
                case "cameraStartRotation":
                    this.cameraStartRotation = value.GetValueAsQuat();
                    return;
                case "cameraStartParam":
                    this.cameraStartParam = value.GetValueAsFloat();
                    return;
                case "cameraStartDistanceToLookAt":
                    this.cameraStartDistanceToLookAt = value.GetValueAsFloat();
                    return;
                case "eventCacheNum":
                    this.eventCacheNum = value.GetValueAsInt32();
                    return;
                case "eventInterpCacheNum":
                    this.eventInterpCacheNum = value.GetValueAsInt32();
                    return;
                case "eventSkipCacheNum":
                    this.eventSkipCacheNum = value.GetValueAsInt32();
                    return;
                case "blockPositionSetter":
                    this.blockPositionSetter = value.GetValueAsEntityLink();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "evfFiles":
                    while(this.evfFiles.Count <= index) { this.evfFiles.Add(default(FilePtr<File>)); }
                    this.evfFiles[index] = value.GetValueAsFilePtr();
                    return;
                case "clipDatas":
                    while(this.clipDatas.Count <= index) { this.clipDatas.Add(default(EntityPtr<Demo.ClipData>)); }
                    this.clipDatas[index] = EntityPtr<Demo.ClipData>.Get(value.GetValueAsEntityPtr().Entity as Demo.ClipData);
                    return;
                case "loadFiles":
                    while(this.loadFiles.Count <= index) { this.loadFiles.Add(default(Path)); }
                    this.loadFiles[index] = value.GetValueAsPath();
                    return;
                case "stringParams":
                    while(this.stringParams.Count <= index) { this.stringParams.Add(default(String)); }
                    this.stringParams[index] = value.GetValueAsString();
                    return;
                case "highestTextureStreamModel":
                    while(this.highestTextureStreamModel.Count <= index) { this.highestTextureStreamModel.Add(default(String)); }
                    this.highestTextureStreamModel[index] = value.GetValueAsString();
                    return;
                case "highestTexture":
                    while(this.highestTexture.Count <= index) { this.highestTexture.Add(default(Path)); }
                    this.highestTexture[index] = value.GetValueAsPath();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "fmdlFiles":
                    this.fmdlFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "helpBoneFiles":
                    this.helpBoneFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "partsDesc":
                    this.partsDesc.Add(key, EntityPtr<Demo.PartsDesc>.Get(value.GetValueAsEntityPtr().Entity as Demo.PartsDesc));
                    return;
                case "entityParams":
                    this.entityParams.Add(key, value.GetValueAsEntityLink());
                    return;
                case "fileParams":
                    this.fileParams.Add(key, value.GetValueAsFilePtr());
                    return;
                case "controlCharacters":
                    this.controlCharacters.Add(key, EntityPtr<Demo.DemoControlCharacterDesc>.Get(value.GetValueAsEntityPtr().Entity as Demo.DemoControlCharacterDesc));
                    return;
                case "controlDatas":
                    this.controlDatas.Add(key, value.GetValueAsEntityLink());
                    return;
                case "controlCollectibles":
                    this.controlCollectibles.Add(key, value.GetValueAsString());
                    return;
                case "parameters":
                    this.parameters.Add(key, EntityPtr<Demo.DemoParameter>.Get(value.GetValueAsEntityPtr().Entity as Demo.DemoParameter));
                    return;
                case "setupLights":
                    this.setupLights.Add(key, value.GetValueAsString());
                    return;
                case "objectNum":
                    this.objectNum.Add(key, value.GetValueAsInt32());
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}