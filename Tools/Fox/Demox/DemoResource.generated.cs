//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Demox
{
    public partial class DemoResource : Fox.Core.Data 
    {
        // Properties
        public bool enable { get; set; }
        
        public String demoIdentifierName { get; set; }
        
        public System.Collections.Generic.IList<String> demoIdentifierKey { get; } = new System.Collections.Generic.List<String>();
        
        public uint streamBufferSizeInKbytes { get; set; }
        
        public uint systemPacketSizeInKbytes { get; set; }
        
        public uint systemPacketNum { get; set; }
        
        public uint soundPacketSizeInKbytes { get; set; }
        
        public uint soundPacketNum { get; set; }
        
        public uint demoPacketSizeInKbytes { get; set; }
        
        public uint demoPacketNum { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DemoResource()
        {
            classInfo = new EntityInfo(new String("DemoResource"), base.GetClassEntityInfo(), 120, null, 1);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoIdentifierName"), new PropertyInfo(PropertyInfo.PropertyType.String, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoIdentifierKey"), new PropertyInfo(PropertyInfo.PropertyType.String, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("streamBufferSizeInKbytes"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("systemPacketSizeInKbytes"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("systemPacketNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("soundPacketSizeInKbytes"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("soundPacketNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoPacketSizeInKbytes"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoPacketNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public DemoResource(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "demoIdentifierName":
                    this.demoIdentifierName = value.GetValueAsString();
                    return;
                case "streamBufferSizeInKbytes":
                    this.streamBufferSizeInKbytes = value.GetValueAsUInt32();
                    return;
                case "systemPacketSizeInKbytes":
                    this.systemPacketSizeInKbytes = value.GetValueAsUInt32();
                    return;
                case "systemPacketNum":
                    this.systemPacketNum = value.GetValueAsUInt32();
                    return;
                case "soundPacketSizeInKbytes":
                    this.soundPacketSizeInKbytes = value.GetValueAsUInt32();
                    return;
                case "soundPacketNum":
                    this.soundPacketNum = value.GetValueAsUInt32();
                    return;
                case "demoPacketSizeInKbytes":
                    this.demoPacketSizeInKbytes = value.GetValueAsUInt32();
                    return;
                case "demoPacketNum":
                    this.demoPacketNum = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "demoIdentifierKey":
                    while(this.demoIdentifierKey.Count <= index) { this.demoIdentifierKey.Add(default(String)); }
                    this.demoIdentifierKey[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}