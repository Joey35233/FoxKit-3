//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Grx
{
    public partial class DirectionalLight : Fox.Core.TransformData 
    {
        // Properties
        public Color color { get; set; }
        
        public System.Numerics.Vector3 direction { get; set; }
        
        public float shadowRange { get; set; }
        
        public float shadowRangeExtra { get; set; }
        
        public float hiResShadowRange { get; set; }
        
        public float shadowProjectionRange { get; set; }
        
        public float shadowFadeRange { get; set; }
        
        public float selfShadowBias { get; set; }
        
        public float temperature { get; set; }
        
        public float colorDeflection { get; set; }
        
        public float lux { get; set; }
        
        public float lightSize { get; set; }
        
        public float shadowMaskSpecular { get; set; }
        
        public float shadowOffsetStartAngle { get; set; }
        
        public float shadowOffsetEndAngle { get; set; }
        
        public float diatanceFade_StartDistance { get; set; }
        
        public float distanceFade_FadeoutRange { get; set; }
        
        public uint lightFlags { get; set; }
        
        public bool enable { get; set; }
        
        public bool isCascadeBlend { get; set; }
        
        public bool castShadow { get; set; }
        
        public bool isBounced { get; set; }
        
        public bool showObject { get; set; }
        
        public bool enableDistanceFade { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DirectionalLight()
        {
            classInfo = new EntityInfo(new String("DirectionalLight"), base.GetClassEntityInfo(), 352, "Light", 8);
			
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("direction"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowRangeExtra"), new PropertyInfo(PropertyInfo.PropertyType.Float, 340, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hiResShadowRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 344, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowProjectionRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 348, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowFadeRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("selfShadowBias"), new PropertyInfo(PropertyInfo.PropertyType.Float, 356, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("temperature"), new PropertyInfo(PropertyInfo.PropertyType.Float, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("colorDeflection"), new PropertyInfo(PropertyInfo.PropertyType.Float, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lux"), new PropertyInfo(PropertyInfo.PropertyType.Float, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 372, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowMaskSpecular"), new PropertyInfo(PropertyInfo.PropertyType.Float, 376, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowOffsetStartAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 380, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowOffsetEndAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("diatanceFade_StartDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 388, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distanceFade_FadeoutRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 392, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 396, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isCascadeBlend"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("castShadow"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isBounced"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("showObject"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableDistanceFade"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public DirectionalLight(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "direction":
                    this.direction = value.GetValueAsVector3();
                    return;
                case "shadowRange":
                    this.shadowRange = value.GetValueAsFloat();
                    return;
                case "shadowRangeExtra":
                    this.shadowRangeExtra = value.GetValueAsFloat();
                    return;
                case "hiResShadowRange":
                    this.hiResShadowRange = value.GetValueAsFloat();
                    return;
                case "shadowProjectionRange":
                    this.shadowProjectionRange = value.GetValueAsFloat();
                    return;
                case "shadowFadeRange":
                    this.shadowFadeRange = value.GetValueAsFloat();
                    return;
                case "selfShadowBias":
                    this.selfShadowBias = value.GetValueAsFloat();
                    return;
                case "temperature":
                    this.temperature = value.GetValueAsFloat();
                    return;
                case "colorDeflection":
                    this.colorDeflection = value.GetValueAsFloat();
                    return;
                case "lux":
                    this.lux = value.GetValueAsFloat();
                    return;
                case "lightSize":
                    this.lightSize = value.GetValueAsFloat();
                    return;
                case "shadowMaskSpecular":
                    this.shadowMaskSpecular = value.GetValueAsFloat();
                    return;
                case "shadowOffsetStartAngle":
                    this.shadowOffsetStartAngle = value.GetValueAsFloat();
                    return;
                case "shadowOffsetEndAngle":
                    this.shadowOffsetEndAngle = value.GetValueAsFloat();
                    return;
                case "diatanceFade_StartDistance":
                    this.diatanceFade_StartDistance = value.GetValueAsFloat();
                    return;
                case "distanceFade_FadeoutRange":
                    this.distanceFade_FadeoutRange = value.GetValueAsFloat();
                    return;
                case "lightFlags":
                    this.lightFlags = value.GetValueAsUInt32();
                    return;
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "isCascadeBlend":
                    this.isCascadeBlend = value.GetValueAsBool();
                    return;
                case "castShadow":
                    this.castShadow = value.GetValueAsBool();
                    return;
                case "isBounced":
                    this.isBounced = value.GetValueAsBool();
                    return;
                case "showObject":
                    this.showObject = value.GetValueAsBool();
                    return;
                case "enableDistanceFade":
                    this.enableDistanceFade = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}