//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Grx
{
    public partial class AmbientOcclusionSettings : Fox.Core.Data 
    {
        // Properties
        public AmbientOcclusionSettings_Method method { get; set; }
        
        public AmbientOcclusionSettings_LightAttachment attachment { get; set; }
        
        public EntityPtr<Grx.GrxLineSSAOParameters> lineSSAOParameters { get; set; }
        
        public EntityPtr<Grx.GrxAreaSSAOParameters> areaSSAOParameters { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static AmbientOcclusionSettings()
        {
            classInfo = new EntityInfo(new String("AmbientOcclusionSettings"), base.GetClassEntityInfo(), 88, "Config", 0);
			
			classInfo.StaticProperties.Insert(new String("method"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(AmbientOcclusionSettings_Method), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attachment"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(AmbientOcclusionSettings_LightAttachment), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lineSSAOParameters"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.Never, typeof(Grx.GrxLineSSAOParameters), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("areaSSAOParameters"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.Never, typeof(Grx.GrxAreaSSAOParameters), null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public AmbientOcclusionSettings(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "method":
                    this.method = (AmbientOcclusionSettings_Method)value.GetValueAsInt32();
                    return;
                case "attachment":
                    this.attachment = (AmbientOcclusionSettings_LightAttachment)value.GetValueAsInt32();
                    return;
                case "lineSSAOParameters":
                    this.lineSSAOParameters = EntityPtr<Grx.GrxLineSSAOParameters>.Get(value.GetValueAsEntityPtr().Entity as Grx.GrxLineSSAOParameters);
                    return;
                case "areaSSAOParameters":
                    this.areaSSAOParameters = EntityPtr<Grx.GrxAreaSSAOParameters>.Get(value.GetValueAsEntityPtr().Entity as Grx.GrxAreaSSAOParameters);
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}