//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.EdDemo
{
    public partial class ChildrenIdConvertParameter : Fox.Demo.DemoParameter 
    {
        // Properties
        public String injuryId { get; set; }
        
        public String yellowHoodId { get; set; }
        
        public String afloId { get; set; }
        
        public String shortAfloId { get; set; }
        
        public String blackCoatId { get; set; }
        
        public byte injuryPriority { get; set; }
        
        public byte yellowHoodPriority { get; set; }
        
        public byte afloPriority { get; set; }
        
        public byte shortAfloPriority { get; set; }
        
        public byte blackCoatPriority { get; set; }
        
        public bool enableInjuredChildSpecialization { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ChildrenIdConvertParameter()
        {
            classInfo = new EntityInfo(new String("ChildrenIdConvertParameter"), base.GetClassEntityInfo(), 60, null, 0);
			
			classInfo.StaticProperties.Insert(new String("injuryId"), new PropertyInfo(PropertyInfo.PropertyType.String, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("yellowHoodId"), new PropertyInfo(PropertyInfo.PropertyType.String, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("afloId"), new PropertyInfo(PropertyInfo.PropertyType.String, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shortAfloId"), new PropertyInfo(PropertyInfo.PropertyType.String, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blackCoatId"), new PropertyInfo(PropertyInfo.PropertyType.String, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("injuryPriority"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("yellowHoodPriority"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 105, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("afloPriority"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 106, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shortAfloPriority"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 107, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blackCoatPriority"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 108, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableInjuredChildSpecialization"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 109, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ChildrenIdConvertParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "injuryId":
                    this.injuryId = value.GetValueAsString();
                    return;
                case "yellowHoodId":
                    this.yellowHoodId = value.GetValueAsString();
                    return;
                case "afloId":
                    this.afloId = value.GetValueAsString();
                    return;
                case "shortAfloId":
                    this.shortAfloId = value.GetValueAsString();
                    return;
                case "blackCoatId":
                    this.blackCoatId = value.GetValueAsString();
                    return;
                case "injuryPriority":
                    this.injuryPriority = value.GetValueAsUInt8();
                    return;
                case "yellowHoodPriority":
                    this.yellowHoodPriority = value.GetValueAsUInt8();
                    return;
                case "afloPriority":
                    this.afloPriority = value.GetValueAsUInt8();
                    return;
                case "shortAfloPriority":
                    this.shortAfloPriority = value.GetValueAsUInt8();
                    return;
                case "blackCoatPriority":
                    this.blackCoatPriority = value.GetValueAsUInt8();
                    return;
                case "enableInjuredChildSpecialization":
                    this.enableInjuredChildSpecialization = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}