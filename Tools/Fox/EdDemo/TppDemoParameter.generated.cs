//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.EdDemo
{
    public partial class TppDemoParameter : Fox.Demo.DemoParameter 
    {
        // Properties
        public bool pauseEnable { get; set; }
        
        public bool fadeSerchLightEnable { get; set; }
        
        public bool fadeDirectionalLightEnable { get; set; }
        
        public bool fadeSandStormEnable { get; set; }
        
        public float sandStormDensityMin { get; set; }
        
        public float fadeTime { get; set; }
        
        public bool useSetTime { get; set; }
        
        public uint hour { get; set; }
        
        public uint minute { get; set; }
        
        public uint second { get; set; }
        
        public TppDemoParameter_WeatherType weatherType { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppDemoParameter()
        {
            classInfo = new EntityInfo(new String("TppDemoParameter"), base.GetClassEntityInfo(), 68, null, 3);
			
			classInfo.StaticProperties.Insert(new String("pauseEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fadeSerchLightEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 65, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fadeDirectionalLightEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 66, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fadeSandStormEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 67, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sandStormDensityMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 68, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fadeTime"), new PropertyInfo(PropertyInfo.PropertyType.Float, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useSetTime"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 76, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hour"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minute"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 84, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("second"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("weatherType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 92, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppDemoParameter_WeatherType), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppDemoParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "pauseEnable":
                    this.pauseEnable = value.GetValueAsBool();
                    return;
                case "fadeSerchLightEnable":
                    this.fadeSerchLightEnable = value.GetValueAsBool();
                    return;
                case "fadeDirectionalLightEnable":
                    this.fadeDirectionalLightEnable = value.GetValueAsBool();
                    return;
                case "fadeSandStormEnable":
                    this.fadeSandStormEnable = value.GetValueAsBool();
                    return;
                case "sandStormDensityMin":
                    this.sandStormDensityMin = value.GetValueAsFloat();
                    return;
                case "fadeTime":
                    this.fadeTime = value.GetValueAsFloat();
                    return;
                case "useSetTime":
                    this.useSetTime = value.GetValueAsBool();
                    return;
                case "hour":
                    this.hour = value.GetValueAsUInt32();
                    return;
                case "minute":
                    this.minute = value.GetValueAsUInt32();
                    return;
                case "second":
                    this.second = value.GetValueAsUInt32();
                    return;
                case "weatherType":
                    this.weatherType = (TppDemoParameter_WeatherType)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}