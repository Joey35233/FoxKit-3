//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Tactical
{
    public partial class GkTacticalAction : Fox.Core.TransformData 
    {
        // Properties
        public bool enable { get; set; }
        
        public bool enableInGame { get; set; }
        
        public String worldName { get; set; }
        
        public EntityLink userData { get; set; }
        
        public String userId { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<Tactical.GkTacticalActionWaypoint>> waypoints { get; } = new System.Collections.Generic.List<EntityPtr<Tactical.GkTacticalActionWaypoint>>();
        
        public System.Collections.Generic.IList<EntityPtr<Tactical.GkTacticalActionEdge>> edges { get; } = new System.Collections.Generic.List<EntityPtr<Tactical.GkTacticalActionEdge>>();
        
        public System.Collections.Generic.IList<String> attributeNames { get; } = new System.Collections.Generic.List<String>();
        
        public uint attribute { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GkTacticalAction()
        {
            classInfo = new EntityInfo(new String("GkTacticalAction"), base.GetClassEntityInfo(), 368, "TacticalAction", 7);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableInGame"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 305, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("worldName"), new PropertyInfo(PropertyInfo.PropertyType.String, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("userData"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("userId"), new PropertyInfo(PropertyInfo.PropertyType.String, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waypoints"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 368, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Tactical.GkTacticalActionWaypoint), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("edges"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 384, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, typeof(Tactical.GkTacticalActionEdge), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attributeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 400, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("attribute"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 416, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public GkTacticalAction(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "enableInGame":
                    this.enableInGame = value.GetValueAsBool();
                    return;
                case "worldName":
                    this.worldName = value.GetValueAsString();
                    return;
                case "userData":
                    this.userData = value.GetValueAsEntityLink();
                    return;
                case "userId":
                    this.userId = value.GetValueAsString();
                    return;
                case "attribute":
                    this.attribute = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "waypoints":
                    while(this.waypoints.Count <= index) { this.waypoints.Add(default(EntityPtr<Tactical.GkTacticalActionWaypoint>)); }
                    this.waypoints[index] = EntityPtr<Tactical.GkTacticalActionWaypoint>.Get(value.GetValueAsEntityPtr().Entity as Tactical.GkTacticalActionWaypoint);
                    return;
                case "edges":
                    while(this.edges.Count <= index) { this.edges.Add(default(EntityPtr<Tactical.GkTacticalActionEdge>)); }
                    this.edges[index] = EntityPtr<Tactical.GkTacticalActionEdge>.Get(value.GetValueAsEntityPtr().Entity as Tactical.GkTacticalActionEdge);
                    return;
                case "attributeNames":
                    while(this.attributeNames.Count <= index) { this.attributeNames.Add(default(String)); }
                    this.attributeNames[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}