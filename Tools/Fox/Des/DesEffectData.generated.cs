//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Des
{
    public partial class DesEffectData : Fox.Core.Data 
    {
        // Properties
        public Path effectFilePath { get; set; }
        
        public String effectName { get; set; }
        
        public String setModelName { get; set; }
        
        public Path connectPointFilePath { get; set; }
        
        public String connectPointName { get; set; }
        
        public DesEffectDataDesEffectFlag effectFlag { get; set; }
        
        public uint randomSeed { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static DesEffectData()
        {
            classInfo = new EntityInfo(new String("DesEffectData"), base.GetClassEntityInfo(), 0, "Des", 1);
			
			classInfo.StaticProperties.Insert(new String("effectFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("effectName"), new PropertyInfo(PropertyInfo.PropertyType.String, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("setModelName"), new PropertyInfo(PropertyInfo.PropertyType.String, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connectPointFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connectPointName"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("effectFlag"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, typeof(DesEffectDataDesEffectFlag), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("randomSeed"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public DesEffectData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "effectFilePath":
                    this.effectFilePath = value.GetValueAsPath();
                    return;
                case "effectName":
                    this.effectName = value.GetValueAsString();
                    return;
                case "setModelName":
                    this.setModelName = value.GetValueAsString();
                    return;
                case "connectPointFilePath":
                    this.connectPointFilePath = value.GetValueAsPath();
                    return;
                case "connectPointName":
                    this.connectPointName = value.GetValueAsString();
                    return;
                case "effectFlag":
                    this.effectFlag = (DesEffectDataDesEffectFlag)value.GetValueAsUInt32();
                    return;
                case "randomSeed":
                    this.randomSeed = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}