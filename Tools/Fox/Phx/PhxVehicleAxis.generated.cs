//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Phx
{
    public partial class PhxVehicleAxis : Fox.Core.Data 
    {
        // Properties
        public EntityPtr<Phx.PhVehicleAxisParam> vehicleAxisParam { get; set; }
        
        public EntityPtr<Phx.PhxWheelConstraintParam> wheelConstraintParam { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<Phx.PhxWheelAssociationUnitParam>> wheelAssociationUnitParams { get; } = new System.Collections.Generic.List<EntityPtr<Phx.PhxWheelAssociationUnitParam>>();
        
        public System.Collections.Generic.IList<float> torqueDistributions { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<float> gearRatios { get; } = new System.Collections.Generic.List<float>();
        
        public System.Numerics.Vector3 wheelFront { get; set; }
        
        public System.Numerics.Vector3 wheelUp { get; set; }
        
        public System.Numerics.Vector3 wheelPositionOffset { get; set; }
        
        public float wheelRadius { get; set; }
        
        public float wheelFriction { get; set; }
        
        public float wheelRestitution { get; set; }
        
        public float wheelInertia { get; set; }
        
        public float suspentionLength { get; set; }
        
        public float maxSuspentionForceCoeff { get; set; }
        
        public float dampingCoeffElong { get; set; }
        
        public float dampingCoeffCompress { get; set; }
        
        public float maxBreakTorqueCoeff { get; set; }
        
        public bool useDifferential { get; set; }
        
        public System.Collections.Generic.IList<String> AssignedBoneNames { get; } = new System.Collections.Generic.List<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhxVehicleAxis()
        {
            classInfo = new EntityInfo(new String("PhxVehicleAxis"), base.GetClassEntityInfo(), 128, "Phx", 1);
			
			classInfo.StaticProperties.Insert(new String("vehicleAxisParam"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(Phx.PhVehicleAxisParam), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelConstraintParam"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(Phx.PhxWheelConstraintParam), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelAssociationUnitParams"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(Phx.PhxWheelAssociationUnitParam), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("torqueDistributions"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gearRatios"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelFront"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelUp"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelPositionOffset"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelFriction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelRestitution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wheelInertia"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("suspentionLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxSuspentionForceCoeff"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dampingCoeffElong"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dampingCoeffCompress"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxBreakTorqueCoeff"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useDifferential"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("AssignedBoneNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 0, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhxVehicleAxis(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "vehicleAxisParam":
                    this.vehicleAxisParam = EntityPtr<Phx.PhVehicleAxisParam>.Get(value.GetValueAsEntityPtr().Entity as Phx.PhVehicleAxisParam);
                    return;
                case "wheelConstraintParam":
                    this.wheelConstraintParam = EntityPtr<Phx.PhxWheelConstraintParam>.Get(value.GetValueAsEntityPtr().Entity as Phx.PhxWheelConstraintParam);
                    return;
                case "wheelFront":
                    this.wheelFront = value.GetValueAsVector3();
                    return;
                case "wheelUp":
                    this.wheelUp = value.GetValueAsVector3();
                    return;
                case "wheelPositionOffset":
                    this.wheelPositionOffset = value.GetValueAsVector3();
                    return;
                case "wheelRadius":
                    this.wheelRadius = value.GetValueAsFloat();
                    return;
                case "wheelFriction":
                    this.wheelFriction = value.GetValueAsFloat();
                    return;
                case "wheelRestitution":
                    this.wheelRestitution = value.GetValueAsFloat();
                    return;
                case "wheelInertia":
                    this.wheelInertia = value.GetValueAsFloat();
                    return;
                case "suspentionLength":
                    this.suspentionLength = value.GetValueAsFloat();
                    return;
                case "maxSuspentionForceCoeff":
                    this.maxSuspentionForceCoeff = value.GetValueAsFloat();
                    return;
                case "dampingCoeffElong":
                    this.dampingCoeffElong = value.GetValueAsFloat();
                    return;
                case "dampingCoeffCompress":
                    this.dampingCoeffCompress = value.GetValueAsFloat();
                    return;
                case "maxBreakTorqueCoeff":
                    this.maxBreakTorqueCoeff = value.GetValueAsFloat();
                    return;
                case "useDifferential":
                    this.useDifferential = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "wheelAssociationUnitParams":
                    while(this.wheelAssociationUnitParams.Count <= index) { this.wheelAssociationUnitParams.Add(default(EntityPtr<Phx.PhxWheelAssociationUnitParam>)); }
                    this.wheelAssociationUnitParams[index] = EntityPtr<Phx.PhxWheelAssociationUnitParam>.Get(value.GetValueAsEntityPtr().Entity as Phx.PhxWheelAssociationUnitParam);
                    return;
                case "torqueDistributions":
                    while(this.torqueDistributions.Count <= index) { this.torqueDistributions.Add(default(float)); }
                    this.torqueDistributions[index] = value.GetValueAsFloat();
                    return;
                case "gearRatios":
                    while(this.gearRatios.Count <= index) { this.gearRatios.Add(default(float)); }
                    this.gearRatios[index] = value.GetValueAsFloat();
                    return;
                case "AssignedBoneNames":
                    while(this.AssignedBoneNames.Count <= index) { this.AssignedBoneNames.Add(default(String)); }
                    this.AssignedBoneNames[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}