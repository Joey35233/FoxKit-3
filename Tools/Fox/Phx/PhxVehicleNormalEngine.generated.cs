//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Phx
{
    public partial class PhxVehicleNormalEngine : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<EntityLink> vehicleAxes { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public System.Collections.Generic.IList<float> torqueDistributions { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<float> gearRatios { get; } = new System.Collections.Generic.List<float>();
        
        public EntityPtr<Phx.PhVehicleNormalEngineParam> vehicleNormalEngineParam { get; set; }
        
        public System.Collections.Generic.IList<float> specPointAngularVelocity { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<float> specPointTorque { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<float> specPointBreakTorque { get; } = new System.Collections.Generic.List<float>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhxVehicleNormalEngine()
        {
            classInfo = new EntityInfo(new String("PhxVehicleNormalEngine"), base.GetClassEntityInfo(), 120, "Phx", 1);
			
			classInfo.StaticProperties.Insert(new String("vehicleAxes"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 128, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("torqueDistributions"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gearRatios"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vehicleNormalEngineParam"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(Phx.PhVehicleNormalEngineParam), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("specPointAngularVelocity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("specPointTorque"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("specPointBreakTorque"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public PhxVehicleNormalEngine(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "vehicleNormalEngineParam":
                    this.vehicleNormalEngineParam = EntityPtr<Phx.PhVehicleNormalEngineParam>.Get(value.GetValueAsEntityPtr().Entity as Phx.PhVehicleNormalEngineParam);
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "vehicleAxes":
                    while(this.vehicleAxes.Count <= index) { this.vehicleAxes.Add(default(EntityLink)); }
                    this.vehicleAxes[index] = value.GetValueAsEntityLink();
                    return;
                case "torqueDistributions":
                    while(this.torqueDistributions.Count <= index) { this.torqueDistributions.Add(default(float)); }
                    this.torqueDistributions[index] = value.GetValueAsFloat();
                    return;
                case "gearRatios":
                    while(this.gearRatios.Count <= index) { this.gearRatios.Add(default(float)); }
                    this.gearRatios[index] = value.GetValueAsFloat();
                    return;
                case "specPointAngularVelocity":
                    while(this.specPointAngularVelocity.Count <= index) { this.specPointAngularVelocity.Add(default(float)); }
                    this.specPointAngularVelocity[index] = value.GetValueAsFloat();
                    return;
                case "specPointTorque":
                    while(this.specPointTorque.Count <= index) { this.specPointTorque.Add(default(float)); }
                    this.specPointTorque[index] = value.GetValueAsFloat();
                    return;
                case "specPointBreakTorque":
                    while(this.specPointBreakTorque.Count <= index) { this.specPointBreakTorque.Add(default(float)); }
                    this.specPointBreakTorque[index] = value.GetValueAsFloat();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}