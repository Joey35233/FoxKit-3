//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ui
{
    public partial class UiNodeData : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<EntityLink> inputEdges { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public System.Collections.Generic.IList<EntityLink> outputEdges { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public uint inputPortCount { get; set; }
        
        public System.Collections.Generic.IList<UiNodeType> inputPortTypes { get; } = new System.Collections.Generic.List<UiNodeType>();
        
        public System.Collections.Generic.IList<String> inputPropertyNames { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<UiNodePropType> inputPropertyTypes { get; } = new System.Collections.Generic.List<UiNodePropType>();
        
        public uint outputPortCount { get; set; }
        
        public System.Collections.Generic.IList<UiNodeType> outputPortTypes { get; } = new System.Collections.Generic.List<UiNodeType>();
        
        public System.Collections.Generic.IList<String> outputPropertyNames { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<UiNodePropType> outputPropertyTypes { get; } = new System.Collections.Generic.List<UiNodePropType>();
        
        public float xPosition { get; set; }
        
        public float yPosition { get; set; }
        
        public int category { get; set; }
        
        public UiNodeType type { get; set; }
        
        public String nodeName { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiNodeData()
        {
            classInfo = new EntityInfo(new String("UiNodeData"), base.GetClassEntityInfo(), 0, "UiG", 2);
			
			classInfo.StaticProperties.Insert(new String("inputEdges"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outputEdges"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inputPortCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inputPortTypes"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 160, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiNodeType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inputPropertyNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 176, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inputPropertyTypes"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 192, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiNodePropType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outputPortCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outputPortTypes"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 216, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiNodeType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outputPropertyNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 232, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outputPropertyTypes"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 248, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiNodePropType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("xPosition"), new PropertyInfo(PropertyInfo.PropertyType.Float, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("yPosition"), new PropertyInfo(PropertyInfo.PropertyType.Float, 268, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("category"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("type"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 276, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiNodeType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nodeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 288, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiNodeData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "inputPortCount":
                    this.inputPortCount = value.GetValueAsUInt32();
                    return;
                case "outputPortCount":
                    this.outputPortCount = value.GetValueAsUInt32();
                    return;
                case "xPosition":
                    this.xPosition = value.GetValueAsFloat();
                    return;
                case "yPosition":
                    this.yPosition = value.GetValueAsFloat();
                    return;
                case "category":
                    this.category = value.GetValueAsInt32();
                    return;
                case "type":
                    this.type = (UiNodeType)value.GetValueAsInt32();
                    return;
                case "nodeName":
                    this.nodeName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "inputEdges":
                    while(this.inputEdges.Count <= index) { this.inputEdges.Add(default(EntityLink)); }
                    this.inputEdges[index] = value.GetValueAsEntityLink();
                    return;
                case "outputEdges":
                    while(this.outputEdges.Count <= index) { this.outputEdges.Add(default(EntityLink)); }
                    this.outputEdges[index] = value.GetValueAsEntityLink();
                    return;
                case "inputPortTypes":
                    while(this.inputPortTypes.Count <= index) { this.inputPortTypes.Add(default(UiNodeType)); }
                    this.inputPortTypes[index] = (UiNodeType)value.GetValueAsInt32();
                    return;
                case "inputPropertyNames":
                    while(this.inputPropertyNames.Count <= index) { this.inputPropertyNames.Add(default(String)); }
                    this.inputPropertyNames[index] = value.GetValueAsString();
                    return;
                case "inputPropertyTypes":
                    while(this.inputPropertyTypes.Count <= index) { this.inputPropertyTypes.Add(default(UiNodePropType)); }
                    this.inputPropertyTypes[index] = (UiNodePropType)value.GetValueAsInt32();
                    return;
                case "outputPortTypes":
                    while(this.outputPortTypes.Count <= index) { this.outputPortTypes.Add(default(UiNodeType)); }
                    this.outputPortTypes[index] = (UiNodeType)value.GetValueAsInt32();
                    return;
                case "outputPropertyNames":
                    while(this.outputPropertyNames.Count <= index) { this.outputPropertyNames.Add(default(String)); }
                    this.outputPropertyNames[index] = value.GetValueAsString();
                    return;
                case "outputPropertyTypes":
                    while(this.outputPropertyTypes.Count <= index) { this.outputPropertyTypes.Add(default(UiNodePropType)); }
                    this.outputPropertyTypes[index] = (UiNodePropType)value.GetValueAsInt32();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}