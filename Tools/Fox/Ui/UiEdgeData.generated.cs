//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ui
{
    public partial class UiEdgeData : Fox.Core.Data 
    {
        // Properties
        public EntityLink sourcePort { get; set; }
        
        public int sourcePortType { get; set; }
        
        public int sourcePortIndex { get; set; }
        
        public EntityLink targetPort { get; set; }
        
        public int targetPortType { get; set; }
        
        public int targetPortIndex { get; set; }
        
        public bool isVirtual { get; set; }
        
        public int virtualSourcePortIndex { get; set; }
        
        public int virtualTargetPortIndex { get; set; }
        
        public EntityLink virtualSourceNode { get; set; }
        
        public EntityLink virtualTargetNode { get; set; }
        
        public bool isInvalid { get; set; }
        
        public EntityLink connectRealEdge { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiEdgeData()
        {
            classInfo = new EntityInfo(new String("UiEdgeData"), base.GetClassEntityInfo(), 0, "UiG", 5);
			
			classInfo.StaticProperties.Insert(new String("sourcePort"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sourcePortType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sourcePortIndex"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("targetPort"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("targetPortType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("targetPortIndex"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isVirtual"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("virtualSourcePortIndex"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 220, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("virtualTargetPortIndex"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("virtualSourceNode"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("virtualTargetNode"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isInvalid"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("connectRealEdge"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiEdgeData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "sourcePort":
                    this.sourcePort = value.GetValueAsEntityLink();
                    return;
                case "sourcePortType":
                    this.sourcePortType = value.GetValueAsInt32();
                    return;
                case "sourcePortIndex":
                    this.sourcePortIndex = value.GetValueAsInt32();
                    return;
                case "targetPort":
                    this.targetPort = value.GetValueAsEntityLink();
                    return;
                case "targetPortType":
                    this.targetPortType = value.GetValueAsInt32();
                    return;
                case "targetPortIndex":
                    this.targetPortIndex = value.GetValueAsInt32();
                    return;
                case "isVirtual":
                    this.isVirtual = value.GetValueAsBool();
                    return;
                case "virtualSourcePortIndex":
                    this.virtualSourcePortIndex = value.GetValueAsInt32();
                    return;
                case "virtualTargetPortIndex":
                    this.virtualTargetPortIndex = value.GetValueAsInt32();
                    return;
                case "virtualSourceNode":
                    this.virtualSourceNode = value.GetValueAsEntityLink();
                    return;
                case "virtualTargetNode":
                    this.virtualTargetNode = value.GetValueAsEntityLink();
                    return;
                case "isInvalid":
                    this.isInvalid = value.GetValueAsBool();
                    return;
                case "connectRealEdge":
                    this.connectRealEdge = value.GetValueAsEntityLink();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}