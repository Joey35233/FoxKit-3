//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.Ui
{
    public partial class UiEventNode : Fox.Ui.UiNodeData 
    {
        // Properties
        public uint inputPhaseCount { get; set; }
        
        public uint inputOperationCount { get; set; }
        
        public bool useStartOperation { get; set; }
        
        public bool useStopOperation { get; set; }
        
        public bool isReEnter { get; set; }
        
        public UiEventNodeKind kind { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiEventNode()
        {
            classInfo = new EntityInfo(new String("UiEventNode"), base.GetClassEntityInfo(), 0, "UiG", 7);
			
			classInfo.StaticProperties.Insert(new String("inputPhaseCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 296, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("inputOperationCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 300, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useStartOperation"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useStopOperation"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 305, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isReEnter"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 306, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("kind"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 280, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, typeof(UiEventNodeKind), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public UiEventNode(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "inputPhaseCount":
                    this.inputPhaseCount = value.GetValueAsUInt32();
                    return;
                case "inputOperationCount":
                    this.inputOperationCount = value.GetValueAsUInt32();
                    return;
                case "useStartOperation":
                    this.useStartOperation = value.GetValueAsBool();
                    return;
                case "useStopOperation":
                    this.useStopOperation = value.GetValueAsBool();
                    return;
                case "isReEnter":
                    this.isReEnter = value.GetValueAsBool();
                    return;
                case "kind":
                    this.kind = (UiEventNodeKind)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}