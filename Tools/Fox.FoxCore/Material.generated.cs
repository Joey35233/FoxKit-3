//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.FoxCore
{
    public partial class Material : FoxCore.Data 
    {
        // Properties
        public String materialName { get; set; }
        
        public Path shader { get; set; }
        
        public Path diffuseTexture { get; set; }
        
        public Path srmTexture { get; set; }
        
        public Path normalTexture { get; set; }
        
        public Path materialMapTexture { get; set; }
        
        public byte materialIndex { get; set; }
        
        public Color diffuseColor { get; set; }
        
        public Color specularColor { get; set; }
        
        public Path fmtrPath { get; set; }
        
        public bool residentFlag { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Material()
        {
            classInfo = new EntityInfo(new String("Material"), base.GetClassEntityInfo(), 176, "Material", 6);
			
			classInfo.StaticProperties.Insert(new String("materialName"), new PropertyInfo(PropertyInfo.PropertyType.String, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shader"), new PropertyInfo(PropertyInfo.PropertyType.Path, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("diffuseTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("srmTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialMapTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("materialIndex"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("diffuseColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("specularColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fmtrPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("residentFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Material(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "materialName":
                    this.materialName = value.GetValueAsString();
                    return;
                case "shader":
                    this.shader = value.GetValueAsPath();
                    return;
                case "diffuseTexture":
                    this.diffuseTexture = value.GetValueAsPath();
                    return;
                case "srmTexture":
                    this.srmTexture = value.GetValueAsPath();
                    return;
                case "normalTexture":
                    this.normalTexture = value.GetValueAsPath();
                    return;
                case "materialMapTexture":
                    this.materialMapTexture = value.GetValueAsPath();
                    return;
                case "materialIndex":
                    this.materialIndex = value.GetValueAsUInt8();
                    return;
                case "diffuseColor":
                    this.diffuseColor = value.GetValueAsColor();
                    return;
                case "specularColor":
                    this.specularColor = value.GetValueAsColor();
                    return;
                case "fmtrPath":
                    this.fmtrPath = value.GetValueAsPath();
                    return;
                case "residentFlag":
                    this.residentFlag = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}