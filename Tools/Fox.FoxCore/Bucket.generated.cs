//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Fox.FoxCore
{
    public partial class Bucket : FoxCore.Entity 
    {
        // Properties
        public EntityHandle collector { get; set; }
        
        public String name { get; set; }
        
        public String sceneName { get; set; }
        
        public System.Collections.Generic.IList<EntityPtr<FoxCore.Actor>> actors { get; } = new System.Collections.Generic.List<EntityPtr<FoxCore.Actor>>();
        
        public StringMap<FilePtr<File>> dataSetFiles { get; } = new StringMap<FilePtr<File>>();
        
        public StringMap<EntityPtr<FoxCore.DataBodySet>> dataBodySets { get; } = new StringMap<EntityPtr<FoxCore.DataBodySet>>();
        
        public EntityPtr<FoxCore.DataSet> editableDataSet { get; set; }
        
        public Path editableDataSetPath { get; set; }
        
        public EntityPtr<FoxCore.DataBodySet> editableDataBodySet { get; set; }
        
        public bool editableDataSetChanged { get; set; }
        
        public bool isEditableLocked { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static Bucket()
        {
            classInfo = new EntityInfo(new String("Bucket"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("collector"), new PropertyInfo(PropertyInfo.PropertyType.EntityHandle, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("name"), new PropertyInfo(PropertyInfo.PropertyType.String, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sceneName"), new PropertyInfo(PropertyInfo.PropertyType.String, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("actors"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 88, 1, PropertyInfo.ContainerType.List, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(FoxCore.Actor), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dataSetFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 120, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dataBodySets"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 168, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(FoxCore.DataBodySet), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("editableDataSet"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(FoxCore.DataSet), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("editableDataSetPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("editableDataBodySet"), new PropertyInfo(PropertyInfo.PropertyType.EntityPtr, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, typeof(FoxCore.DataBodySet), null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("editableDataSetChanged"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isEditableLocked"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public Bucket(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "collector":
                    this.collector = value.GetValueAsEntityHandle();
                    return;
                case "name":
                    this.name = value.GetValueAsString();
                    return;
                case "sceneName":
                    this.sceneName = value.GetValueAsString();
                    return;
                case "editableDataSet":
                    this.editableDataSet = EntityPtr<FoxCore.DataSet>.Get(value.GetValueAsEntityPtr().Entity as FoxCore.DataSet);
                    return;
                case "editableDataSetPath":
                    this.editableDataSetPath = value.GetValueAsPath();
                    return;
                case "editableDataBodySet":
                    this.editableDataBodySet = EntityPtr<FoxCore.DataBodySet>.Get(value.GetValueAsEntityPtr().Entity as FoxCore.DataBodySet);
                    return;
                case "editableDataSetChanged":
                    this.editableDataSetChanged = value.GetValueAsBool();
                    return;
                case "isEditableLocked":
                    this.isEditableLocked = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "actors":
                    while(this.actors.Count <= index) { this.actors.Add(default(EntityPtr<FoxCore.Actor>)); }
                    this.actors[index] = EntityPtr<FoxCore.Actor>.Get(value.GetValueAsEntityPtr().Entity as FoxCore.Actor);
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "dataSetFiles":
                    this.dataSetFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "dataBodySets":
                    this.dataBodySets.Add(key, EntityPtr<FoxCore.DataBodySet>.Get(value.GetValueAsEntityPtr().Entity as FoxCore.DataBodySet));
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}