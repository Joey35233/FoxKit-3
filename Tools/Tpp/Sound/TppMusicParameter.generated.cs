//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Sound
{
    public partial class TppMusicParameter : Fox.Core.Data 
    {
        // Properties
        public String tag { get; set; }
        
        public String playEvent { get; set; }
        
        public String daySwitchEvent { get; set; }
        
        public String nightSwitchEvent { get; set; }
        
        public String dangerEasySwitchEvent { get; set; }
        
        public String dangerOuterSwitchEvent { get; set; }
        
        public String dangerHardSwitchEvent { get; set; }
        
        public String dangerEasyLostSwitchEvent { get; set; }
        
        public String dangerOuterLostSwitchEvent { get; set; }
        
        public String dangerHardLostSwitchEvent { get; set; }
        
        public String dangerEvasionSwitchEvent { get; set; }
        
        public String dangerStrongSwitchEvent { get; set; }
        
        public String safetyReflexSwitchEvent { get; set; }
        
        public String safetyNeutralToSneakSwitchEvent { get; set; }
        
        public String safetySneakSwitchEvent { get; set; }
        
        public String safetyCautionSwitchEvent { get; set; }
        
        public String safetyNoticeSwitchEvent { get; set; }
        
        public String safetyCautionNoticeSwitchEvent { get; set; }
        
        public String safetyAlertToCautionSwitchEvent { get; set; }
        
        public String neutralSwitchEvent { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppMusicParameter()
        {
            classInfo = new EntityInfo(new String("TppMusicParameter"), base.GetClassEntityInfo(), 144, "Sound", 9);
			
			classInfo.StaticProperties.Insert(new String("tag"), new PropertyInfo(PropertyInfo.PropertyType.String, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("playEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("daySwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("nightSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerEasySwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerOuterSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerHardSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerEasyLostSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerOuterLostSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerHardLostSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerEvasionSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dangerStrongSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyReflexSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyNeutralToSneakSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetySneakSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyCautionSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyNoticeSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyCautionNoticeSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("safetyAlertToCautionSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("neutralSwitchEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppMusicParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "tag":
                    this.tag = value.GetValueAsString();
                    return;
                case "playEvent":
                    this.playEvent = value.GetValueAsString();
                    return;
                case "daySwitchEvent":
                    this.daySwitchEvent = value.GetValueAsString();
                    return;
                case "nightSwitchEvent":
                    this.nightSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerEasySwitchEvent":
                    this.dangerEasySwitchEvent = value.GetValueAsString();
                    return;
                case "dangerOuterSwitchEvent":
                    this.dangerOuterSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerHardSwitchEvent":
                    this.dangerHardSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerEasyLostSwitchEvent":
                    this.dangerEasyLostSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerOuterLostSwitchEvent":
                    this.dangerOuterLostSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerHardLostSwitchEvent":
                    this.dangerHardLostSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerEvasionSwitchEvent":
                    this.dangerEvasionSwitchEvent = value.GetValueAsString();
                    return;
                case "dangerStrongSwitchEvent":
                    this.dangerStrongSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyReflexSwitchEvent":
                    this.safetyReflexSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyNeutralToSneakSwitchEvent":
                    this.safetyNeutralToSneakSwitchEvent = value.GetValueAsString();
                    return;
                case "safetySneakSwitchEvent":
                    this.safetySneakSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyCautionSwitchEvent":
                    this.safetyCautionSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyNoticeSwitchEvent":
                    this.safetyNoticeSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyCautionNoticeSwitchEvent":
                    this.safetyCautionNoticeSwitchEvent = value.GetValueAsString();
                    return;
                case "safetyAlertToCautionSwitchEvent":
                    this.safetyAlertToCautionSwitchEvent = value.GetValueAsString();
                    return;
                case "neutralSwitchEvent":
                    this.neutralSwitchEvent = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}