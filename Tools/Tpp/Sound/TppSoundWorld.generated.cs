//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Sound
{
    public partial class TppSoundWorld : Fox.Core.Data 
    {
        // Properties
        public uint updateSeconds { get; set; }
        
        public float startMorning { get; set; }
        
        public float midMorning { get; set; }
        
        public float endMorning { get; set; }
        
        public float startEvening { get; set; }
        
        public float midEvening { get; set; }
        
        public float endEvening { get; set; }
        
        public String situationEvent { get; set; }
        
        public String clockRtpc { get; set; }
        
        public String windVelocityRtpc { get; set; }
        
        public String windDirectionRtpc { get; set; }
        
        public String rainRtpc { get; set; }
        
        public String heightRtpc { get; set; }
        
        public EntityLink[] ambientParameter { get; } = new EntityLink[8];
        
        public String categoryFpvStateGroup { get; set; }
        
        public String categoryFpvStateValue { get; set; }
        
        public String dashStartEventName { get; set; }
        
        public String dashFinishEventName { get; set; }
        
        public float blockedObstruction { get; set; }
        
        public float blockedOcclusion { get; set; }
        
        public float unlinkedObstruction { get; set; }
        
        public float unlinkedOcclusion { get; set; }
        
        public float interferenceSlope { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppSoundWorld()
        {
            classInfo = new EntityInfo(new String("TppSoundWorld"), base.GetClassEntityInfo(), 408, "Sound", 8);
			
			classInfo.StaticProperties.Insert(new String("updateSeconds"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startMorning"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midMorning"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("endMorning"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startEvening"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midEvening"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("endEvening"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("situationEvent"), new PropertyInfo(PropertyInfo.PropertyType.String, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("clockRtpc"), new PropertyInfo(PropertyInfo.PropertyType.String, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windVelocityRtpc"), new PropertyInfo(PropertyInfo.PropertyType.String, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windDirectionRtpc"), new PropertyInfo(PropertyInfo.PropertyType.String, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rainRtpc"), new PropertyInfo(PropertyInfo.PropertyType.String, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("heightRtpc"), new PropertyInfo(PropertyInfo.PropertyType.String, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("ambientParameter"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 216, 8, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("categoryFpvStateGroup"), new PropertyInfo(PropertyInfo.PropertyType.String, 536, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("categoryFpvStateValue"), new PropertyInfo(PropertyInfo.PropertyType.String, 544, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dashStartEventName"), new PropertyInfo(PropertyInfo.PropertyType.String, 552, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dashFinishEventName"), new PropertyInfo(PropertyInfo.PropertyType.String, 560, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockedObstruction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockedOcclusion"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("unlinkedObstruction"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("unlinkedOcclusion"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("interferenceSlope"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppSoundWorld(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "updateSeconds":
                    this.updateSeconds = value.GetValueAsUInt32();
                    return;
                case "startMorning":
                    this.startMorning = value.GetValueAsFloat();
                    return;
                case "midMorning":
                    this.midMorning = value.GetValueAsFloat();
                    return;
                case "endMorning":
                    this.endMorning = value.GetValueAsFloat();
                    return;
                case "startEvening":
                    this.startEvening = value.GetValueAsFloat();
                    return;
                case "midEvening":
                    this.midEvening = value.GetValueAsFloat();
                    return;
                case "endEvening":
                    this.endEvening = value.GetValueAsFloat();
                    return;
                case "situationEvent":
                    this.situationEvent = value.GetValueAsString();
                    return;
                case "clockRtpc":
                    this.clockRtpc = value.GetValueAsString();
                    return;
                case "windVelocityRtpc":
                    this.windVelocityRtpc = value.GetValueAsString();
                    return;
                case "windDirectionRtpc":
                    this.windDirectionRtpc = value.GetValueAsString();
                    return;
                case "rainRtpc":
                    this.rainRtpc = value.GetValueAsString();
                    return;
                case "heightRtpc":
                    this.heightRtpc = value.GetValueAsString();
                    return;
                case "categoryFpvStateGroup":
                    this.categoryFpvStateGroup = value.GetValueAsString();
                    return;
                case "categoryFpvStateValue":
                    this.categoryFpvStateValue = value.GetValueAsString();
                    return;
                case "dashStartEventName":
                    this.dashStartEventName = value.GetValueAsString();
                    return;
                case "dashFinishEventName":
                    this.dashFinishEventName = value.GetValueAsString();
                    return;
                case "blockedObstruction":
                    this.blockedObstruction = value.GetValueAsFloat();
                    return;
                case "blockedOcclusion":
                    this.blockedOcclusion = value.GetValueAsFloat();
                    return;
                case "unlinkedObstruction":
                    this.unlinkedObstruction = value.GetValueAsFloat();
                    return;
                case "unlinkedOcclusion":
                    this.unlinkedOcclusion = value.GetValueAsFloat();
                    return;
                case "interferenceSlope":
                    this.interferenceSlope = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "ambientParameter":
                    
                    this.ambientParameter[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}