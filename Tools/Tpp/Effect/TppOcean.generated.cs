//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppOcean : Fox.Core.TransformData 
    {
        // Properties
        public bool enable { get; set; }
        
        public bool guantanamoOcean { get; set; }
        
        public bool wireframe { get; set; }
        
        public float baseHeight { get; set; }
        
        public uint gridNumX { get; set; }
        
        public uint gridNumY { get; set; }
        
        public float screenMarginX { get; set; }
        
        public float screenMarginY { get; set; }
        
        public float waveLengthMin { get; set; }
        
        public float waveLengthMax { get; set; }
        
        public float waveDispersion { get; set; }
        
        public float windSpeed { get; set; }
        
        public Path waveParamTexture { get; set; }
        
        public Path whitecapTexture { get; set; }
        
        public float horizonDistance { get; set; }
        
        public float lightCaptureDistance { get; set; }
        
        public uint randomSeed { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> collisionDatas { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppOcean()
        {
            classInfo = new EntityInfo(new String("TppOcean"), base.GetClassEntityInfo(), 352, null, 12);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("guantanamoOcean"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 305, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wireframe"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 306, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gridNumX"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gridNumY"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 316, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("screenMarginX"), new PropertyInfo(PropertyInfo.PropertyType.Float, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("screenMarginY"), new PropertyInfo(PropertyInfo.PropertyType.Float, 324, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waveLengthMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 328, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waveLengthMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 332, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waveDispersion"), new PropertyInfo(PropertyInfo.PropertyType.Float, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 340, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waveParamTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 344, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("whitecapTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("horizonDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 360, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightCaptureDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 364, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("randomSeed"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("collisionDatas"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 376, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppOcean(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "guantanamoOcean":
                    this.guantanamoOcean = value.GetValueAsBool();
                    return;
                case "wireframe":
                    this.wireframe = value.GetValueAsBool();
                    return;
                case "baseHeight":
                    this.baseHeight = value.GetValueAsFloat();
                    return;
                case "gridNumX":
                    this.gridNumX = value.GetValueAsUInt32();
                    return;
                case "gridNumY":
                    this.gridNumY = value.GetValueAsUInt32();
                    return;
                case "screenMarginX":
                    this.screenMarginX = value.GetValueAsFloat();
                    return;
                case "screenMarginY":
                    this.screenMarginY = value.GetValueAsFloat();
                    return;
                case "waveLengthMin":
                    this.waveLengthMin = value.GetValueAsFloat();
                    return;
                case "waveLengthMax":
                    this.waveLengthMax = value.GetValueAsFloat();
                    return;
                case "waveDispersion":
                    this.waveDispersion = value.GetValueAsFloat();
                    return;
                case "windSpeed":
                    this.windSpeed = value.GetValueAsFloat();
                    return;
                case "waveParamTexture":
                    this.waveParamTexture = value.GetValueAsPath();
                    return;
                case "whitecapTexture":
                    this.whitecapTexture = value.GetValueAsPath();
                    return;
                case "horizonDistance":
                    this.horizonDistance = value.GetValueAsFloat();
                    return;
                case "lightCaptureDistance":
                    this.lightCaptureDistance = value.GetValueAsFloat();
                    return;
                case "randomSeed":
                    this.randomSeed = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "collisionDatas":
                    while(this.collisionDatas.Count <= index) { this.collisionDatas.Add(default(EntityLink)); }
                    this.collisionDatas[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}