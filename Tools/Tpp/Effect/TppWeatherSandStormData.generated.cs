//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppWeatherSandStormData : Fox.Core.Data 
    {
        // Properties
        public FilePtr<File> vfxFileSandStormStart { get; set; }
        
        public FilePtr<File> vfxFileSandStormFar { get; set; }
        
        public FilePtr<File> vfxFileSandStormNear { get; set; }
        
        public FilePtr<File> vfxFileSandStormCamera { get; set; }
        
        public float sandStormFarDistance { get; set; }
        
        public float sandStormFarHeight { get; set; }
        
        public float sandStormNearDistance { get; set; }
        
        public float sandStormNearHeight { get; set; }
        
        public float noiseScale { get; set; }
        
        public float noiseOffset { get; set; }
        
        public float noiseCutScale { get; set; }
        
        public float noiseCutOffset { get; set; }
        
        public Color noiseColor { get; set; }
        
        public bool noiseSunLightColorMul { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppWeatherSandStormData()
        {
            classInfo = new EntityInfo(new String("TppWeatherSandStormData"), base.GetClassEntityInfo(), 240, "TppEffect", 3);
			
			classInfo.StaticProperties.Insert(new String("vfxFileSandStormStart"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileSandStormFar"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileSandStormNear"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileSandStormCamera"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sandStormFarDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sandStormFarHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 220, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sandStormNearDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 228, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sandStormNearHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseOffset"), new PropertyInfo(PropertyInfo.PropertyType.Float, 244, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseCutScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseCutOffset"), new PropertyInfo(PropertyInfo.PropertyType.Float, 252, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseSunLightColorMul"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppWeatherSandStormData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "vfxFileSandStormStart":
                    this.vfxFileSandStormStart = value.GetValueAsFilePtr();
                    return;
                case "vfxFileSandStormFar":
                    this.vfxFileSandStormFar = value.GetValueAsFilePtr();
                    return;
                case "vfxFileSandStormNear":
                    this.vfxFileSandStormNear = value.GetValueAsFilePtr();
                    return;
                case "vfxFileSandStormCamera":
                    this.vfxFileSandStormCamera = value.GetValueAsFilePtr();
                    return;
                case "sandStormFarDistance":
                    this.sandStormFarDistance = value.GetValueAsFloat();
                    return;
                case "sandStormFarHeight":
                    this.sandStormFarHeight = value.GetValueAsFloat();
                    return;
                case "sandStormNearDistance":
                    this.sandStormNearDistance = value.GetValueAsFloat();
                    return;
                case "sandStormNearHeight":
                    this.sandStormNearHeight = value.GetValueAsFloat();
                    return;
                case "noiseScale":
                    this.noiseScale = value.GetValueAsFloat();
                    return;
                case "noiseOffset":
                    this.noiseOffset = value.GetValueAsFloat();
                    return;
                case "noiseCutScale":
                    this.noiseCutScale = value.GetValueAsFloat();
                    return;
                case "noiseCutOffset":
                    this.noiseCutOffset = value.GetValueAsFloat();
                    return;
                case "noiseColor":
                    this.noiseColor = value.GetValueAsColor();
                    return;
                case "noiseSunLightColorMul":
                    this.noiseSunLightColorMul = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}