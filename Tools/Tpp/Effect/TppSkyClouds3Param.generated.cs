//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppSkyClouds3Param : Fox.Core.DataElement 
    {
        // Properties
        public bool enable { get; set; }
        
        public bool followCamera { get; set; }
        
        public Color color { get; set; }
        
        public float luminanceScale { get; set; }
        
        public float bottom { get; set; }
        
        public float radius { get; set; }
        
        public float height { get; set; }
        
        public float domeLength { get; set; }
        
        public float domeStreach { get; set; }
        
        public float domeWindInfluence { get; set; }
        
        public float midCylinderPos { get; set; }
        
        public float midCylinderWidth { get; set; }
        
        public float midCylinderStreach { get; set; }
        
        public float midCylinderScrSpeed { get; set; }
        
        public float lowCylinderIntrusion { get; set; }
        
        public float lowCylinderStreach { get; set; }
        
        public float lowCylinderScrSpeed { get; set; }
        
        public uint cylinderTexRepeat { get; set; }
        
        public Path domeTexture { get; set; }
        
        public Path midCylinderTexture { get; set; }
        
        public Path lowCylinderTexture { get; set; }
        
        public TppSkyClouds3Param_ColorSpace colorSpace { get; set; }
        
        public TppSkyClouds3Param_TexColor textureColorHandling { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppSkyClouds3Param()
        {
            classInfo = new EntityInfo(new String("TppSkyClouds3Param"), base.GetClassEntityInfo(), 0, "TppEffect", 3);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("followCamera"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 173, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("luminanceScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bottom"), new PropertyInfo(PropertyInfo.PropertyType.Float, 108, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("radius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("height"), new PropertyInfo(PropertyInfo.PropertyType.Float, 116, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("domeLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("domeStreach"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("domeWindInfluence"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midCylinderPos"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midCylinderWidth"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midCylinderStreach"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midCylinderScrSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lowCylinderIntrusion"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lowCylinderStreach"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lowCylinderScrSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cylinderTexRepeat"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("domeTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("midCylinderTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lowCylinderTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("colorSpace"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppSkyClouds3Param_ColorSpace), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("textureColorHandling"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppSkyClouds3Param_TexColor), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppSkyClouds3Param(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "followCamera":
                    this.followCamera = value.GetValueAsBool();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "luminanceScale":
                    this.luminanceScale = value.GetValueAsFloat();
                    return;
                case "bottom":
                    this.bottom = value.GetValueAsFloat();
                    return;
                case "radius":
                    this.radius = value.GetValueAsFloat();
                    return;
                case "height":
                    this.height = value.GetValueAsFloat();
                    return;
                case "domeLength":
                    this.domeLength = value.GetValueAsFloat();
                    return;
                case "domeStreach":
                    this.domeStreach = value.GetValueAsFloat();
                    return;
                case "domeWindInfluence":
                    this.domeWindInfluence = value.GetValueAsFloat();
                    return;
                case "midCylinderPos":
                    this.midCylinderPos = value.GetValueAsFloat();
                    return;
                case "midCylinderWidth":
                    this.midCylinderWidth = value.GetValueAsFloat();
                    return;
                case "midCylinderStreach":
                    this.midCylinderStreach = value.GetValueAsFloat();
                    return;
                case "midCylinderScrSpeed":
                    this.midCylinderScrSpeed = value.GetValueAsFloat();
                    return;
                case "lowCylinderIntrusion":
                    this.lowCylinderIntrusion = value.GetValueAsFloat();
                    return;
                case "lowCylinderStreach":
                    this.lowCylinderStreach = value.GetValueAsFloat();
                    return;
                case "lowCylinderScrSpeed":
                    this.lowCylinderScrSpeed = value.GetValueAsFloat();
                    return;
                case "cylinderTexRepeat":
                    this.cylinderTexRepeat = value.GetValueAsUInt32();
                    return;
                case "domeTexture":
                    this.domeTexture = value.GetValueAsPath();
                    return;
                case "midCylinderTexture":
                    this.midCylinderTexture = value.GetValueAsPath();
                    return;
                case "lowCylinderTexture":
                    this.lowCylinderTexture = value.GetValueAsPath();
                    return;
                case "colorSpace":
                    this.colorSpace = (TppSkyClouds3Param_ColorSpace)value.GetValueAsInt32();
                    return;
                case "textureColorHandling":
                    this.textureColorHandling = (TppSkyClouds3Param_TexColor)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}