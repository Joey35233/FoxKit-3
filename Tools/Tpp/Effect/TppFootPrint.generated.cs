//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppFootPrint : Fox.Core.TransformData 
    {
        // Properties
        public System.Collections.Generic.IList<System.Numerics.Matrix4x4> matrices { get; } = new System.Collections.Generic.List<System.Numerics.Matrix4x4>();
        
        public System.Collections.Generic.IList<uint> footChara { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<uint> footLR { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<float> alpha { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<bool> blood { get; } = new System.Collections.Generic.List<bool>();
        
        public System.Collections.Generic.IList<bool> enable { get; } = new System.Collections.Generic.List<bool>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppFootPrint()
        {
            classInfo = new EntityInfo(new String("TppFootPrint"), base.GetClassEntityInfo(), 416, null, 1);
			
			classInfo.StaticProperties.Insert(new String("matrices"), new PropertyInfo(PropertyInfo.PropertyType.Matrix4, 368, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("footChara"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 384, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("footLR"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 400, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("alpha"), new PropertyInfo(PropertyInfo.PropertyType.Float, 416, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blood"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 432, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 448, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppFootPrint(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "matrices":
                    while(this.matrices.Count <= index) { this.matrices.Add(default(System.Numerics.Matrix4x4)); }
                    this.matrices[index] = value.GetValueAsMatrix4();
                    return;
                case "footChara":
                    while(this.footChara.Count <= index) { this.footChara.Add(default(uint)); }
                    this.footChara[index] = value.GetValueAsUInt32();
                    return;
                case "footLR":
                    while(this.footLR.Count <= index) { this.footLR.Add(default(uint)); }
                    this.footLR[index] = value.GetValueAsUInt32();
                    return;
                case "alpha":
                    while(this.alpha.Count <= index) { this.alpha.Add(default(float)); }
                    this.alpha[index] = value.GetValueAsFloat();
                    return;
                case "blood":
                    while(this.blood.Count <= index) { this.blood.Add(default(bool)); }
                    this.blood[index] = value.GetValueAsBool();
                    return;
                case "enable":
                    while(this.enable.Count <= index) { this.enable.Add(default(bool)); }
                    this.enable[index] = value.GetValueAsBool();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}