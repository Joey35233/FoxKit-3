//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppMarshModelPrimitive : Fox.Core.Data 
    {
        // Properties
        public Path baseTexturePath { get; set; }
        
        public Path normalTexturePath { get; set; }
        
        public Path specularTexturePath { get; set; }
        
        public Path cubeMapPath { get; set; }
        
        public bool visibility { get; set; }
        
        public float depthBlendLength { get; set; }
        
        public float scrollSpeed0U { get; set; }
        
        public float scrollSpeed0V { get; set; }
        
        public float scrollSpeed1U { get; set; }
        
        public float scrollSpeed1V { get; set; }
        
        public bool useHnmTexture { get; set; }
        
        public bool debugReset { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> staticModels { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppMarshModelPrimitive()
        {
            classInfo = new EntityInfo(new String("TppMarshModelPrimitive"), base.GetClassEntityInfo(), 0, null, 4);
			
			classInfo.StaticProperties.Insert(new String("baseTexturePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalTexturePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("specularTexturePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cubeMapPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("visibility"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("depthBlendLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed0U"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed0V"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed1U"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed1V"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useHnmTexture"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debugReset"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 177, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("staticModels"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 184, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppMarshModelPrimitive(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "baseTexturePath":
                    this.baseTexturePath = value.GetValueAsPath();
                    return;
                case "normalTexturePath":
                    this.normalTexturePath = value.GetValueAsPath();
                    return;
                case "specularTexturePath":
                    this.specularTexturePath = value.GetValueAsPath();
                    return;
                case "cubeMapPath":
                    this.cubeMapPath = value.GetValueAsPath();
                    return;
                case "visibility":
                    this.visibility = value.GetValueAsBool();
                    return;
                case "depthBlendLength":
                    this.depthBlendLength = value.GetValueAsFloat();
                    return;
                case "scrollSpeed0U":
                    this.scrollSpeed0U = value.GetValueAsFloat();
                    return;
                case "scrollSpeed0V":
                    this.scrollSpeed0V = value.GetValueAsFloat();
                    return;
                case "scrollSpeed1U":
                    this.scrollSpeed1U = value.GetValueAsFloat();
                    return;
                case "scrollSpeed1V":
                    this.scrollSpeed1V = value.GetValueAsFloat();
                    return;
                case "useHnmTexture":
                    this.useHnmTexture = value.GetValueAsBool();
                    return;
                case "debugReset":
                    this.debugReset = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "staticModels":
                    while(this.staticModels.Count <= index) { this.staticModels.Add(default(EntityLink)); }
                    this.staticModels[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}