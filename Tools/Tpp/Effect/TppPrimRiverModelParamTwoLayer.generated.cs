//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppPrimRiverModelParamTwoLayer : Fox.Core.Data 
    {
        // Properties
        public String primRiverGroupName { get; set; }
        
        public bool visibility { get; set; }
        
        public String baseTextureName { get; set; }
        
        public String normalTextureName { get; set; }
        
        public String cubeMapName { get; set; }
        
        public String secondLayerBaseTextureName { get; set; }
        
        public EntityLink lightCaptureLocator { get; set; }
        
        public float scrollDirection0 { get; set; }
        
        public float scrollSpeed0 { get; set; }
        
        public float scrollScale0 { get; set; }
        
        public float scrollDirection1 { get; set; }
        
        public float scrollSpeed1 { get; set; }
        
        public float scrollScale1 { get; set; }
        
        public float transparency { get; set; }
        
        public float transparencyDepthBlend { get; set; }
        
        public float reflectionRate { get; set; }
        
        public float distortionPower { get; set; }
        
        public float surfaceShadowRate { get; set; }
        
        public float secondScrollDirection0 { get; set; }
        
        public float secondScrollSpeed0 { get; set; }
        
        public float secondScrollScale0 { get; set; }
        
        public float secondScrollDirection1 { get; set; }
        
        public float secondScrollSpeed1 { get; set; }
        
        public float secondScrollScale1 { get; set; }
        
        public float secondLayerTransparency { get; set; }
        
        public float secondLayerTransparencyDepthBlend { get; set; }
        
        public float secondLayerReflectionRate { get; set; }
        
        public float secondLayerDistortionPower { get; set; }
        
        public float secondLayerSurfaceShadowRate { get; set; }
        
        public float maskDistortionRate { get; set; }
        
        public float oilIntensity { get; set; }
        
        public bool useHnmTexture { get; set; }
        
        public bool debugReset { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPrimRiverModelParamTwoLayer()
        {
            classInfo = new EntityInfo(new String("TppPrimRiverModelParamTwoLayer"), base.GetClassEntityInfo(), 224, null, 4);
			
			classInfo.StaticProperties.Insert(new String("primRiverGroupName"), new PropertyInfo(PropertyInfo.PropertyType.String, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("visibility"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseTextureName"), new PropertyInfo(PropertyInfo.PropertyType.String, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalTextureName"), new PropertyInfo(PropertyInfo.PropertyType.String, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cubeMapName"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerBaseTextureName"), new PropertyInfo(PropertyInfo.PropertyType.String, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightCaptureLocator"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollDirection0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollScale0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollDirection1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 220, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollSpeed1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("scrollScale1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 228, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transparency"), new PropertyInfo(PropertyInfo.PropertyType.Float, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("transparencyDepthBlend"), new PropertyInfo(PropertyInfo.PropertyType.Float, 236, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("reflectionRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionPower"), new PropertyInfo(PropertyInfo.PropertyType.Float, 244, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("surfaceShadowRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollDirection0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 252, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollSpeed0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollScale0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 260, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollDirection1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollSpeed1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 268, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondScrollScale1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerTransparency"), new PropertyInfo(PropertyInfo.PropertyType.Float, 276, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerTransparencyDepthBlend"), new PropertyInfo(PropertyInfo.PropertyType.Float, 280, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerReflectionRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 284, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerDistortionPower"), new PropertyInfo(PropertyInfo.PropertyType.Float, 288, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("secondLayerSurfaceShadowRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 292, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maskDistortionRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 296, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("oilIntensity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 300, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useHnmTexture"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debugReset"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 305, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppPrimRiverModelParamTwoLayer(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "primRiverGroupName":
                    this.primRiverGroupName = value.GetValueAsString();
                    return;
                case "visibility":
                    this.visibility = value.GetValueAsBool();
                    return;
                case "baseTextureName":
                    this.baseTextureName = value.GetValueAsString();
                    return;
                case "normalTextureName":
                    this.normalTextureName = value.GetValueAsString();
                    return;
                case "cubeMapName":
                    this.cubeMapName = value.GetValueAsString();
                    return;
                case "secondLayerBaseTextureName":
                    this.secondLayerBaseTextureName = value.GetValueAsString();
                    return;
                case "lightCaptureLocator":
                    this.lightCaptureLocator = value.GetValueAsEntityLink();
                    return;
                case "scrollDirection0":
                    this.scrollDirection0 = value.GetValueAsFloat();
                    return;
                case "scrollSpeed0":
                    this.scrollSpeed0 = value.GetValueAsFloat();
                    return;
                case "scrollScale0":
                    this.scrollScale0 = value.GetValueAsFloat();
                    return;
                case "scrollDirection1":
                    this.scrollDirection1 = value.GetValueAsFloat();
                    return;
                case "scrollSpeed1":
                    this.scrollSpeed1 = value.GetValueAsFloat();
                    return;
                case "scrollScale1":
                    this.scrollScale1 = value.GetValueAsFloat();
                    return;
                case "transparency":
                    this.transparency = value.GetValueAsFloat();
                    return;
                case "transparencyDepthBlend":
                    this.transparencyDepthBlend = value.GetValueAsFloat();
                    return;
                case "reflectionRate":
                    this.reflectionRate = value.GetValueAsFloat();
                    return;
                case "distortionPower":
                    this.distortionPower = value.GetValueAsFloat();
                    return;
                case "surfaceShadowRate":
                    this.surfaceShadowRate = value.GetValueAsFloat();
                    return;
                case "secondScrollDirection0":
                    this.secondScrollDirection0 = value.GetValueAsFloat();
                    return;
                case "secondScrollSpeed0":
                    this.secondScrollSpeed0 = value.GetValueAsFloat();
                    return;
                case "secondScrollScale0":
                    this.secondScrollScale0 = value.GetValueAsFloat();
                    return;
                case "secondScrollDirection1":
                    this.secondScrollDirection1 = value.GetValueAsFloat();
                    return;
                case "secondScrollSpeed1":
                    this.secondScrollSpeed1 = value.GetValueAsFloat();
                    return;
                case "secondScrollScale1":
                    this.secondScrollScale1 = value.GetValueAsFloat();
                    return;
                case "secondLayerTransparency":
                    this.secondLayerTransparency = value.GetValueAsFloat();
                    return;
                case "secondLayerTransparencyDepthBlend":
                    this.secondLayerTransparencyDepthBlend = value.GetValueAsFloat();
                    return;
                case "secondLayerReflectionRate":
                    this.secondLayerReflectionRate = value.GetValueAsFloat();
                    return;
                case "secondLayerDistortionPower":
                    this.secondLayerDistortionPower = value.GetValueAsFloat();
                    return;
                case "secondLayerSurfaceShadowRate":
                    this.secondLayerSurfaceShadowRate = value.GetValueAsFloat();
                    return;
                case "maskDistortionRate":
                    this.maskDistortionRate = value.GetValueAsFloat();
                    return;
                case "oilIntensity":
                    this.oilIntensity = value.GetValueAsFloat();
                    return;
                case "useHnmTexture":
                    this.useHnmTexture = value.GetValueAsBool();
                    return;
                case "debugReset":
                    this.debugReset = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}