//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppHeatHaze : Fox.Core.Data 
    {
        // Properties
        public float distortionIntensityFullResolution { get; set; }
        
        public float distortionVelocityFullResolution { get; set; }
        
        public float distortionTextureRepetitionFullResolution { get; set; }
        
        public float hazeMirageIntensityFullResolution { get; set; }
        
        public float hazeStartDistanceFullResolution { get; set; }
        
        public float hazeEndDistanceFullResolution { get; set; }
        
        public float hazeRangeAttenuationFullResolution { get; set; }
        
        public float hazeSecondLayerIntensityDifference { get; set; }
        
        public float hazeSecondLayerStartDistance { get; set; }
        
        public float hazeSecondLayerBlurRadius { get; set; }
        
        public float hazeDistortionIntensityAddedOnBinoculars { get; set; }
        
        public float mirageColorSaturation { get; set; }
        
        public float mirageSpreadingPower { get; set; }
        
        public float mirageRayLength { get; set; }
        
        public float mirageHitRange { get; set; }
        
        public float mirageStartDistance { get; set; }
        
        public float mirageRangeAttenuation { get; set; }
        
        public float distortionIntensityHalfResolution { get; set; }
        
        public float distortionVelocityHalfResolution { get; set; }
        
        public float distortionTextureRepetitionHalfResolution { get; set; }
        
        public float hazeIntensityHalfResolution { get; set; }
        
        public float hazeStartDistanceHalfResolution { get; set; }
        
        public float hazeEndDistanceHalfResolution { get; set; }
        
        public float hazeRangeAttenuationHalfResolution { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppHeatHaze()
        {
            classInfo = new EntityInfo(new String("TppHeatHaze"), base.GetClassEntityInfo(), 160, null, 1);
			
			classInfo.StaticProperties.Insert(new String("distortionIntensityFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionVelocityFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionTextureRepetitionFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeMirageIntensityFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeStartDistanceFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeEndDistanceFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeRangeAttenuationFullResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeSecondLayerIntensityDifference"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeSecondLayerStartDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeSecondLayerBlurRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeDistortionIntensityAddedOnBinoculars"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageColorSaturation"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageSpreadingPower"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageRayLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageHitRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageStartDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mirageRangeAttenuation"), new PropertyInfo(PropertyInfo.PropertyType.Float, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionIntensityHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 188, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionVelocityHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("distortionTextureRepetitionHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 196, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeIntensityHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeStartDistanceHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 204, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeEndDistanceHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hazeRangeAttenuationHalfResolution"), new PropertyInfo(PropertyInfo.PropertyType.Float, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppHeatHaze(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "distortionIntensityFullResolution":
                    this.distortionIntensityFullResolution = value.GetValueAsFloat();
                    return;
                case "distortionVelocityFullResolution":
                    this.distortionVelocityFullResolution = value.GetValueAsFloat();
                    return;
                case "distortionTextureRepetitionFullResolution":
                    this.distortionTextureRepetitionFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeMirageIntensityFullResolution":
                    this.hazeMirageIntensityFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeStartDistanceFullResolution":
                    this.hazeStartDistanceFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeEndDistanceFullResolution":
                    this.hazeEndDistanceFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeRangeAttenuationFullResolution":
                    this.hazeRangeAttenuationFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerIntensityDifference":
                    this.hazeSecondLayerIntensityDifference = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerStartDistance":
                    this.hazeSecondLayerStartDistance = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerBlurRadius":
                    this.hazeSecondLayerBlurRadius = value.GetValueAsFloat();
                    return;
                case "hazeDistortionIntensityAddedOnBinoculars":
                    this.hazeDistortionIntensityAddedOnBinoculars = value.GetValueAsFloat();
                    return;
                case "mirageColorSaturation":
                    this.mirageColorSaturation = value.GetValueAsFloat();
                    return;
                case "mirageSpreadingPower":
                    this.mirageSpreadingPower = value.GetValueAsFloat();
                    return;
                case "mirageRayLength":
                    this.mirageRayLength = value.GetValueAsFloat();
                    return;
                case "mirageHitRange":
                    this.mirageHitRange = value.GetValueAsFloat();
                    return;
                case "mirageStartDistance":
                    this.mirageStartDistance = value.GetValueAsFloat();
                    return;
                case "mirageRangeAttenuation":
                    this.mirageRangeAttenuation = value.GetValueAsFloat();
                    return;
                case "distortionIntensityHalfResolution":
                    this.distortionIntensityHalfResolution = value.GetValueAsFloat();
                    return;
                case "distortionVelocityHalfResolution":
                    this.distortionVelocityHalfResolution = value.GetValueAsFloat();
                    return;
                case "distortionTextureRepetitionHalfResolution":
                    this.distortionTextureRepetitionHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeIntensityHalfResolution":
                    this.hazeIntensityHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeStartDistanceHalfResolution":
                    this.hazeStartDistanceHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeEndDistanceHalfResolution":
                    this.hazeEndDistanceHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeRangeAttenuationHalfResolution":
                    this.hazeRangeAttenuationHalfResolution = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}