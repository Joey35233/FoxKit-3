//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppAtmosphere : Fox.Core.Data 
    {
        // Properties
        public Path atshFilePath { get; set; }
        
        public Path pcspFilePath { get; set; }
        
        public FilePtr<File> atshFilePtr { get; set; }
        
        public FilePtr<File> pcspFilePtr { get; set; }
        
        public bool useBakedData { get; set; }
        
        public EntityHandle capturePosition { get; set; }
        
        public float rayleighHeightScale { get; set; }
        
        public System.Numerics.Vector3 rayleighScatteringCoefficient { get; set; }
        
        public System.Numerics.Vector3 rayleighScatteringCoefficientOfCloudySky { get; set; }
        
        public float mieHeightScale { get; set; }
        
        public float mieAbsorptionRate { get; set; }
        
        public float mieAnisotropy { get; set; }
        
        public System.Numerics.Vector3 mieScatteringCoefficient { get; set; }
        
        public float mieAnisotropyOfCloudySky { get; set; }
        
        public System.Numerics.Vector3 mieScatteringCoefficientOfCloudySky { get; set; }
        
        public uint multiScatteringOrder { get; set; }
        
        public Color groundColor { get; set; }
        
        public float northAngle { get; set; }
        
        public float latitude { get; set; }
        
        public float longitude { get; set; }
        
        public int gmtTimeDifference { get; set; }
        
        public uint year { get; set; }
        
        public uint month { get; set; }
        
        public uint day { get; set; }
        
        public float shadowRange { get; set; }
        
        public float shadowRangeExtra { get; set; }
        
        public float hiResShadowRange { get; set; }
        
        public float shadowProjectionRange { get; set; }
        
        public float shadowFadeRange { get; set; }
        
        public float selfShadowBias { get; set; }
        
        public float shadowMaskSpecular { get; set; }
        
        public float dirLightFadeStart { get; set; }
        
        public float dirLightFadeLength { get; set; }
        
        public float sunLux { get; set; }
        
        public float moonLux { get; set; }
        
        public float starLight { get; set; }
        
        public float sunMoonSize { get; set; }
        
        public float sunMoonIntensity { get; set; }
        
        public Path sunTexture { get; set; }
        
        public Path moonTexture { get; set; }
        
        public Color moonColor { get; set; }
        
        public Color sunColorExtinctionOfClearSky { get; set; }
        
        public Color sunColorOfCloudySky { get; set; }
        
        public float skyLightSunScale { get; set; }
        
        public float skyColorSunScale { get; set; }
        
        public float daySkyAmbientScale { get; set; }
        
        public float dirLightSunLimitAngle { get; set; }
        
        public float dirLightMoonLimitAngle { get; set; }
        
        public float dirLightAttenuStart { get; set; }
        
        public float dirLightAttenuEnd { get; set; }
        
        public System.Numerics.Vector3 fixedLightDirSunRise { get; set; }
        
        public System.Numerics.Vector3 fixedLightDirSunSet { get; set; }
        
        public System.Numerics.Vector3 fixedLightDirMoonRise { get; set; }
        
        public System.Numerics.Vector3 fixedLightDirMoonSet { get; set; }
        
        public System.Numerics.Vector3 fixedRisingSunDir { get; set; }
        
        public System.Numerics.Vector3 fixedFallingSunDir { get; set; }
        
        public System.Numerics.Vector3 fixedRisingMoonDir { get; set; }
        
        public System.Numerics.Vector3 fixedFallingMoonDir { get; set; }
        
        public float skyLightLuminanceScale { get; set; }
        
        public uint numBands { get; set; }
        
        public System.Collections.Generic.IList<System.Numerics.Vector4> coefficients { get; } = new System.Collections.Generic.List<System.Numerics.Vector4>();
        
        public float cloudiness { get; set; }
        
        public float influenceOfFog { get; set; }
        
        public uint localFlags { get; set; }
        
        public uint priority { get; set; }
        
        public float interpolateTimeInSecondOfDirLightSteppedMove { get; set; }
        
        public uint divisonNumOfDirLightSteppedMove { get; set; }
        
        public bool enable { get; set; }
        
        public bool skyEnable { get; set; }
        
        public bool sunLightEnable { get; set; }
        
        public bool isCascadeBlend { get; set; }
        
        public bool castShadow { get; set; }
        
        public bool dirLightFade { get; set; }
        
        public bool disableSkyCapture { get; set; }
        
        public bool skyLightEnable { get; set; }
        
        public bool usePrecomputedAmbient { get; set; }
        
        public bool fogEnable { get; set; }
        
        public bool expandHorizontalLineColor { get; set; }
        
        public bool isSteppedMoveOfDirectionalLight { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppAtmosphere()
        {
            classInfo = new EntityInfo(new String("TppAtmosphere"), base.GetClassEntityInfo(), 608, "Light", 21);
			
			classInfo.StaticProperties.Insert(new String("atshFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 416, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("pcspFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 424, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("atshFilePtr"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 432, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("pcspFilePtr"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 456, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("useBakedData"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("capturePosition"), new PropertyInfo(PropertyInfo.PropertyType.EntityHandle, 488, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rayleighHeightScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 496, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rayleighScatteringCoefficient"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rayleighScatteringCoefficientOfCloudySky"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieHeightScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 500, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieAbsorptionRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 504, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieAnisotropy"), new PropertyInfo(PropertyInfo.PropertyType.Float, 508, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieScatteringCoefficient"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieAnisotropyOfCloudySky"), new PropertyInfo(PropertyInfo.PropertyType.Float, 512, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieScatteringCoefficientOfCloudySky"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("multiScatteringOrder"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 644, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("groundColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("northAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 516, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("latitude"), new PropertyInfo(PropertyInfo.PropertyType.Float, 520, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("longitude"), new PropertyInfo(PropertyInfo.PropertyType.Float, 524, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("gmtTimeDifference"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 640, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("year"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 648, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("month"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 652, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("day"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 656, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 540, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowRangeExtra"), new PropertyInfo(PropertyInfo.PropertyType.Float, 544, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("hiResShadowRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 548, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowProjectionRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 552, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowFadeRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 556, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("selfShadowBias"), new PropertyInfo(PropertyInfo.PropertyType.Float, 560, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shadowMaskSpecular"), new PropertyInfo(PropertyInfo.PropertyType.Float, 568, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightFadeStart"), new PropertyInfo(PropertyInfo.PropertyType.Float, 572, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightFadeLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 576, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunLux"), new PropertyInfo(PropertyInfo.PropertyType.Float, 588, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("moonLux"), new PropertyInfo(PropertyInfo.PropertyType.Float, 592, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("starLight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 596, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunMoonSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 580, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunMoonIntensity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 584, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 400, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("moonTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 408, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("moonColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunColorExtinctionOfClearSky"), new PropertyInfo(PropertyInfo.PropertyType.Color, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunColorOfCloudySky"), new PropertyInfo(PropertyInfo.PropertyType.Color, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyLightSunScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 600, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyColorSunScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 604, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("daySkyAmbientScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 608, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightSunLimitAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 612, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightMoonLimitAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 616, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightAttenuStart"), new PropertyInfo(PropertyInfo.PropertyType.Float, 620, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightAttenuEnd"), new PropertyInfo(PropertyInfo.PropertyType.Float, 624, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedLightDirSunRise"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedLightDirSunSet"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedLightDirMoonRise"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedLightDirMoonSet"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedRisingSunDir"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedFallingSunDir"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedRisingMoonDir"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 288, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fixedFallingMoonDir"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyLightLuminanceScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 632, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("numBands"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 660, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("coefficients"), new PropertyInfo(PropertyInfo.PropertyType.Vector4, 384, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cloudiness"), new PropertyInfo(PropertyInfo.PropertyType.Float, 628, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("influenceOfFog"), new PropertyInfo(PropertyInfo.PropertyType.Float, 528, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("localFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 664, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 668, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("interpolateTimeInSecondOfDirLightSteppedMove"), new PropertyInfo(PropertyInfo.PropertyType.Float, 636, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("divisonNumOfDirLightSteppedMove"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 672, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sunLightEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isCascadeBlend"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("castShadow"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightFade"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("disableSkyCapture"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyLightEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("usePrecomputedAmbient"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fogEnable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("expandHorizontalLineColor"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isSteppedMoveOfDirectionalLight"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppAtmosphere(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "atshFilePath":
                    this.atshFilePath = value.GetValueAsPath();
                    return;
                case "pcspFilePath":
                    this.pcspFilePath = value.GetValueAsPath();
                    return;
                case "atshFilePtr":
                    this.atshFilePtr = value.GetValueAsFilePtr();
                    return;
                case "pcspFilePtr":
                    this.pcspFilePtr = value.GetValueAsFilePtr();
                    return;
                case "useBakedData":
                    this.useBakedData = value.GetValueAsBool();
                    return;
                case "capturePosition":
                    this.capturePosition = value.GetValueAsEntityHandle();
                    return;
                case "rayleighHeightScale":
                    this.rayleighHeightScale = value.GetValueAsFloat();
                    return;
                case "rayleighScatteringCoefficient":
                    this.rayleighScatteringCoefficient = value.GetValueAsVector3();
                    return;
                case "rayleighScatteringCoefficientOfCloudySky":
                    this.rayleighScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
                    return;
                case "mieHeightScale":
                    this.mieHeightScale = value.GetValueAsFloat();
                    return;
                case "mieAbsorptionRate":
                    this.mieAbsorptionRate = value.GetValueAsFloat();
                    return;
                case "mieAnisotropy":
                    this.mieAnisotropy = value.GetValueAsFloat();
                    return;
                case "mieScatteringCoefficient":
                    this.mieScatteringCoefficient = value.GetValueAsVector3();
                    return;
                case "mieAnisotropyOfCloudySky":
                    this.mieAnisotropyOfCloudySky = value.GetValueAsFloat();
                    return;
                case "mieScatteringCoefficientOfCloudySky":
                    this.mieScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
                    return;
                case "multiScatteringOrder":
                    this.multiScatteringOrder = value.GetValueAsUInt32();
                    return;
                case "groundColor":
                    this.groundColor = value.GetValueAsColor();
                    return;
                case "northAngle":
                    this.northAngle = value.GetValueAsFloat();
                    return;
                case "latitude":
                    this.latitude = value.GetValueAsFloat();
                    return;
                case "longitude":
                    this.longitude = value.GetValueAsFloat();
                    return;
                case "gmtTimeDifference":
                    this.gmtTimeDifference = value.GetValueAsInt32();
                    return;
                case "year":
                    this.year = value.GetValueAsUInt32();
                    return;
                case "month":
                    this.month = value.GetValueAsUInt32();
                    return;
                case "day":
                    this.day = value.GetValueAsUInt32();
                    return;
                case "shadowRange":
                    this.shadowRange = value.GetValueAsFloat();
                    return;
                case "shadowRangeExtra":
                    this.shadowRangeExtra = value.GetValueAsFloat();
                    return;
                case "hiResShadowRange":
                    this.hiResShadowRange = value.GetValueAsFloat();
                    return;
                case "shadowProjectionRange":
                    this.shadowProjectionRange = value.GetValueAsFloat();
                    return;
                case "shadowFadeRange":
                    this.shadowFadeRange = value.GetValueAsFloat();
                    return;
                case "selfShadowBias":
                    this.selfShadowBias = value.GetValueAsFloat();
                    return;
                case "shadowMaskSpecular":
                    this.shadowMaskSpecular = value.GetValueAsFloat();
                    return;
                case "dirLightFadeStart":
                    this.dirLightFadeStart = value.GetValueAsFloat();
                    return;
                case "dirLightFadeLength":
                    this.dirLightFadeLength = value.GetValueAsFloat();
                    return;
                case "sunLux":
                    this.sunLux = value.GetValueAsFloat();
                    return;
                case "moonLux":
                    this.moonLux = value.GetValueAsFloat();
                    return;
                case "starLight":
                    this.starLight = value.GetValueAsFloat();
                    return;
                case "sunMoonSize":
                    this.sunMoonSize = value.GetValueAsFloat();
                    return;
                case "sunMoonIntensity":
                    this.sunMoonIntensity = value.GetValueAsFloat();
                    return;
                case "sunTexture":
                    this.sunTexture = value.GetValueAsPath();
                    return;
                case "moonTexture":
                    this.moonTexture = value.GetValueAsPath();
                    return;
                case "moonColor":
                    this.moonColor = value.GetValueAsColor();
                    return;
                case "sunColorExtinctionOfClearSky":
                    this.sunColorExtinctionOfClearSky = value.GetValueAsColor();
                    return;
                case "sunColorOfCloudySky":
                    this.sunColorOfCloudySky = value.GetValueAsColor();
                    return;
                case "skyLightSunScale":
                    this.skyLightSunScale = value.GetValueAsFloat();
                    return;
                case "skyColorSunScale":
                    this.skyColorSunScale = value.GetValueAsFloat();
                    return;
                case "daySkyAmbientScale":
                    this.daySkyAmbientScale = value.GetValueAsFloat();
                    return;
                case "dirLightSunLimitAngle":
                    this.dirLightSunLimitAngle = value.GetValueAsFloat();
                    return;
                case "dirLightMoonLimitAngle":
                    this.dirLightMoonLimitAngle = value.GetValueAsFloat();
                    return;
                case "dirLightAttenuStart":
                    this.dirLightAttenuStart = value.GetValueAsFloat();
                    return;
                case "dirLightAttenuEnd":
                    this.dirLightAttenuEnd = value.GetValueAsFloat();
                    return;
                case "fixedLightDirSunRise":
                    this.fixedLightDirSunRise = value.GetValueAsVector3();
                    return;
                case "fixedLightDirSunSet":
                    this.fixedLightDirSunSet = value.GetValueAsVector3();
                    return;
                case "fixedLightDirMoonRise":
                    this.fixedLightDirMoonRise = value.GetValueAsVector3();
                    return;
                case "fixedLightDirMoonSet":
                    this.fixedLightDirMoonSet = value.GetValueAsVector3();
                    return;
                case "fixedRisingSunDir":
                    this.fixedRisingSunDir = value.GetValueAsVector3();
                    return;
                case "fixedFallingSunDir":
                    this.fixedFallingSunDir = value.GetValueAsVector3();
                    return;
                case "fixedRisingMoonDir":
                    this.fixedRisingMoonDir = value.GetValueAsVector3();
                    return;
                case "fixedFallingMoonDir":
                    this.fixedFallingMoonDir = value.GetValueAsVector3();
                    return;
                case "skyLightLuminanceScale":
                    this.skyLightLuminanceScale = value.GetValueAsFloat();
                    return;
                case "numBands":
                    this.numBands = value.GetValueAsUInt32();
                    return;
                case "cloudiness":
                    this.cloudiness = value.GetValueAsFloat();
                    return;
                case "influenceOfFog":
                    this.influenceOfFog = value.GetValueAsFloat();
                    return;
                case "localFlags":
                    this.localFlags = value.GetValueAsUInt32();
                    return;
                case "priority":
                    this.priority = value.GetValueAsUInt32();
                    return;
                case "interpolateTimeInSecondOfDirLightSteppedMove":
                    this.interpolateTimeInSecondOfDirLightSteppedMove = value.GetValueAsFloat();
                    return;
                case "divisonNumOfDirLightSteppedMove":
                    this.divisonNumOfDirLightSteppedMove = value.GetValueAsUInt32();
                    return;
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "skyEnable":
                    this.skyEnable = value.GetValueAsBool();
                    return;
                case "sunLightEnable":
                    this.sunLightEnable = value.GetValueAsBool();
                    return;
                case "isCascadeBlend":
                    this.isCascadeBlend = value.GetValueAsBool();
                    return;
                case "castShadow":
                    this.castShadow = value.GetValueAsBool();
                    return;
                case "dirLightFade":
                    this.dirLightFade = value.GetValueAsBool();
                    return;
                case "disableSkyCapture":
                    this.disableSkyCapture = value.GetValueAsBool();
                    return;
                case "skyLightEnable":
                    this.skyLightEnable = value.GetValueAsBool();
                    return;
                case "usePrecomputedAmbient":
                    this.usePrecomputedAmbient = value.GetValueAsBool();
                    return;
                case "fogEnable":
                    this.fogEnable = value.GetValueAsBool();
                    return;
                case "expandHorizontalLineColor":
                    this.expandHorizontalLineColor = value.GetValueAsBool();
                    return;
                case "isSteppedMoveOfDirectionalLight":
                    this.isSteppedMoveOfDirectionalLight = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "coefficients":
                    while(this.coefficients.Count <= index) { this.coefficients.Add(default(System.Numerics.Vector4)); }
                    this.coefficients[index] = value.GetValueAsVector4();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}