//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppGlobalVolumetricFogParam : Fox.Core.DataElement 
    {
        // Properties
        public bool enable { get; set; }
        
        public float selfLuminance { get; set; }
        
        public Color selfColor { get; set; }
        
        public Color skyAlbedo { get; set; }
        
        public Color rayleighScattering { get; set; }
        
        public Color mieScattering { get; set; }
        
        public float mieAnisotropy { get; set; }
        
        public float skyLightGain { get; set; }
        
        public float dirLightGain { get; set; }
        
        public float lightningGain { get; set; }
        
        public float density { get; set; }
        
        public float power { get; set; }
        
        public float near { get; set; }
        
        public float falloff { get; set; }
        
        public float[] exposureOffsetValues { get; } = new float[3];
        
        public float[] exposureOffsetTargets { get; } = new float[3];
        
        public uint flags { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppGlobalVolumetricFogParam()
        {
            classInfo = new EntityInfo(new String("TppGlobalVolumetricFogParam"), base.GetClassEntityInfo(), 192, null, 17);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("selfLuminance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("selfColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyAlbedo"), new PropertyInfo(PropertyInfo.PropertyType.Color, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rayleighScattering"), new PropertyInfo(PropertyInfo.PropertyType.Color, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieScattering"), new PropertyInfo(PropertyInfo.PropertyType.Color, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mieAnisotropy"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("skyLightGain"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dirLightGain"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightningGain"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("density"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("power"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("near"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("falloff"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("exposureOffsetValues"), new PropertyInfo(PropertyInfo.PropertyType.Float, 200, 3, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("exposureOffsetTargets"), new PropertyInfo(PropertyInfo.PropertyType.Float, 188, 3, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppGlobalVolumetricFogParam(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "selfLuminance":
                    this.selfLuminance = value.GetValueAsFloat();
                    return;
                case "selfColor":
                    this.selfColor = value.GetValueAsColor();
                    return;
                case "skyAlbedo":
                    this.skyAlbedo = value.GetValueAsColor();
                    return;
                case "rayleighScattering":
                    this.rayleighScattering = value.GetValueAsColor();
                    return;
                case "mieScattering":
                    this.mieScattering = value.GetValueAsColor();
                    return;
                case "mieAnisotropy":
                    this.mieAnisotropy = value.GetValueAsFloat();
                    return;
                case "skyLightGain":
                    this.skyLightGain = value.GetValueAsFloat();
                    return;
                case "dirLightGain":
                    this.dirLightGain = value.GetValueAsFloat();
                    return;
                case "lightningGain":
                    this.lightningGain = value.GetValueAsFloat();
                    return;
                case "density":
                    this.density = value.GetValueAsFloat();
                    return;
                case "power":
                    this.power = value.GetValueAsFloat();
                    return;
                case "near":
                    this.near = value.GetValueAsFloat();
                    return;
                case "falloff":
                    this.falloff = value.GetValueAsFloat();
                    return;
                case "flags":
                    this.flags = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "exposureOffsetValues":
                    
                    this.exposureOffsetValues[index] = value.GetValueAsFloat();
                    return;
                case "exposureOffsetTargets":
                    
                    this.exposureOffsetTargets[index] = value.GetValueAsFloat();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}