//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppLightProbe : Fox.Core.TransformData 
    {
        // Properties
        public bool enable { get; set; }
        
        public EntityLink lightArea { get; set; }
        
        public EntityLink innerArea { get; set; }
        
        public EntityLink shCoefficientsData { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> onLights { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public System.Collections.Generic.IList<EntityLink> offLights { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public float innerScaleXPositive { get; set; }
        
        public float innerScaleXNegative { get; set; }
        
        public float innerScaleYPositive { get; set; }
        
        public float innerScaleYNegative { get; set; }
        
        public float innerScaleZPositive { get; set; }
        
        public float innerScaleZNegative { get; set; }
        
        public int priority { get; set; }
        
        public TppLightProbe_DebugMode debugMode { get; set; }
        
        public TppLightProbe_DrawRejectionLevel drawRejectionLevel { get; set; }
        
        public TppLightProbe_ShapeType shapeType { get; set; }
        
        public float exposure { get; set; }
        
        public uint localFlags { get; set; }
        
        public float occlusionModeOpenRate { get; set; }
        
        public bool enable24hSH { get; set; }
        
        public bool enableWeatherSH { get; set; }
        
        public bool enableRelatedLightSH { get; set; }
        
        public bool enableOcclusionMode { get; set; }
        
        public TppLightProbe_PackingGeneration packingGeneration { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppLightProbe()
        {
            classInfo = new EntityInfo(new String("TppLightProbe"), base.GetClassEntityInfo(), 448, "Light", 4);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 508, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightArea"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerArea"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 376, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shCoefficientsData"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 416, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("onLights"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 304, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offLights"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 320, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleXPositive"), new PropertyInfo(PropertyInfo.PropertyType.Float, 460, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleXNegative"), new PropertyInfo(PropertyInfo.PropertyType.Float, 464, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleYPositive"), new PropertyInfo(PropertyInfo.PropertyType.Float, 468, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleYNegative"), new PropertyInfo(PropertyInfo.PropertyType.Float, 472, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleZPositive"), new PropertyInfo(PropertyInfo.PropertyType.Float, 476, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScaleZNegative"), new PropertyInfo(PropertyInfo.PropertyType.Float, 480, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("priority"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 484, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debugMode"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 488, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_DebugMode), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("drawRejectionLevel"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 492, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shapeType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 496, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_ShapeType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("exposure"), new PropertyInfo(PropertyInfo.PropertyType.Float, 500, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("localFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 504, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("occlusionModeOpenRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 456, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enable24hSH"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableWeatherSH"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableRelatedLightSH"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableOcclusionMode"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("packingGeneration"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_PackingGeneration), PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppLightProbe(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "lightArea":
                    this.lightArea = value.GetValueAsEntityLink();
                    return;
                case "innerArea":
                    this.innerArea = value.GetValueAsEntityLink();
                    return;
                case "shCoefficientsData":
                    this.shCoefficientsData = value.GetValueAsEntityLink();
                    return;
                case "innerScaleXPositive":
                    this.innerScaleXPositive = value.GetValueAsFloat();
                    return;
                case "innerScaleXNegative":
                    this.innerScaleXNegative = value.GetValueAsFloat();
                    return;
                case "innerScaleYPositive":
                    this.innerScaleYPositive = value.GetValueAsFloat();
                    return;
                case "innerScaleYNegative":
                    this.innerScaleYNegative = value.GetValueAsFloat();
                    return;
                case "innerScaleZPositive":
                    this.innerScaleZPositive = value.GetValueAsFloat();
                    return;
                case "innerScaleZNegative":
                    this.innerScaleZNegative = value.GetValueAsFloat();
                    return;
                case "priority":
                    this.priority = value.GetValueAsInt32();
                    return;
                case "debugMode":
                    this.debugMode = (TppLightProbe_DebugMode)value.GetValueAsInt32();
                    return;
                case "drawRejectionLevel":
                    this.drawRejectionLevel = (TppLightProbe_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "shapeType":
                    this.shapeType = (TppLightProbe_ShapeType)value.GetValueAsInt32();
                    return;
                case "exposure":
                    this.exposure = value.GetValueAsFloat();
                    return;
                case "localFlags":
                    this.localFlags = value.GetValueAsUInt32();
                    return;
                case "occlusionModeOpenRate":
                    this.occlusionModeOpenRate = value.GetValueAsFloat();
                    return;
                case "enable24hSH":
                    this.enable24hSH = value.GetValueAsBool();
                    return;
                case "enableWeatherSH":
                    this.enableWeatherSH = value.GetValueAsBool();
                    return;
                case "enableRelatedLightSH":
                    this.enableRelatedLightSH = value.GetValueAsBool();
                    return;
                case "enableOcclusionMode":
                    this.enableOcclusionMode = value.GetValueAsBool();
                    return;
                case "packingGeneration":
                    this.packingGeneration = (TppLightProbe_PackingGeneration)value.GetValueAsInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "onLights":
                    while(this.onLights.Count <= index) { this.onLights.Add(default(EntityLink)); }
                    this.onLights[index] = value.GetValueAsEntityLink();
                    return;
                case "offLights":
                    while(this.offLights.Count <= index) { this.offLights.Add(default(EntityLink)); }
                    this.offLights[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}