//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppMuddledFilterParam 
    {
        // Properties
        public float sphereRadiusMin { get; set; }
        
        public float sphereRadiusMax { get; set; }
        
        public float headRadiusMin { get; set; }
        
        public float headRadiusMax { get; set; }
        
        public float sinCurveAmplitude { get; set; }
        
        public float sinCurveLength { get; set; }
        
        public float moveSpeedMin { get; set; }
        
        public float moveSpeedMax { get; set; }
        
        public float power { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppMuddledFilterParam()
        {
            classInfo = new EntityInfo(new String("TppMuddledFilterParam"), null, 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("sphereRadiusMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sphereRadiusMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 4, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("headRadiusMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 8, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("headRadiusMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 12, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sinCurveAmplitude"), new PropertyInfo(PropertyInfo.PropertyType.Float, 16, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sinCurveLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 20, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("moveSpeedMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 24, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("moveSpeedMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 28, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("power"), new PropertyInfo(PropertyInfo.PropertyType.Float, 32, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		
        
        public virtual void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "sphereRadiusMin":
                    this.sphereRadiusMin = value.GetValueAsFloat();
                    return;
                case "sphereRadiusMax":
                    this.sphereRadiusMax = value.GetValueAsFloat();
                    return;
                case "headRadiusMin":
                    this.headRadiusMin = value.GetValueAsFloat();
                    return;
                case "headRadiusMax":
                    this.headRadiusMax = value.GetValueAsFloat();
                    return;
                case "sinCurveAmplitude":
                    this.sinCurveAmplitude = value.GetValueAsFloat();
                    return;
                case "sinCurveLength":
                    this.sinCurveLength = value.GetValueAsFloat();
                    return;
                case "moveSpeedMin":
                    this.moveSpeedMin = value.GetValueAsFloat();
                    return;
                case "moveSpeedMax":
                    this.moveSpeedMax = value.GetValueAsFloat();
                    return;
                case "power":
                    this.power = value.GetValueAsFloat();
                    return;
                default:
				    
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
        
        public virtual void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
        
        public virtual void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
    }
}