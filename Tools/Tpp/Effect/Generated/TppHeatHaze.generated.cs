//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
    [UnityEditor.InitializeOnLoad]
    public partial class TppHeatHaze : Fox.Core.Data 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        public float distortionIntensityFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float distortionVelocityFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float distortionTextureRepetitionFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeMirageIntensityFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeStartDistanceFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeEndDistanceFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeRangeAttenuationFullResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeSecondLayerIntensityDifference { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeSecondLayerStartDistance { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeSecondLayerBlurRadius { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeDistortionIntensityAddedOnBinoculars { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageColorSaturation { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageSpreadingPower { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageRayLength { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageHitRange { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageStartDistance { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float mirageRangeAttenuation { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float distortionIntensityHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float distortionVelocityHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float distortionTextureRepetitionHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeIntensityHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeStartDistanceHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeEndDistanceHalfResolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float hazeRangeAttenuationHalfResolution { get; set; }
        
        // ClassInfos
        public static new bool ClassInfoInitialized = false;
        private static Fox.Core.EntityInfo classInfo;
        public static new Fox.Core.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.Core.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppHeatHaze()
        {
            if (Fox.Core.Data.ClassInfoInitialized)
                classInfo = new Fox.Core.EntityInfo(new Fox.Kernel.String("TppHeatHaze"), typeof(TppHeatHaze), Fox.Core.Data.ClassInfo, 160, null, 1);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionIntensityFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 120, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionVelocityFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 124, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionTextureRepetitionFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 128, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeMirageIntensityFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 132, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeStartDistanceFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 136, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeEndDistanceFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 140, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeRangeAttenuationFullResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 144, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeSecondLayerIntensityDifference"), Fox.Core.PropertyInfo.PropertyType.Float, 148, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeSecondLayerStartDistance"), Fox.Core.PropertyInfo.PropertyType.Float, 152, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeSecondLayerBlurRadius"), Fox.Core.PropertyInfo.PropertyType.Float, 156, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeDistortionIntensityAddedOnBinoculars"), Fox.Core.PropertyInfo.PropertyType.Float, 160, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageColorSaturation"), Fox.Core.PropertyInfo.PropertyType.Float, 164, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageSpreadingPower"), Fox.Core.PropertyInfo.PropertyType.Float, 168, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageRayLength"), Fox.Core.PropertyInfo.PropertyType.Float, 172, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageHitRange"), Fox.Core.PropertyInfo.PropertyType.Float, 176, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageStartDistance"), Fox.Core.PropertyInfo.PropertyType.Float, 180, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("mirageRangeAttenuation"), Fox.Core.PropertyInfo.PropertyType.Float, 184, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionIntensityHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 188, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionVelocityHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 192, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("distortionTextureRepetitionHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 196, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeIntensityHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 200, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeStartDistanceHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 204, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeEndDistanceHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 208, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("hazeRangeAttenuationHalfResolution"), Fox.Core.PropertyInfo.PropertyType.Float, 212, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));

            ClassInfoInitialized = true;
        }

        // Constructors
		public TppHeatHaze(ulong id) : base(id) { }
		public TppHeatHaze() : base() { }
        
        public override void SetProperty(Fox.Kernel.String propertyName, Fox.Core.Value value)
        {
            switch(propertyName.CString)
            {
                case "distortionIntensityFullResolution":
                    this.distortionIntensityFullResolution = value.GetValueAsFloat();
                    return;
                case "distortionVelocityFullResolution":
                    this.distortionVelocityFullResolution = value.GetValueAsFloat();
                    return;
                case "distortionTextureRepetitionFullResolution":
                    this.distortionTextureRepetitionFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeMirageIntensityFullResolution":
                    this.hazeMirageIntensityFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeStartDistanceFullResolution":
                    this.hazeStartDistanceFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeEndDistanceFullResolution":
                    this.hazeEndDistanceFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeRangeAttenuationFullResolution":
                    this.hazeRangeAttenuationFullResolution = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerIntensityDifference":
                    this.hazeSecondLayerIntensityDifference = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerStartDistance":
                    this.hazeSecondLayerStartDistance = value.GetValueAsFloat();
                    return;
                case "hazeSecondLayerBlurRadius":
                    this.hazeSecondLayerBlurRadius = value.GetValueAsFloat();
                    return;
                case "hazeDistortionIntensityAddedOnBinoculars":
                    this.hazeDistortionIntensityAddedOnBinoculars = value.GetValueAsFloat();
                    return;
                case "mirageColorSaturation":
                    this.mirageColorSaturation = value.GetValueAsFloat();
                    return;
                case "mirageSpreadingPower":
                    this.mirageSpreadingPower = value.GetValueAsFloat();
                    return;
                case "mirageRayLength":
                    this.mirageRayLength = value.GetValueAsFloat();
                    return;
                case "mirageHitRange":
                    this.mirageHitRange = value.GetValueAsFloat();
                    return;
                case "mirageStartDistance":
                    this.mirageStartDistance = value.GetValueAsFloat();
                    return;
                case "mirageRangeAttenuation":
                    this.mirageRangeAttenuation = value.GetValueAsFloat();
                    return;
                case "distortionIntensityHalfResolution":
                    this.distortionIntensityHalfResolution = value.GetValueAsFloat();
                    return;
                case "distortionVelocityHalfResolution":
                    this.distortionVelocityHalfResolution = value.GetValueAsFloat();
                    return;
                case "distortionTextureRepetitionHalfResolution":
                    this.distortionTextureRepetitionHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeIntensityHalfResolution":
                    this.hazeIntensityHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeStartDistanceHalfResolution":
                    this.hazeStartDistanceHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeEndDistanceHalfResolution":
                    this.hazeEndDistanceHalfResolution = value.GetValueAsFloat();
                    return;
                case "hazeRangeAttenuationHalfResolution":
                    this.hazeRangeAttenuationHalfResolution = value.GetValueAsFloat();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(Fox.Kernel.String propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName.CString)
            {
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(Fox.Kernel.String propertyName, Fox.Kernel.String key, Fox.Core.Value value)
        {
            switch(propertyName.CString)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}