//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppLensFlareField : Fox.Core.Data 
    {
        // Properties
        public TppLensFlareFieldShapeType shapeType { get; set; }
        
        public TppLensFlareFieldInterpType interpType { get; set; }
        
        public bool debugDrawFlag { get; set; }
        
        public Color debugDrawColor { get; set; }
        
        public float innerScale { get; set; }
        
        public float centerScale { get; set; }
        
        public float outerScale { get; set; }
        
        public float innerValue { get; set; }
        
        public float centerValue { get; set; }
        
        public float outerValue { get; set; }
        
        public bool reverse { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppLensFlareField()
        {
            classInfo = new EntityInfo(new String("TppLensFlareField"), base.GetClassEntityInfo(), 144, null, 2);
			
			classInfo.StaticProperties.Insert(new String("shapeType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLensFlareFieldShapeType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("interpType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLensFlareFieldInterpType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debugDrawFlag"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("debugDrawColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("centerScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outerScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("innerValue"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("centerValue"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("outerValue"), new PropertyInfo(PropertyInfo.PropertyType.Float, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("reverse"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppLensFlareField(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "shapeType":
                    this.shapeType = (TppLensFlareFieldShapeType)value.GetValueAsInt32();
                    return;
                case "interpType":
                    this.interpType = (TppLensFlareFieldInterpType)value.GetValueAsInt32();
                    return;
                case "debugDrawFlag":
                    this.debugDrawFlag = value.GetValueAsBool();
                    return;
                case "debugDrawColor":
                    this.debugDrawColor = value.GetValueAsColor();
                    return;
                case "innerScale":
                    this.innerScale = value.GetValueAsFloat();
                    return;
                case "centerScale":
                    this.centerScale = value.GetValueAsFloat();
                    return;
                case "outerScale":
                    this.outerScale = value.GetValueAsFloat();
                    return;
                case "innerValue":
                    this.innerValue = value.GetValueAsFloat();
                    return;
                case "centerValue":
                    this.centerValue = value.GetValueAsFloat();
                    return;
                case "outerValue":
                    this.outerValue = value.GetValueAsFloat();
                    return;
                case "reverse":
                    this.reverse = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}