//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppWaterDropsOnCameraLens : Fox.Core.Data 
    {
        // Properties
        public Path diffulseTexture { get; set; }
        
        public Path normalTexture { get; set; }
        
        public float sizeMin { get; set; }
        
        public float sizeMax { get; set; }
        
        public float lifeMin { get; set; }
        
        public float lifeMax { get; set; }
        
        public float angleAppear { get; set; }
        
        public float angleMax { get; set; }
        
        public float waitMin { get; set; }
        
        public float waitMax { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppWaterDropsOnCameraLens()
        {
            classInfo = new EntityInfo(new String("TppWaterDropsOnCameraLens"), base.GetClassEntityInfo(), 112, null, 1);
			
			classInfo.StaticProperties.Insert(new String("diffulseTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalTexture"), new PropertyInfo(PropertyInfo.PropertyType.Path, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sizeMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sizeMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lifeMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lifeMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("angleAppear"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("angleMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waitMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("waitMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppWaterDropsOnCameraLens(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "diffulseTexture":
                    this.diffulseTexture = value.GetValueAsPath();
                    return;
                case "normalTexture":
                    this.normalTexture = value.GetValueAsPath();
                    return;
                case "sizeMin":
                    this.sizeMin = value.GetValueAsFloat();
                    return;
                case "sizeMax":
                    this.sizeMax = value.GetValueAsFloat();
                    return;
                case "lifeMin":
                    this.lifeMin = value.GetValueAsFloat();
                    return;
                case "lifeMax":
                    this.lifeMax = value.GetValueAsFloat();
                    return;
                case "angleAppear":
                    this.angleAppear = value.GetValueAsFloat();
                    return;
                case "angleMax":
                    this.angleMax = value.GetValueAsFloat();
                    return;
                case "waitMin":
                    this.waitMin = value.GetValueAsFloat();
                    return;
                case "waitMax":
                    this.waitMax = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}