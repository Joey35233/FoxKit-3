//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppLightProbeArray : Fox.Core.TransformData 
    {
        // Properties
        public System.Collections.Generic.IList<TppLightProbeArray_DrawRejectionLevel> drawRejectionLevels { get; } = new System.Collections.Generic.List<TppLightProbeArray_DrawRejectionLevel>();
        
        public System.Collections.Generic.IList<EntityLink> relatedLights { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public System.Collections.Generic.IList<EntityLink> shDatas { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public FilePtr<File> lightArrayFile { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppLightProbeArray()
        {
            classInfo = new EntityInfo(new String("TppLightProbeArray"), base.GetClassEntityInfo(), 336, "Light", 2);
			
			classInfo.StaticProperties.Insert(new String("drawRejectionLevels"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 304, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbeArray_DrawRejectionLevel), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("relatedLights"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 320, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("shDatas"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 336, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lightArrayFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppLightProbeArray(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "lightArrayFile":
                    this.lightArrayFile = value.GetValueAsFilePtr();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "drawRejectionLevels":
                    while(this.drawRejectionLevels.Count <= index) { this.drawRejectionLevels.Add(default(TppLightProbeArray_DrawRejectionLevel)); }
                    this.drawRejectionLevels[index] = (TppLightProbeArray_DrawRejectionLevel)value.GetValueAsInt32();
                    return;
                case "relatedLights":
                    while(this.relatedLights.Count <= index) { this.relatedLights.Add(default(EntityLink)); }
                    this.relatedLights[index] = value.GetValueAsEntityLink();
                    return;
                case "shDatas":
                    while(this.shDatas.Count <= index) { this.shDatas.Add(default(EntityLink)); }
                    this.shDatas[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}