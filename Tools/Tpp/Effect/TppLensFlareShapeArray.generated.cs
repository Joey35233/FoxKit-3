//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppLensFlareShapeArray : Tpp.Effect.TppLensFlareShape 
    {
        // Properties
        public uint spriteCount { get; set; }
        
        public float offsetScaleMin { get; set; }
        
        public float offsetScaleMax { get; set; }
        
        public float sizeScaleMin { get; set; }
        
        public float sizeScaleMax { get; set; }
        
        public Color randomColorMin { get; set; }
        
        public Color randomColorMax { get; set; }
        
        public uint randomSeed { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppLensFlareShapeArray()
        {
            classInfo = new EntityInfo(new String("TppLensFlareShapeArray"), base.GetClassEntityInfo(), 768, null, 0);
			
			classInfo.StaticProperties.Insert(new String("spriteCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 816, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offsetScaleMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 820, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offsetScaleMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 824, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sizeScaleMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 828, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("sizeScaleMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 832, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("randomColorMin"), new PropertyInfo(PropertyInfo.PropertyType.Color, 848, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("randomColorMax"), new PropertyInfo(PropertyInfo.PropertyType.Color, 864, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("randomSeed"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 880, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppLensFlareShapeArray(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "spriteCount":
                    this.spriteCount = value.GetValueAsUInt32();
                    return;
                case "offsetScaleMin":
                    this.offsetScaleMin = value.GetValueAsFloat();
                    return;
                case "offsetScaleMax":
                    this.offsetScaleMax = value.GetValueAsFloat();
                    return;
                case "sizeScaleMin":
                    this.sizeScaleMin = value.GetValueAsFloat();
                    return;
                case "sizeScaleMax":
                    this.sizeScaleMax = value.GetValueAsFloat();
                    return;
                case "randomColorMin":
                    this.randomColorMin = value.GetValueAsColor();
                    return;
                case "randomColorMax":
                    this.randomColorMax = value.GetValueAsColor();
                    return;
                case "randomSeed":
                    this.randomSeed = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}