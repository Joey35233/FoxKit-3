//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppRainFilter : Fox.Core.Data 
    {
        // Properties
        public bool enable { get; set; }
        
        public float startFadeInDistance { get; set; }
        
        public float endFadeInDistance { get; set; }
        
        public float startFadeOutDistance { get; set; }
        
        public float endFadeOutDistance { get; set; }
        
        public float albedoExtinctionRatio { get; set; }
        
        public float roughnessExtinctionCoefficient { get; set; }
        
        public float roughnessEffectiveThreshold { get; set; }
        
        public float LABDiffuseScale { get; set; }
        
        public float LABDiffuseAdd { get; set; }
        
        public float floorTexScale { get; set; }
        
        public float wallTexScale0 { get; set; }
        
        public float wallTexScale1 { get; set; }
        
        public System.Numerics.Vector4 wallTexSpeed { get; set; }
        
        public float maskTexScale0 { get; set; }
        
        public float maskTexScale1 { get; set; }
        
        public System.Numerics.Vector4 maskTexSpeed { get; set; }
        
        public Color rainColor { get; set; }
        
        public float windScale { get; set; }
        
        public float wallAlphaRate { get; set; }
        
        public Path normalWallTexPath { get; set; }
        
        public Path normalFloorTexPath { get; set; }
        
        public Path reflectionCubeMapTexPath { get; set; }
        
        public Path maskTexPath { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppRainFilter()
        {
            classInfo = new EntityInfo(new String("TppRainFilter"), base.GetClassEntityInfo(), 224, null, 2);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startFadeInDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 236, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("endFadeInDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("startFadeOutDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 244, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("endFadeOutDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("albedoExtinctionRatio"), new PropertyInfo(PropertyInfo.PropertyType.Float, 252, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("roughnessExtinctionCoefficient"), new PropertyInfo(PropertyInfo.PropertyType.Float, 260, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("roughnessEffectiveThreshold"), new PropertyInfo(PropertyInfo.PropertyType.Float, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("LABDiffuseScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("LABDiffuseAdd"), new PropertyInfo(PropertyInfo.PropertyType.Float, 268, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("floorTexScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wallTexScale0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wallTexScale1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 228, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wallTexSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Vector4, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maskTexScale0"), new PropertyInfo(PropertyInfo.PropertyType.Float, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maskTexScale1"), new PropertyInfo(PropertyInfo.PropertyType.Float, 220, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maskTexSpeed"), new PropertyInfo(PropertyInfo.PropertyType.Vector4, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rainColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("wallAlphaRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 212, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalWallTexPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("normalFloorTexPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("reflectionCubeMapTexPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maskTexPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 200, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppRainFilter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "startFadeInDistance":
                    this.startFadeInDistance = value.GetValueAsFloat();
                    return;
                case "endFadeInDistance":
                    this.endFadeInDistance = value.GetValueAsFloat();
                    return;
                case "startFadeOutDistance":
                    this.startFadeOutDistance = value.GetValueAsFloat();
                    return;
                case "endFadeOutDistance":
                    this.endFadeOutDistance = value.GetValueAsFloat();
                    return;
                case "albedoExtinctionRatio":
                    this.albedoExtinctionRatio = value.GetValueAsFloat();
                    return;
                case "roughnessExtinctionCoefficient":
                    this.roughnessExtinctionCoefficient = value.GetValueAsFloat();
                    return;
                case "roughnessEffectiveThreshold":
                    this.roughnessEffectiveThreshold = value.GetValueAsFloat();
                    return;
                case "LABDiffuseScale":
                    this.LABDiffuseScale = value.GetValueAsFloat();
                    return;
                case "LABDiffuseAdd":
                    this.LABDiffuseAdd = value.GetValueAsFloat();
                    return;
                case "floorTexScale":
                    this.floorTexScale = value.GetValueAsFloat();
                    return;
                case "wallTexScale0":
                    this.wallTexScale0 = value.GetValueAsFloat();
                    return;
                case "wallTexScale1":
                    this.wallTexScale1 = value.GetValueAsFloat();
                    return;
                case "wallTexSpeed":
                    this.wallTexSpeed = value.GetValueAsVector4();
                    return;
                case "maskTexScale0":
                    this.maskTexScale0 = value.GetValueAsFloat();
                    return;
                case "maskTexScale1":
                    this.maskTexScale1 = value.GetValueAsFloat();
                    return;
                case "maskTexSpeed":
                    this.maskTexSpeed = value.GetValueAsVector4();
                    return;
                case "rainColor":
                    this.rainColor = value.GetValueAsColor();
                    return;
                case "windScale":
                    this.windScale = value.GetValueAsFloat();
                    return;
                case "wallAlphaRate":
                    this.wallAlphaRate = value.GetValueAsFloat();
                    return;
                case "normalWallTexPath":
                    this.normalWallTexPath = value.GetValueAsPath();
                    return;
                case "normalFloorTexPath":
                    this.normalFloorTexPath = value.GetValueAsPath();
                    return;
                case "reflectionCubeMapTexPath":
                    this.reflectionCubeMapTexPath = value.GetValueAsPath();
                    return;
                case "maskTexPath":
                    this.maskTexPath = value.GetValueAsPath();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}