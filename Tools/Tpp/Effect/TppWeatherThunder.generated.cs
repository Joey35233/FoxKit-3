//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppWeatherThunder : Fox.Core.Data 
    {
        // Properties
        public bool enable { get; set; }
        
        public Color color { get; set; }
        
        public float probability { get; set; }
        
        public float powerScale { get; set; }
        
        public float decaySpeed { get; set; }
        
        public FilePtr<File> vfxFileStrong { get; set; }
        
        public FilePtr<File> vfxFileNormal { get; set; }
        
        public FilePtr<File> vfxFileWeak { get; set; }
        
        public float fxThresholdStrong { get; set; }
        
        public float fxThresholdNormal { get; set; }
        
        public float fxThresholdWeak { get; set; }
        
        public bool enableSpotLight { get; set; }
        
        public float spotLightLifeMin { get; set; }
        
        public float spotLightLifeMax { get; set; }
        
        public float spotLightLumen { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppWeatherThunder()
        {
            classInfo = new EntityInfo(new String("TppWeatherThunder"), base.GetClassEntityInfo(), 0, "TppEffect", 4);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 253, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("color"), new PropertyInfo(PropertyInfo.PropertyType.Color, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("probability"), new PropertyInfo(PropertyInfo.PropertyType.Float, 228, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("powerScale"), new PropertyInfo(PropertyInfo.PropertyType.Float, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("decaySpeed"), new PropertyInfo(PropertyInfo.PropertyType.Float, 236, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileStrong"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileNormal"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFileWeak"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 192, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fxThresholdStrong"), new PropertyInfo(PropertyInfo.PropertyType.Float, 216, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fxThresholdNormal"), new PropertyInfo(PropertyInfo.PropertyType.Float, 220, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fxThresholdWeak"), new PropertyInfo(PropertyInfo.PropertyType.Float, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("enableSpotLight"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 252, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("spotLightLifeMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 240, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("spotLightLifeMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 244, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("spotLightLumen"), new PropertyInfo(PropertyInfo.PropertyType.Float, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppWeatherThunder(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "color":
                    this.color = value.GetValueAsColor();
                    return;
                case "probability":
                    this.probability = value.GetValueAsFloat();
                    return;
                case "powerScale":
                    this.powerScale = value.GetValueAsFloat();
                    return;
                case "decaySpeed":
                    this.decaySpeed = value.GetValueAsFloat();
                    return;
                case "vfxFileStrong":
                    this.vfxFileStrong = value.GetValueAsFilePtr();
                    return;
                case "vfxFileNormal":
                    this.vfxFileNormal = value.GetValueAsFilePtr();
                    return;
                case "vfxFileWeak":
                    this.vfxFileWeak = value.GetValueAsFilePtr();
                    return;
                case "fxThresholdStrong":
                    this.fxThresholdStrong = value.GetValueAsFloat();
                    return;
                case "fxThresholdNormal":
                    this.fxThresholdNormal = value.GetValueAsFloat();
                    return;
                case "fxThresholdWeak":
                    this.fxThresholdWeak = value.GetValueAsFloat();
                    return;
                case "enableSpotLight":
                    this.enableSpotLight = value.GetValueAsBool();
                    return;
                case "spotLightLifeMin":
                    this.spotLightLifeMin = value.GetValueAsFloat();
                    return;
                case "spotLightLifeMax":
                    this.spotLightLifeMax = value.GetValueAsFloat();
                    return;
                case "spotLightLumen":
                    this.spotLightLumen = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}