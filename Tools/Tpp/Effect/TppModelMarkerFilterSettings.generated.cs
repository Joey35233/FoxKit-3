//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppModelMarkerFilterSettings : Fox.Core.Data 
    {
        // Properties
        public float texRepeatsNear { get; set; }
        
        public float texRepeatsFar { get; set; }
        
        public float texRepeatsMin { get; set; }
        
        public float texRepeatsMax { get; set; }
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> alphas { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> offsets { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Collections.Generic.IList<System.Numerics.Vector3> incidences { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppModelMarkerFilterSettings()
        {
            classInfo = new EntityInfo(new String("TppModelMarkerFilterSettings"), base.GetClassEntityInfo(), 128, "TppEffect", 0);
			
			classInfo.StaticProperties.Insert(new String("texRepeatsNear"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("texRepeatsFar"), new PropertyInfo(PropertyInfo.PropertyType.Float, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("texRepeatsMin"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("texRepeatsMax"), new PropertyInfo(PropertyInfo.PropertyType.Float, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("alphas"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offsets"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("incidences"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 152, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppModelMarkerFilterSettings(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "texRepeatsNear":
                    this.texRepeatsNear = value.GetValueAsFloat();
                    return;
                case "texRepeatsFar":
                    this.texRepeatsFar = value.GetValueAsFloat();
                    return;
                case "texRepeatsMin":
                    this.texRepeatsMin = value.GetValueAsFloat();
                    return;
                case "texRepeatsMax":
                    this.texRepeatsMax = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "alphas":
                    while(this.alphas.Count <= index) { this.alphas.Add(default(System.Numerics.Vector3)); }
                    this.alphas[index] = value.GetValueAsVector3();
                    return;
                case "offsets":
                    while(this.offsets.Count <= index) { this.offsets.Add(default(System.Numerics.Vector3)); }
                    this.offsets[index] = value.GetValueAsVector3();
                    return;
                case "incidences":
                    while(this.incidences.Count <= index) { this.incidences.Add(default(System.Numerics.Vector3)); }
                    this.incidences[index] = value.GetValueAsVector3();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}