//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppDamageFilterParam : Fox.Core.TransformData 
    {
        // Properties
        public Color burnOutsideColor { get; set; }
        
        public Color burnMiddleColor { get; set; }
        
        public Color burnInsideColor { get; set; }
        
        public Color burnHoleColor { get; set; }
        
        public float burnSpriteSize { get; set; }
        
        public float burnSpritePosition { get; set; }
        
        public String damageColorCorrectionTextureName { get; set; }
        
        public String injuryColorCorrectionTextureName { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppDamageFilterParam()
        {
            classInfo = new EntityInfo(new String("TppDamageFilterParam"), base.GetClassEntityInfo(), 336, null, 0);
			
			classInfo.StaticProperties.Insert(new String("burnOutsideColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("burnMiddleColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 320, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("burnInsideColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 336, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("burnHoleColor"), new PropertyInfo(PropertyInfo.PropertyType.Color, 352, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("burnSpriteSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 368, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("burnSpritePosition"), new PropertyInfo(PropertyInfo.PropertyType.Float, 372, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("damageColorCorrectionTextureName"), new PropertyInfo(PropertyInfo.PropertyType.String, 376, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("injuryColorCorrectionTextureName"), new PropertyInfo(PropertyInfo.PropertyType.String, 384, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppDamageFilterParam(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "burnOutsideColor":
                    this.burnOutsideColor = value.GetValueAsColor();
                    return;
                case "burnMiddleColor":
                    this.burnMiddleColor = value.GetValueAsColor();
                    return;
                case "burnInsideColor":
                    this.burnInsideColor = value.GetValueAsColor();
                    return;
                case "burnHoleColor":
                    this.burnHoleColor = value.GetValueAsColor();
                    return;
                case "burnSpriteSize":
                    this.burnSpriteSize = value.GetValueAsFloat();
                    return;
                case "burnSpritePosition":
                    this.burnSpritePosition = value.GetValueAsFloat();
                    return;
                case "damageColorCorrectionTextureName":
                    this.damageColorCorrectionTextureName = value.GetValueAsString();
                    return;
                case "injuryColorCorrectionTextureName":
                    this.injuryColorCorrectionTextureName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}