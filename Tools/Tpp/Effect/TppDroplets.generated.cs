//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Effect
{
    public partial class TppDroplets : Fox.Core.Data 
    {
        // Properties
        public float timeBetweenNewDroplets { get; set; }
        
        public float timeBetweenNewBigDroplets { get; set; }
        
        public float timeBetweenTwoNewBigDropletsAtTheSameTime { get; set; }
        
        public float dropletsSize { get; set; }
        
        public float dropletsVelocity { get; set; }
        
        public float dropletsTransparency { get; set; }
        
        public float minimumMassToStartMoving { get; set; }
        
        public float minimumVelocityToAdvance { get; set; }
        
        public float remainingMassPropotionWhenDropletsMove { get; set; }
        
        public float residualWaterMinimumRenderingRadius { get; set; }
        
        public float residualWaterMaximumRenderingRadius { get; set; }
        
        public float residualWaterMaximumIntensity { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppDroplets()
        {
            classInfo = new EntityInfo(new String("TppDroplets"), base.GetClassEntityInfo(), 112, null, 0);
			
			classInfo.StaticProperties.Insert(new String("timeBetweenNewDroplets"), new PropertyInfo(PropertyInfo.PropertyType.Float, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("timeBetweenNewBigDroplets"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("timeBetweenTwoNewBigDropletsAtTheSameTime"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dropletsSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dropletsVelocity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("dropletsTransparency"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minimumMassToStartMoving"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minimumVelocityToAdvance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("remainingMassPropotionWhenDropletsMove"), new PropertyInfo(PropertyInfo.PropertyType.Float, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("residualWaterMinimumRenderingRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("residualWaterMaximumRenderingRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("residualWaterMaximumIntensity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppDroplets(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "timeBetweenNewDroplets":
                    this.timeBetweenNewDroplets = value.GetValueAsFloat();
                    return;
                case "timeBetweenNewBigDroplets":
                    this.timeBetweenNewBigDroplets = value.GetValueAsFloat();
                    return;
                case "timeBetweenTwoNewBigDropletsAtTheSameTime":
                    this.timeBetweenTwoNewBigDropletsAtTheSameTime = value.GetValueAsFloat();
                    return;
                case "dropletsSize":
                    this.dropletsSize = value.GetValueAsFloat();
                    return;
                case "dropletsVelocity":
                    this.dropletsVelocity = value.GetValueAsFloat();
                    return;
                case "dropletsTransparency":
                    this.dropletsTransparency = value.GetValueAsFloat();
                    return;
                case "minimumMassToStartMoving":
                    this.minimumMassToStartMoving = value.GetValueAsFloat();
                    return;
                case "minimumVelocityToAdvance":
                    this.minimumVelocityToAdvance = value.GetValueAsFloat();
                    return;
                case "remainingMassPropotionWhenDropletsMove":
                    this.remainingMassPropotionWhenDropletsMove = value.GetValueAsFloat();
                    return;
                case "residualWaterMinimumRenderingRadius":
                    this.residualWaterMinimumRenderingRadius = value.GetValueAsFloat();
                    return;
                case "residualWaterMaximumRenderingRadius":
                    this.residualWaterMaximumRenderingRadius = value.GetValueAsFloat();
                    return;
                case "residualWaterMaximumIntensity":
                    this.residualWaterMaximumIntensity = value.GetValueAsFloat();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}