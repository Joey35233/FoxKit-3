//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.MotherBaseCore
{
    public partial class MotherBaseConstructLocator : Fox.Core.TransformData 
    {
        // Properties
        public int type { get; set; }
        
        public ushort index { get; set; }
        
        public byte clusterId { get; set; }
        
        public bool isLowModel { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> staticModels { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static MotherBaseConstructLocator()
        {
            classInfo = new EntityInfo(new String("MotherBaseConstructLocator"), base.GetClassEntityInfo(), 288, "TppMotherBase", 2);
			
			classInfo.StaticProperties.Insert(new String("type"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("index"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("clusterId"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 310, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isLowModel"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 311, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("staticModels"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 312, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public MotherBaseConstructLocator(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "type":
                    this.type = value.GetValueAsInt32();
                    return;
                case "index":
                    this.index = value.GetValueAsUInt16();
                    return;
                case "clusterId":
                    this.clusterId = value.GetValueAsUInt8();
                    return;
                case "isLowModel":
                    this.isLowModel = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "staticModels":
                    while(this.staticModels.Count <= index) { this.staticModels.Add(default(EntityLink)); }
                    this.staticModels[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}