//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class TppPermanentGimmickMachineGunParameter : Fox.Core.DataElement 
    {
        // Properties
        public float maxYAxisAngle { get; set; }
        
        public float minYAxisAngle { get; set; }
        
        public float maxXAxisAngle { get; set; }
        
        public float minXAxisAngle { get; set; }
        
        public FilePtr<File> weaponPartsFile { get; set; }
        
        public uint flags1 { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPermanentGimmickMachineGunParameter()
        {
            classInfo = new EntityInfo(new String("TppPermanentGimmickMachineGunParameter"), base.GetClassEntityInfo(), 80, null, 1);
			
			classInfo.StaticProperties.Insert(new String("maxYAxisAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minYAxisAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 60, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxXAxisAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minXAxisAngle"), new PropertyInfo(PropertyInfo.PropertyType.Float, 68, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("weaponPartsFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("flags1"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorOnly, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppPermanentGimmickMachineGunParameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "maxYAxisAngle":
                    this.maxYAxisAngle = value.GetValueAsFloat();
                    return;
                case "minYAxisAngle":
                    this.minYAxisAngle = value.GetValueAsFloat();
                    return;
                case "maxXAxisAngle":
                    this.maxXAxisAngle = value.GetValueAsFloat();
                    return;
                case "minXAxisAngle":
                    this.minXAxisAngle = value.GetValueAsFloat();
                    return;
                case "weaponPartsFile":
                    this.weaponPartsFile = value.GetValueAsFilePtr();
                    return;
                case "flags1":
                    this.flags1 = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}