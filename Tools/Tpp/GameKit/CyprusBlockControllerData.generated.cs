//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class CyprusBlockControllerData : Fox.Core.Data 
    {
        // Properties
        public bool enable { get; set; }
        
        public String stageName { get; set; }
        
        public Path commonFilePath { get; set; }
        
        public String basePath { get; set; }
        
        public uint commonBlockSizeInByte { get; set; }
        
        public uint largeStageBlockSizeInByte { get; set; }
        
        public uint smallStageBlockCount { get; set; }
        
        public uint smallStageBlockSizeInByte { get; set; }
        
        public uint largeMissionBlockSizeInByte { get; set; }
        
        public uint smallMissionBlockCount { get; set; }
        
        public uint smallMissionBlockSizeInByte { get; set; }
        
        public uint demoBlockCount { get; set; }
        
        public uint demoBlockSizeInByte { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static CyprusBlockControllerData()
        {
            classInfo = new EntityInfo(new String("CyprusBlockControllerData"), base.GetClassEntityInfo(), 120, null, 5);
			
			classInfo.StaticProperties.Insert(new String("enable"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stageName"), new PropertyInfo(PropertyInfo.PropertyType.String, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("commonFilePath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("basePath"), new PropertyInfo(PropertyInfo.PropertyType.String, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("commonBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("largeStageBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 156, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smallStageBlockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smallStageBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("largeMissionBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smallMissionBlockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("smallMissionBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoBlockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 180, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("demoBlockSizeInByte"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public CyprusBlockControllerData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "stageName":
                    this.stageName = value.GetValueAsString();
                    return;
                case "commonFilePath":
                    this.commonFilePath = value.GetValueAsPath();
                    return;
                case "basePath":
                    this.basePath = value.GetValueAsString();
                    return;
                case "commonBlockSizeInByte":
                    this.commonBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                case "largeStageBlockSizeInByte":
                    this.largeStageBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                case "smallStageBlockCount":
                    this.smallStageBlockCount = value.GetValueAsUInt32();
                    return;
                case "smallStageBlockSizeInByte":
                    this.smallStageBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                case "largeMissionBlockSizeInByte":
                    this.largeMissionBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                case "smallMissionBlockCount":
                    this.smallMissionBlockCount = value.GetValueAsUInt32();
                    return;
                case "smallMissionBlockSizeInByte":
                    this.smallMissionBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                case "demoBlockCount":
                    this.demoBlockCount = value.GetValueAsUInt32();
                    return;
                case "demoBlockSizeInByte":
                    this.demoBlockSizeInByte = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}