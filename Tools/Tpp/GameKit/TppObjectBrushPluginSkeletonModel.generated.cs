//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class TppObjectBrushPluginSkeletonModel : Fox.GameKit.ObjectBrushPlugin 
    {
        // Properties
        public System.Collections.Generic.IList<FilePtr<File>> modelFile { get; } = new System.Collections.Generic.List<FilePtr<File>>();
        
        public System.Collections.Generic.IList<FilePtr<File>> geomFile { get; } = new System.Collections.Generic.List<FilePtr<File>>();
        
        public System.Collections.Generic.IList<Path> animFile { get; } = new System.Collections.Generic.List<Path>();
        
        public System.Collections.Generic.IList<Path> animWindyFile { get; } = new System.Collections.Generic.List<Path>();
        
        public FilePtr<File> mtarFile { get; set; }
        
        public String soundSeType { get; set; }
        
        public float minSize { get; set; }
        
        public float maxSize { get; set; }
        
        public bool isGeomActivity { get; set; }
        
        public float thinkOutRate { get; set; }
        
        public float extensionRadius { get; set; }
        
        public uint reserveResourcePlugin { get; set; }
        
        public uint reserveResourcePerBlock { get; set; }
        
        public float[] lodLength { get; } = new float[4];
        
        public float[] lodLengthForHighEnd { get; } = new float[4];
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppObjectBrushPluginSkeletonModel()
        {
            classInfo = new EntityInfo(new String("TppObjectBrushPluginSkeletonModel"), base.GetClassEntityInfo(), 248, null, 7);
			
			classInfo.StaticProperties.Insert(new String("modelFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 144, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("geomFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 160, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("animFile"), new PropertyInfo(PropertyInfo.PropertyType.Path, 176, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("animWindyFile"), new PropertyInfo(PropertyInfo.PropertyType.Path, 192, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("mtarFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 224, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("soundSeType"), new PropertyInfo(PropertyInfo.PropertyType.String, 248, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("minSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 256, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxSize"), new PropertyInfo(PropertyInfo.PropertyType.Float, 260, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isGeomActivity"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 264, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("thinkOutRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 268, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("extensionRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 272, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("reserveResourcePlugin"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 276, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("reserveResourcePerBlock"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 280, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodLength"), new PropertyInfo(PropertyInfo.PropertyType.Float, 284, 4, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodLengthForHighEnd"), new PropertyInfo(PropertyInfo.PropertyType.Float, 300, 4, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppObjectBrushPluginSkeletonModel(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "mtarFile":
                    this.mtarFile = value.GetValueAsFilePtr();
                    return;
                case "soundSeType":
                    this.soundSeType = value.GetValueAsString();
                    return;
                case "minSize":
                    this.minSize = value.GetValueAsFloat();
                    return;
                case "maxSize":
                    this.maxSize = value.GetValueAsFloat();
                    return;
                case "isGeomActivity":
                    this.isGeomActivity = value.GetValueAsBool();
                    return;
                case "thinkOutRate":
                    this.thinkOutRate = value.GetValueAsFloat();
                    return;
                case "extensionRadius":
                    this.extensionRadius = value.GetValueAsFloat();
                    return;
                case "reserveResourcePlugin":
                    this.reserveResourcePlugin = value.GetValueAsUInt32();
                    return;
                case "reserveResourcePerBlock":
                    this.reserveResourcePerBlock = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "modelFile":
                    while(this.modelFile.Count <= index) { this.modelFile.Add(default(FilePtr<File>)); }
                    this.modelFile[index] = value.GetValueAsFilePtr();
                    return;
                case "geomFile":
                    while(this.geomFile.Count <= index) { this.geomFile.Add(default(FilePtr<File>)); }
                    this.geomFile[index] = value.GetValueAsFilePtr();
                    return;
                case "animFile":
                    while(this.animFile.Count <= index) { this.animFile.Add(default(Path)); }
                    this.animFile[index] = value.GetValueAsPath();
                    return;
                case "animWindyFile":
                    while(this.animWindyFile.Count <= index) { this.animWindyFile.Add(default(Path)); }
                    this.animWindyFile[index] = value.GetValueAsPath();
                    return;
                case "lodLength":
                    
                    this.lodLength[index] = value.GetValueAsFloat();
                    return;
                case "lodLengthForHighEnd":
                    
                    this.lodLengthForHighEnd[index] = value.GetValueAsFloat();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}