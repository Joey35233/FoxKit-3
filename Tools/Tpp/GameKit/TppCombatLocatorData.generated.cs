//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class TppCombatLocatorData : Fox.Core.TransformData 
    {
        // Properties
        public float radius { get; set; }
        
        public float lostSearchRadius { get; set; }
        
        public bool isUseWaitPrioirty { get; set; }
        
        public bool isReinforcePoint { get; set; }
        
        public byte memberCount { get; set; }
        
        public byte memberCountFront { get; set; }
        
        public System.Collections.Generic.IList<EntityLink> subLocators { get; } = new System.Collections.Generic.List<EntityLink>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppCombatLocatorData()
        {
            classInfo = new EntityInfo(new String("TppCombatLocatorData"), base.GetClassEntityInfo(), 288, "Locator", 5);
			
			classInfo.StaticProperties.Insert(new String("radius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 304, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lostSearchRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 308, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isUseWaitPrioirty"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 312, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("isReinforcePoint"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 313, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("memberCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 314, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("memberCountFront"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 315, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("subLocators"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 320, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppCombatLocatorData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "radius":
                    this.radius = value.GetValueAsFloat();
                    return;
                case "lostSearchRadius":
                    this.lostSearchRadius = value.GetValueAsFloat();
                    return;
                case "isUseWaitPrioirty":
                    this.isUseWaitPrioirty = value.GetValueAsBool();
                    return;
                case "isReinforcePoint":
                    this.isReinforcePoint = value.GetValueAsBool();
                    return;
                case "memberCount":
                    this.memberCount = value.GetValueAsUInt8();
                    return;
                case "memberCountFront":
                    this.memberCountFront = value.GetValueAsUInt8();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "subLocators":
                    while(this.subLocators.Count <= index) { this.subLocators.Add(default(EntityLink)); }
                    this.subLocators[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}