//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class TppTrapExecEnvironmentMotionCallbackDataElement : Fox.Geo.GeoTrapModuleCallbackDataElement 
    {
        // Properties
        public System.Collections.Generic.IList<EntityLink> targetShapes { get; } = new System.Collections.Generic.List<EntityLink>();
        
        public TppTrapEnvironmentType environmentType { get; set; }
        
        public String environmentTypeString { get; set; }
        
        public String offenseName { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppTrapExecEnvironmentMotionCallbackDataElement()
        {
            classInfo = new EntityInfo(new String("TppTrapExecEnvironmentMotionCallbackDataElement"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("targetShapes"), new PropertyInfo(PropertyInfo.PropertyType.EntityLink, 64, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("environmentType"), new PropertyInfo(PropertyInfo.PropertyType.Int32, 88, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, typeof(TppTrapEnvironmentType), PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("environmentTypeString"), new PropertyInfo(PropertyInfo.PropertyType.String, 96, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("offenseName"), new PropertyInfo(PropertyInfo.PropertyType.String, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppTrapExecEnvironmentMotionCallbackDataElement(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "environmentType":
                    this.environmentType = (TppTrapEnvironmentType)value.GetValueAsInt32();
                    return;
                case "environmentTypeString":
                    this.environmentTypeString = value.GetValueAsString();
                    return;
                case "offenseName":
                    this.offenseName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "targetShapes":
                    while(this.targetShapes.Count <= index) { this.targetShapes.Add(default(EntityLink)); }
                    this.targetShapes[index] = value.GetValueAsEntityLink();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}