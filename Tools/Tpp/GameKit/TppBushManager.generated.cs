//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class TppBushManager : Fox.Core.Entity 
    {
        // Properties
        public uint flag { get; set; }
        
        public uint totalBlockNum { get; set; }
        
        public uint totalUnitNum { get; set; }
        
        public uint maxBlockNum { get; set; }
        
        public uint maxUnitNum { get; set; }
        
        public uint maxTotalBlockNum { get; set; }
        
        public uint maxTotalUnitNum { get; set; }
        
        public float realizeRange { get; set; }
        
        public float windShakeRange { get; set; }
        
        public System.Numerics.Vector3 cameraPos { get; set; }
        
        public System.Collections.Generic.IList<String> existMaterials { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> noiseSeType { get; } = new System.Collections.Generic.List<String>();
        
        public StringMap<String> noiseSeEventNames { get; } = new StringMap<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppBushManager()
        {
            classInfo = new EntityInfo(new String("TppBushManager"), base.GetClassEntityInfo(), 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("flag"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 48, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("totalBlockNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 52, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("totalUnitNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxBlockNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 60, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxUnitNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 64, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxTotalBlockNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 68, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxTotalUnitNum"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 72, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("realizeRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 76, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windShakeRange"), new PropertyInfo(PropertyInfo.PropertyType.Float, 80, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("cameraPos"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("existMaterials"), new PropertyInfo(PropertyInfo.PropertyType.String, 536, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseSeType"), new PropertyInfo(PropertyInfo.PropertyType.String, 552, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseSeEventNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 568, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppBushManager(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "flag":
                    this.flag = value.GetValueAsUInt32();
                    return;
                case "totalBlockNum":
                    this.totalBlockNum = value.GetValueAsUInt32();
                    return;
                case "totalUnitNum":
                    this.totalUnitNum = value.GetValueAsUInt32();
                    return;
                case "maxBlockNum":
                    this.maxBlockNum = value.GetValueAsUInt32();
                    return;
                case "maxUnitNum":
                    this.maxUnitNum = value.GetValueAsUInt32();
                    return;
                case "maxTotalBlockNum":
                    this.maxTotalBlockNum = value.GetValueAsUInt32();
                    return;
                case "maxTotalUnitNum":
                    this.maxTotalUnitNum = value.GetValueAsUInt32();
                    return;
                case "realizeRange":
                    this.realizeRange = value.GetValueAsFloat();
                    return;
                case "windShakeRange":
                    this.windShakeRange = value.GetValueAsFloat();
                    return;
                case "cameraPos":
                    this.cameraPos = value.GetValueAsVector3();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "existMaterials":
                    while(this.existMaterials.Count <= index) { this.existMaterials.Add(default(String)); }
                    this.existMaterials[index] = value.GetValueAsString();
                    return;
                case "noiseSeType":
                    while(this.noiseSeType.Count <= index) { this.noiseSeType.Add(default(String)); }
                    this.noiseSeType[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "noiseSeEventNames":
                    this.noiseSeEventNames.Add(key, value.GetValueAsString());
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}