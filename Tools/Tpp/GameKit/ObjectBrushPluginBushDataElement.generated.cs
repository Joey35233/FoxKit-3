//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameKit
{
    public partial class ObjectBrushPluginBushDataElement : Fox.Core.DataElement 
    {
        // Properties
        public System.Collections.Generic.IList<String> lodMeshName { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<float> lodDistance { get; } = new System.Collections.Generic.List<float>();
        
        public System.Collections.Generic.IList<float> lodDistanceHighEnd { get; } = new System.Collections.Generic.List<float>();
        
        public float rotationRate { get; set; }
        
        public float elasticRate { get; set; }
        
        public float alphaMinimizeDist { get; set; }
        
        public float alphaMaximizeDist { get; set; }
        
        public float baseDensity { get; set; }
        
        public float camoufDensity { get; set; }
        
        public float camofRadius { get; set; }
        
        public float camofHeight { get; set; }
        
        public float modelRadius { get; set; }
        
        public float stopEyeRadius { get; set; }
        
        public float stopEyeHeight { get; set; }
        
        public String noiseSeType { get; set; }
        
        public uint bushFlags { get; set; }
        
        public float baseCycleSpeedRate { get; set; }
        
        public float windAmplitude { get; set; }
        
        public bool windDirYAxisFixZero { get; set; }
        
        public float windOffsetFactor { get; set; }
        
        public FilePtr<File> bulletEffect { get; set; }
        
        public FilePtr<File> fairEffect { get; set; }
        
        public FilePtr<File> rainEffect { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static ObjectBrushPluginBushDataElement()
        {
            classInfo = new EntityInfo(new String("ObjectBrushPluginBushDataElement"), base.GetClassEntityInfo(), 224, null, 20);
			
			classInfo.StaticProperties.Insert(new String("lodMeshName"), new PropertyInfo(PropertyInfo.PropertyType.String, 56, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodDistance"), new PropertyInfo(PropertyInfo.PropertyType.Float, 72, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lodDistanceHighEnd"), new PropertyInfo(PropertyInfo.PropertyType.Float, 88, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotationRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 112, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("elasticRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 116, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("alphaMinimizeDist"), new PropertyInfo(PropertyInfo.PropertyType.Float, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("alphaMaximizeDist"), new PropertyInfo(PropertyInfo.PropertyType.Float, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseDensity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 104, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("camoufDensity"), new PropertyInfo(PropertyInfo.PropertyType.Float, 108, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("camofRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("camofHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("modelRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stopEyeRadius"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("stopEyeHeight"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("noiseSeType"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bushFlags"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorOnly, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseCycleSpeedRate"), new PropertyInfo(PropertyInfo.PropertyType.Float, 164, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windAmplitude"), new PropertyInfo(PropertyInfo.PropertyType.Float, 168, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windDirYAxisFixZero"), new PropertyInfo(PropertyInfo.PropertyType.Bool, 172, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("windOffsetFactor"), new PropertyInfo(PropertyInfo.PropertyType.Float, 176, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("bulletEffect"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 184, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fairEffect"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 208, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rainEffect"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 232, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public ObjectBrushPluginBushDataElement(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "rotationRate":
                    this.rotationRate = value.GetValueAsFloat();
                    return;
                case "elasticRate":
                    this.elasticRate = value.GetValueAsFloat();
                    return;
                case "alphaMinimizeDist":
                    this.alphaMinimizeDist = value.GetValueAsFloat();
                    return;
                case "alphaMaximizeDist":
                    this.alphaMaximizeDist = value.GetValueAsFloat();
                    return;
                case "baseDensity":
                    this.baseDensity = value.GetValueAsFloat();
                    return;
                case "camoufDensity":
                    this.camoufDensity = value.GetValueAsFloat();
                    return;
                case "camofRadius":
                    this.camofRadius = value.GetValueAsFloat();
                    return;
                case "camofHeight":
                    this.camofHeight = value.GetValueAsFloat();
                    return;
                case "modelRadius":
                    this.modelRadius = value.GetValueAsFloat();
                    return;
                case "stopEyeRadius":
                    this.stopEyeRadius = value.GetValueAsFloat();
                    return;
                case "stopEyeHeight":
                    this.stopEyeHeight = value.GetValueAsFloat();
                    return;
                case "noiseSeType":
                    this.noiseSeType = value.GetValueAsString();
                    return;
                case "bushFlags":
                    this.bushFlags = value.GetValueAsUInt32();
                    return;
                case "baseCycleSpeedRate":
                    this.baseCycleSpeedRate = value.GetValueAsFloat();
                    return;
                case "windAmplitude":
                    this.windAmplitude = value.GetValueAsFloat();
                    return;
                case "windDirYAxisFixZero":
                    this.windDirYAxisFixZero = value.GetValueAsBool();
                    return;
                case "windOffsetFactor":
                    this.windOffsetFactor = value.GetValueAsFloat();
                    return;
                case "bulletEffect":
                    this.bulletEffect = value.GetValueAsFilePtr();
                    return;
                case "fairEffect":
                    this.fairEffect = value.GetValueAsFilePtr();
                    return;
                case "rainEffect":
                    this.rainEffect = value.GetValueAsFilePtr();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "lodMeshName":
                    while(this.lodMeshName.Count <= index) { this.lodMeshName.Add(default(String)); }
                    this.lodMeshName[index] = value.GetValueAsString();
                    return;
                case "lodDistance":
                    while(this.lodDistance.Count <= index) { this.lodDistance.Add(default(float)); }
                    this.lodDistance[index] = value.GetValueAsFloat();
                    return;
                case "lodDistanceHighEnd":
                    while(this.lodDistanceHighEnd.Count <= index) { this.lodDistanceHighEnd.Add(default(float)); }
                    this.lodDistanceHighEnd[index] = value.GetValueAsFloat();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}