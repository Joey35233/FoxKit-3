//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameCore
{
    public partial class TppPlayer2BlockControllerData : Fox.Core.Data 
    {
        // Properties
        public uint configuration_commonMotionBlockSize { get; set; }
        
        public uint configuration_commonMotionBlockSizePs3 { get; set; }
        
        public uint configuration_additiveMotionBlockCount { get; set; }
        
        public uint configuration_additiveMotionBlockSize { get; set; }
        
        public uint configuration_partsBlockCount { get; set; }
        
        public uint configuration_partsBlockSize { get; set; }
        
        public String instanceSettings_instancePackagePath { get; set; }
        
        public uint instanceSettings_instanceBlockSize { get; set; }
        
        public String instanceSettings_commonMotionTypeName { get; set; }
        
        public System.Collections.Generic.IList<String> instanceSettings_partsTypeNames { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> instanceSettings_partsTypeInitial { get; } = new System.Collections.Generic.List<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPlayer2BlockControllerData()
        {
            classInfo = new EntityInfo(new String("TppPlayer2BlockControllerData"), base.GetClassEntityInfo(), 136, null, 3);
			
			classInfo.StaticProperties.Insert(new String("configuration_commonMotionBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("configuration_commonMotionBlockSizePs3"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("configuration_additiveMotionBlockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("configuration_additiveMotionBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("configuration_partsBlockCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("configuration_partsBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceSettings_instancePackagePath"), new PropertyInfo(PropertyInfo.PropertyType.String, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceSettings_instanceBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceSettings_commonMotionTypeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 160, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceSettings_partsTypeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 168, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceSettings_partsTypeInitial"), new PropertyInfo(PropertyInfo.PropertyType.String, 184, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppPlayer2BlockControllerData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "configuration_commonMotionBlockSize":
                    this.configuration_commonMotionBlockSize = value.GetValueAsUInt32();
                    return;
                case "configuration_commonMotionBlockSizePs3":
                    this.configuration_commonMotionBlockSizePs3 = value.GetValueAsUInt32();
                    return;
                case "configuration_additiveMotionBlockCount":
                    this.configuration_additiveMotionBlockCount = value.GetValueAsUInt32();
                    return;
                case "configuration_additiveMotionBlockSize":
                    this.configuration_additiveMotionBlockSize = value.GetValueAsUInt32();
                    return;
                case "configuration_partsBlockCount":
                    this.configuration_partsBlockCount = value.GetValueAsUInt32();
                    return;
                case "configuration_partsBlockSize":
                    this.configuration_partsBlockSize = value.GetValueAsUInt32();
                    return;
                case "instanceSettings_instancePackagePath":
                    this.instanceSettings_instancePackagePath = value.GetValueAsString();
                    return;
                case "instanceSettings_instanceBlockSize":
                    this.instanceSettings_instanceBlockSize = value.GetValueAsUInt32();
                    return;
                case "instanceSettings_commonMotionTypeName":
                    this.instanceSettings_commonMotionTypeName = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "instanceSettings_partsTypeNames":
                    while(this.instanceSettings_partsTypeNames.Count <= index) { this.instanceSettings_partsTypeNames.Add(default(String)); }
                    this.instanceSettings_partsTypeNames[index] = value.GetValueAsString();
                    return;
                case "instanceSettings_partsTypeInitial":
                    while(this.instanceSettings_partsTypeInitial.Count <= index) { this.instanceSettings_partsTypeInitial.Add(default(String)); }
                    this.instanceSettings_partsTypeInitial[index] = value.GetValueAsString();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}