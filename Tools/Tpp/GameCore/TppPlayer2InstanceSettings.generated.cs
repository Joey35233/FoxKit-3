//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameCore
{
    public partial class TppPlayer2InstanceSettings 
    {
        // Properties
        public String instancePackagePath { get; set; }
        
        public uint instanceBlockSize { get; set; }
        
        public String commonMotionTypeName { get; set; }
        
        public System.Collections.Generic.IList<String> partsTypeNames { get; } = new System.Collections.Generic.List<String>();
        
        public System.Collections.Generic.IList<String> partsTypeInitial { get; } = new System.Collections.Generic.List<String>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPlayer2InstanceSettings()
        {
            classInfo = new EntityInfo(new String("TppPlayer2InstanceSettings"), null, 0, null, 0);
			
			classInfo.StaticProperties.Insert(new String("instancePackagePath"), new PropertyInfo(PropertyInfo.PropertyType.String, 0, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("instanceBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 8, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("commonMotionTypeName"), new PropertyInfo(PropertyInfo.PropertyType.String, 16, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("partsTypeNames"), new PropertyInfo(PropertyInfo.PropertyType.String, 24, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("partsTypeInitial"), new PropertyInfo(PropertyInfo.PropertyType.String, 40, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		
        
        public virtual void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "instancePackagePath":
                    this.instancePackagePath = value.GetValueAsString();
                    return;
                case "instanceBlockSize":
                    this.instanceBlockSize = value.GetValueAsUInt32();
                    return;
                case "commonMotionTypeName":
                    this.commonMotionTypeName = value.GetValueAsString();
                    return;
                default:
				    
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
        
        public virtual void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "partsTypeNames":
                    while(this.partsTypeNames.Count <= index) { this.partsTypeNames.Add(default(String)); }
                    this.partsTypeNames[index] = value.GetValueAsString();
                    return;
                case "partsTypeInitial":
                    while(this.partsTypeInitial.Count <= index) { this.partsTypeInitial.Add(default(String)); }
                    this.partsTypeInitial[index] = value.GetValueAsString();
                    return;
                default:
					
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
        
        public virtual void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    throw new System.MissingMemberException("Unrecognized property", propertyName.CString);
                    return;
            }
        }
    }
}