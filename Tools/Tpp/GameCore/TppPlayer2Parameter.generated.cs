//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameCore
{
    public partial class TppPlayer2Parameter : Fox.Core.DataElement 
    {
        // Properties
        public FilePtr<File> motionGraphFile { get; set; }
        
        public StringMap<FilePtr<File>> vfxFiles { get; } = new StringMap<FilePtr<File>>();
        
        public uint lifeMax { get; set; }
        
        public float lifeRecoveryPerSecond { get; set; }
        
        public float respawnTime { get; set; }
        
        public uint clipCount { get; set; }
        
        public float fireInterval { get; set; }
        
        public float lifeRecoveryCooldownTimer { get; set; }
        
        public String partsType { get; set; }
        
        public StringMap<byte> TODO_trapTags { get; } = new StringMap<byte>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPlayer2Parameter()
        {
            classInfo = new EntityInfo(new String("TppPlayer2Parameter"), base.GetClassEntityInfo(), 184, null, 5);
			
			classInfo.StaticProperties.Insert(new String("motionGraphFile"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 56, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vfxFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 80, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lifeMax"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lifeRecoveryPerSecond"), new PropertyInfo(PropertyInfo.PropertyType.Float, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("respawnTime"), new PropertyInfo(PropertyInfo.PropertyType.Float, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("clipCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fireInterval"), new PropertyInfo(PropertyInfo.PropertyType.Float, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("lifeRecoveryCooldownTimer"), new PropertyInfo(PropertyInfo.PropertyType.Float, 148, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("partsType"), new PropertyInfo(PropertyInfo.PropertyType.String, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("TODO_trapTags"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 160, 1, PropertyInfo.ContainerType.StringMap, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppPlayer2Parameter(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "motionGraphFile":
                    this.motionGraphFile = value.GetValueAsFilePtr();
                    return;
                case "lifeMax":
                    this.lifeMax = value.GetValueAsUInt32();
                    return;
                case "lifeRecoveryPerSecond":
                    this.lifeRecoveryPerSecond = value.GetValueAsFloat();
                    return;
                case "respawnTime":
                    this.respawnTime = value.GetValueAsFloat();
                    return;
                case "clipCount":
                    this.clipCount = value.GetValueAsUInt32();
                    return;
                case "fireInterval":
                    this.fireInterval = value.GetValueAsFloat();
                    return;
                case "lifeRecoveryCooldownTimer":
                    this.lifeRecoveryCooldownTimer = value.GetValueAsFloat();
                    return;
                case "partsType":
                    this.partsType = value.GetValueAsString();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                case "vfxFiles":
                    this.vfxFiles.Add(key, value.GetValueAsFilePtr());
                    return;
                case "TODO_trapTags":
                    this.TODO_trapTags.Add(key, value.GetValueAsUInt8());
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}