//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameCore
{
    public partial class LuxuryBlockControllerData : Fox.Core.Data 
    {
        // Properties
        public uint blockWidthX { get; set; }
        
        public uint blockWidthZ { get; set; }
        
        public uint centerIndexX { get; set; }
        
        public uint centerIndexZ { get; set; }
        
        public uint blockLoadMargin { get; set; }
        
        public uint maxBlockIndexMapCount { get; set; }
        
        public uint maxPathListCount { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static LuxuryBlockControllerData()
        {
            classInfo = new EntityInfo(new String("LuxuryBlockControllerData"), base.GetClassEntityInfo(), 92, null, 0);
			
			classInfo.StaticProperties.Insert(new String("blockWidthX"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockWidthZ"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("centerIndexX"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("centerIndexZ"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("blockLoadMargin"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxBlockIndexMapCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("maxPathListCount"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public LuxuryBlockControllerData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "blockWidthX":
                    this.blockWidthX = value.GetValueAsUInt32();
                    return;
                case "blockWidthZ":
                    this.blockWidthZ = value.GetValueAsUInt32();
                    return;
                case "centerIndexX":
                    this.centerIndexX = value.GetValueAsUInt32();
                    return;
                case "centerIndexZ":
                    this.centerIndexZ = value.GetValueAsUInt32();
                    return;
                case "blockLoadMargin":
                    this.blockLoadMargin = value.GetValueAsUInt32();
                    return;
                case "maxBlockIndexMapCount":
                    this.maxBlockIndexMapCount = value.GetValueAsUInt32();
                    return;
                case "maxPathListCount":
                    this.maxPathListCount = value.GetValueAsUInt32();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}