//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.GameCore
{
    public partial class TppPlayer2AdditionalMotionBlockData : Fox.Core.Data 
    {
        // Properties
        public uint blockSize { get; set; }
        
        public uint vramBlockSize { get; set; }
        
        public uint residentVramSyncBufferSize { get; set; }
        
        public uint baseVramSyncBufferSize { get; set; }
        
        public uint equipVramSyncBufferSize { get; set; }
        
        public uint weaponVramSyncBufferSize { get; set; }
        
        public Path fpkPath { get; set; }
        
        public Path vramFpkPath { get; set; }
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppPlayer2AdditionalMotionBlockData()
        {
            classInfo = new EntityInfo(new String("TppPlayer2AdditionalMotionBlockData"), base.GetClassEntityInfo(), 104, null, 2);
			
			classInfo.StaticProperties.Insert(new String("blockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 120, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vramBlockSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 124, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("residentVramSyncBufferSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 128, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("baseVramSyncBufferSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 132, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("equipVramSyncBufferSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 136, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("weaponVramSyncBufferSize"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 140, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("fpkPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 144, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("vramFpkPath"), new PropertyInfo(PropertyInfo.PropertyType.Path, 152, 1, PropertyInfo.ContainerType.StaticArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppPlayer2AdditionalMotionBlockData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                case "blockSize":
                    this.blockSize = value.GetValueAsUInt32();
                    return;
                case "vramBlockSize":
                    this.vramBlockSize = value.GetValueAsUInt32();
                    return;
                case "residentVramSyncBufferSize":
                    this.residentVramSyncBufferSize = value.GetValueAsUInt32();
                    return;
                case "baseVramSyncBufferSize":
                    this.baseVramSyncBufferSize = value.GetValueAsUInt32();
                    return;
                case "equipVramSyncBufferSize":
                    this.equipVramSyncBufferSize = value.GetValueAsUInt32();
                    return;
                case "weaponVramSyncBufferSize":
                    this.weaponVramSyncBufferSize = value.GetValueAsUInt32();
                    return;
                case "fpkPath":
                    this.fpkPath = value.GetValueAsPath();
                    return;
                case "vramFpkPath":
                    this.vramFpkPath = value.GetValueAsPath();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}