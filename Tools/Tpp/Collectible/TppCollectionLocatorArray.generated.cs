//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Collectible
{
    public partial class TppCollectionLocatorArray : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<System.Numerics.Vector3> positions { get; } = new System.Collections.Generic.List<System.Numerics.Vector3>();
        
        public System.Collections.Generic.IList<uint> rotations { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<uint> infos { get; } = new System.Collections.Generic.List<uint>();
        
        public System.Collections.Generic.IList<ushort> segmentIndices { get; } = new System.Collections.Generic.List<ushort>();
        
        public System.Collections.Generic.IList<ushort> locatorIndices { get; } = new System.Collections.Generic.List<ushort>();
        
        public System.Collections.Generic.IList<ushort> locatorCounts { get; } = new System.Collections.Generic.List<ushort>();
        
        public System.Collections.Generic.IList<byte> groupIds { get; } = new System.Collections.Generic.List<byte>();
        
        public System.Collections.Generic.IList<ushort> segmentInfoIndices { get; } = new System.Collections.Generic.List<ushort>();
        
        public System.Collections.Generic.IList<ushort> segmentInfoCounts { get; } = new System.Collections.Generic.List<ushort>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppCollectionLocatorArray()
        {
            classInfo = new EntityInfo(new String("TppCollectionLocatorArray"), base.GetClassEntityInfo(), 208, null, 1);
			
			classInfo.StaticProperties.Insert(new String("positions"), new PropertyInfo(PropertyInfo.PropertyType.Vector3, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rotations"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("infos"), new PropertyInfo(PropertyInfo.PropertyType.UInt32, 152, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("segmentIndices"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 168, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("locatorIndices"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 184, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("locatorCounts"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 200, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("groupIds"), new PropertyInfo(PropertyInfo.PropertyType.UInt8, 216, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("segmentInfoIndices"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 232, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("segmentInfoCounts"), new PropertyInfo(PropertyInfo.PropertyType.UInt16, 248, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.Never, PropertyInfo.PropertyExport.Never, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppCollectionLocatorArray(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "positions":
                    while(this.positions.Count <= index) { this.positions.Add(default(System.Numerics.Vector3)); }
                    this.positions[index] = value.GetValueAsVector3();
                    return;
                case "rotations":
                    while(this.rotations.Count <= index) { this.rotations.Add(default(uint)); }
                    this.rotations[index] = value.GetValueAsUInt32();
                    return;
                case "infos":
                    while(this.infos.Count <= index) { this.infos.Add(default(uint)); }
                    this.infos[index] = value.GetValueAsUInt32();
                    return;
                case "segmentIndices":
                    while(this.segmentIndices.Count <= index) { this.segmentIndices.Add(default(ushort)); }
                    this.segmentIndices[index] = value.GetValueAsUInt16();
                    return;
                case "locatorIndices":
                    while(this.locatorIndices.Count <= index) { this.locatorIndices.Add(default(ushort)); }
                    this.locatorIndices[index] = value.GetValueAsUInt16();
                    return;
                case "locatorCounts":
                    while(this.locatorCounts.Count <= index) { this.locatorCounts.Add(default(ushort)); }
                    this.locatorCounts[index] = value.GetValueAsUInt16();
                    return;
                case "groupIds":
                    while(this.groupIds.Count <= index) { this.groupIds.Add(default(byte)); }
                    this.groupIds[index] = value.GetValueAsUInt8();
                    return;
                case "segmentInfoIndices":
                    while(this.segmentInfoIndices.Count <= index) { this.segmentInfoIndices.Add(default(ushort)); }
                    this.segmentInfoIndices[index] = value.GetValueAsUInt16();
                    return;
                case "segmentInfoCounts":
                    while(this.segmentInfoCounts.Count <= index) { this.segmentInfoCounts.Add(default(ushort)); }
                    this.segmentInfoCounts[index] = value.GetValueAsUInt16();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}