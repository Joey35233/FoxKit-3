//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tpp.Ui
{
    public partial class HudBootData : Fox.Core.Data 
    {
        // Properties
        public System.Collections.Generic.IList<FilePtr<File>> uigFiles { get; } = new System.Collections.Generic.List<FilePtr<File>>();
        
        public System.Collections.Generic.IList<FilePtr<File>> rawFiles { get; } = new System.Collections.Generic.List<FilePtr<File>>();
        
        // PropertyInfo
        private static EntityInfo classInfo;
        public static new EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static HudBootData()
        {
            classInfo = new EntityInfo(new String("HudBootData"), base.GetClassEntityInfo(), 96, null, 1);
			
			classInfo.StaticProperties.Insert(new String("uigFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 120, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert(new String("rawFiles"), new PropertyInfo(PropertyInfo.PropertyType.FilePtr, 136, 1, PropertyInfo.ContainerType.DynamicArray, PropertyInfo.PropertyExport.EditorAndGame, PropertyInfo.PropertyExport.EditorAndGame, null, null, PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public HudBootData(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(String propertyName, Value value)
        {
            switch(propertyName.CString())
            {
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, ushort index, Value value)
        {
            switch(propertyName.CString())
            {
                case "uigFiles":
                    while(this.uigFiles.Count <= index) { this.uigFiles.Add(default(FilePtr<File>)); }
                    this.uigFiles[index] = value.GetValueAsFilePtr();
                    return;
                case "rawFiles":
                    while(this.rawFiles.Count <= index) { this.rawFiles.Add(default(FilePtr<File>)); }
                    this.rawFiles[index] = value.GetValueAsFilePtr();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(String propertyName, String key, Value value)
        {
            switch(propertyName.CString())
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}