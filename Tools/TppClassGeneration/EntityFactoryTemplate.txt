//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace Fox
{
    public class EntityFactory
    {
        private delegate Fox.Core.Entity EntityConstructor(ulong address, ushort idA, ushort idB);

        private IDictionary<string, EntityConstructor> Constructors { get; }

        public EntityFactory() => this.Constructors = new Dictionary<string, EntityConstructor>
        {
			{% for class_name in info %}{% if info[class_name].is_entity() %}[nameof({{ info[class_name].get_root_namespace() }}.{{ info[class_name].get_namespace_without_prefix() }}.{{ class_name}})] = (address, idA, idB) => new {{ info[class_name].get_root_namespace() }}.{{ info[class_name].get_namespace_without_prefix() }}.{{ class_name }}(address, idA, idB),{% endif %}
			{% endfor %}
        };

        public Fox.Core.Entity Create(string className, ulong address, ushort version, ushort idA, ushort idB)
        {
            if (!this.Constructors.ContainsKey(className))
            {
                throw new System.ArgumentException($"Unrecognized class name: {className}");
            }

            return this.Constructors[className](address, idA, idB);
        }
    }
}