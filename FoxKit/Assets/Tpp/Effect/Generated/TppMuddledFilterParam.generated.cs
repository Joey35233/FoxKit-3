//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
    [UnityEditor.InitializeOnLoad]
    public partial class TppMuddledFilterParam 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        protected float sphereRadiusMin { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float sphereRadiusMax { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float headRadiusMin { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float headRadiusMax { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float sinCurveAmplitude { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float sinCurveLength { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float moveSpeedMin { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float moveSpeedMax { get; set; }
        
        [field: UnityEngine.SerializeField]
        protected float power { get; set; }
        
        // PropertyInfo
        private static Fox.Core.EntityInfo classInfo;
        public static  Fox.Core.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public virtual Fox.Core.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppMuddledFilterParam()
        {
            classInfo = new Fox.Core.EntityInfo("TppMuddledFilterParam", typeof(TppMuddledFilterParam), null, 0, null, 0);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sphereRadiusMin", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sphereRadiusMax", Fox.Core.PropertyInfo.PropertyType.Float, 4, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("headRadiusMin", Fox.Core.PropertyInfo.PropertyType.Float, 8, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("headRadiusMax", Fox.Core.PropertyInfo.PropertyType.Float, 12, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sinCurveAmplitude", Fox.Core.PropertyInfo.PropertyType.Float, 16, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sinCurveLength", Fox.Core.PropertyInfo.PropertyType.Float, 20, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("moveSpeedMin", Fox.Core.PropertyInfo.PropertyType.Float, 24, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("moveSpeedMax", Fox.Core.PropertyInfo.PropertyType.Float, 28, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("power", Fox.Core.PropertyInfo.PropertyType.Float, 32, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
        }

        // Constructors
		
		public TppMuddledFilterParam()
        {
            
        }
        
        public virtual void SetProperty(string propertyName, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "sphereRadiusMin":
                    this.sphereRadiusMin = value.GetValueAsFloat();
                    return;
                case "sphereRadiusMax":
                    this.sphereRadiusMax = value.GetValueAsFloat();
                    return;
                case "headRadiusMin":
                    this.headRadiusMin = value.GetValueAsFloat();
                    return;
                case "headRadiusMax":
                    this.headRadiusMax = value.GetValueAsFloat();
                    return;
                case "sinCurveAmplitude":
                    this.sinCurveAmplitude = value.GetValueAsFloat();
                    return;
                case "sinCurveLength":
                    this.sinCurveLength = value.GetValueAsFloat();
                    return;
                case "moveSpeedMin":
                    this.moveSpeedMin = value.GetValueAsFloat();
                    return;
                case "moveSpeedMax":
                    this.moveSpeedMax = value.GetValueAsFloat();
                    return;
                case "power":
                    this.power = value.GetValueAsFloat();
                    return;
                default:
                    throw new CsSystem.MissingMemberException("Unrecognized property", propertyName);
            }
        }
        
        public virtual void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    throw new CsSystem.MissingMemberException("Unrecognized property", propertyName);
            }
        }
        
        public virtual void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    throw new CsSystem.MissingMemberException("Unrecognized property", propertyName);
            }
        }
    }
}