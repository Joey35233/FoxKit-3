//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
	[UnityEditor.InitializeOnLoad]
	public partial class TppLightProbe : Fox.Core.TransformData
	{
		// Properties
		[field: UnityEngine.SerializeField]
		public bool enable { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.EntityLink lightArea { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.EntityLink innerArea { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.EntityLink shCoefficientsData { get; set; }
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<Fox.Core.EntityLink> onLights { get; private set; } = new CsSystem.Collections.Generic.List<Fox.Core.EntityLink>();
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<Fox.Core.EntityLink> offLights { get; private set; } = new CsSystem.Collections.Generic.List<Fox.Core.EntityLink>();
		
		[field: UnityEngine.SerializeField]
		public float innerScaleXPositive { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float innerScaleXNegative { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float innerScaleYPositive { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float innerScaleYNegative { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float innerScaleZPositive { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float innerScaleZNegative { get; set; }
		
		[field: UnityEngine.SerializeField]
		public int priority { get; set; }
		
		[field: UnityEngine.SerializeField]
		public TppLightProbe_DebugMode debugMode { get; set; }
		
		[field: UnityEngine.SerializeField]
		public TppLightProbe_DrawRejectionLevel drawRejectionLevel { get; set; }
		
		[field: UnityEngine.SerializeField]
		public TppLightProbe_ShapeType shapeType { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float exposure { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected uint localFlags { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float occlusionModeOpenRate { get; set; }
		
		public bool enable24hSH { get => Get_enable24hSH(); set { Set_enable24hSH(value); } }
		private partial bool Get_enable24hSH();
		private partial void Set_enable24hSH(bool value);
		
		public bool enableWeatherSH { get => Get_enableWeatherSH(); set { Set_enableWeatherSH(value); } }
		private partial bool Get_enableWeatherSH();
		private partial void Set_enableWeatherSH(bool value);
		
		public bool enableRelatedLightSH { get => Get_enableRelatedLightSH(); set { Set_enableRelatedLightSH(value); } }
		private partial bool Get_enableRelatedLightSH();
		private partial void Set_enableRelatedLightSH(bool value);
		
		public bool enableOcclusionMode { get => Get_enableOcclusionMode(); set { Set_enableOcclusionMode(value); } }
		private partial bool Get_enableOcclusionMode();
		private partial void Set_enableOcclusionMode(bool value);
		
		public TppLightProbe_PackingGeneration packingGeneration { get => Get_packingGeneration(); set { Set_packingGeneration(value); } }
		private partial TppLightProbe_PackingGeneration Get_packingGeneration();
		private partial void Set_packingGeneration(TppLightProbe_PackingGeneration value);
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static TppLightProbe()
		{
			if (Fox.Core.TransformData.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("TppLightProbe", typeof(TppLightProbe), Fox.Core.TransformData.ClassInfo, 448, "Light", 4);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enable", Fox.Core.PropertyInfo.PropertyType.Bool, 508, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("lightArea", Fox.Core.PropertyInfo.PropertyType.EntityLink, 336, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerArea", Fox.Core.PropertyInfo.PropertyType.EntityLink, 376, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shCoefficientsData", Fox.Core.PropertyInfo.PropertyType.EntityLink, 416, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("onLights", Fox.Core.PropertyInfo.PropertyType.EntityLink, 304, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("offLights", Fox.Core.PropertyInfo.PropertyType.EntityLink, 320, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleXPositive", Fox.Core.PropertyInfo.PropertyType.Float, 460, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleXNegative", Fox.Core.PropertyInfo.PropertyType.Float, 464, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleYPositive", Fox.Core.PropertyInfo.PropertyType.Float, 468, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleYNegative", Fox.Core.PropertyInfo.PropertyType.Float, 472, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleZPositive", Fox.Core.PropertyInfo.PropertyType.Float, 476, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("innerScaleZNegative", Fox.Core.PropertyInfo.PropertyType.Float, 480, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("priority", Fox.Core.PropertyInfo.PropertyType.Int32, 484, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("debugMode", Fox.Core.PropertyInfo.PropertyType.Int32, 488, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_DebugMode), Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("drawRejectionLevel", Fox.Core.PropertyInfo.PropertyType.Int32, 492, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_DrawRejectionLevel), Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shapeType", Fox.Core.PropertyInfo.PropertyType.Int32, 496, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_ShapeType), Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("exposure", Fox.Core.PropertyInfo.PropertyType.Float, 500, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("localFlags", Fox.Core.PropertyInfo.PropertyType.UInt32, 504, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("occlusionModeOpenRate", Fox.Core.PropertyInfo.PropertyType.Float, 456, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enable24hSH", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enableWeatherSH", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enableRelatedLightSH", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enableOcclusionMode", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("packingGeneration", Fox.Core.PropertyInfo.PropertyType.Int32, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(TppLightProbe_PackingGeneration), Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "enable":
					return new Fox.Core.Value(enable);
				case "lightArea":
					return new Fox.Core.Value(lightArea);
				case "innerArea":
					return new Fox.Core.Value(innerArea);
				case "shCoefficientsData":
					return new Fox.Core.Value(shCoefficientsData);
				case "onLights":
					return new Fox.Core.Value(onLights);
				case "offLights":
					return new Fox.Core.Value(offLights);
				case "innerScaleXPositive":
					return new Fox.Core.Value(innerScaleXPositive);
				case "innerScaleXNegative":
					return new Fox.Core.Value(innerScaleXNegative);
				case "innerScaleYPositive":
					return new Fox.Core.Value(innerScaleYPositive);
				case "innerScaleYNegative":
					return new Fox.Core.Value(innerScaleYNegative);
				case "innerScaleZPositive":
					return new Fox.Core.Value(innerScaleZPositive);
				case "innerScaleZNegative":
					return new Fox.Core.Value(innerScaleZNegative);
				case "priority":
					return new Fox.Core.Value(priority);
				case "debugMode":
					return new Fox.Core.Value(debugMode);
				case "drawRejectionLevel":
					return new Fox.Core.Value(drawRejectionLevel);
				case "shapeType":
					return new Fox.Core.Value(shapeType);
				case "exposure":
					return new Fox.Core.Value(exposure);
				case "localFlags":
					return new Fox.Core.Value(localFlags);
				case "occlusionModeOpenRate":
					return new Fox.Core.Value(occlusionModeOpenRate);
				case "enable24hSH":
					return new Fox.Core.Value(enable24hSH);
				case "enableWeatherSH":
					return new Fox.Core.Value(enableWeatherSH);
				case "enableRelatedLightSH":
					return new Fox.Core.Value(enableRelatedLightSH);
				case "enableOcclusionMode":
					return new Fox.Core.Value(enableOcclusionMode);
				case "packingGeneration":
					return new Fox.Core.Value(packingGeneration);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				case "onLights":
					return new Fox.Core.Value(this.onLights[index]);
				case "offLights":
					return new Fox.Core.Value(this.offLights[index]);
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "enable":
					this.enable = value.GetValueAsBool();
					return;
				case "lightArea":
					this.lightArea = value.GetValueAsEntityLink();
					return;
				case "innerArea":
					this.innerArea = value.GetValueAsEntityLink();
					return;
				case "shCoefficientsData":
					this.shCoefficientsData = value.GetValueAsEntityLink();
					return;
				case "innerScaleXPositive":
					this.innerScaleXPositive = value.GetValueAsFloat();
					return;
				case "innerScaleXNegative":
					this.innerScaleXNegative = value.GetValueAsFloat();
					return;
				case "innerScaleYPositive":
					this.innerScaleYPositive = value.GetValueAsFloat();
					return;
				case "innerScaleYNegative":
					this.innerScaleYNegative = value.GetValueAsFloat();
					return;
				case "innerScaleZPositive":
					this.innerScaleZPositive = value.GetValueAsFloat();
					return;
				case "innerScaleZNegative":
					this.innerScaleZNegative = value.GetValueAsFloat();
					return;
				case "priority":
					this.priority = value.GetValueAsInt32();
					return;
				case "debugMode":
					this.debugMode = (TppLightProbe_DebugMode)value.GetValueAsInt32();
					return;
				case "drawRejectionLevel":
					this.drawRejectionLevel = (TppLightProbe_DrawRejectionLevel)value.GetValueAsInt32();
					return;
				case "shapeType":
					this.shapeType = (TppLightProbe_ShapeType)value.GetValueAsInt32();
					return;
				case "exposure":
					this.exposure = value.GetValueAsFloat();
					return;
				case "localFlags":
					this.localFlags = value.GetValueAsUInt32();
					return;
				case "occlusionModeOpenRate":
					this.occlusionModeOpenRate = value.GetValueAsFloat();
					return;
				case "enable24hSH":
					this.enable24hSH = value.GetValueAsBool();
					return;
				case "enableWeatherSH":
					this.enableWeatherSH = value.GetValueAsBool();
					return;
				case "enableRelatedLightSH":
					this.enableRelatedLightSH = value.GetValueAsBool();
					return;
				case "enableOcclusionMode":
					this.enableOcclusionMode = value.GetValueAsBool();
					return;
				case "packingGeneration":
					this.packingGeneration = (TppLightProbe_PackingGeneration)value.GetValueAsInt32();
					return;
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "onLights":
					while(this.onLights.Count <= index) { this.onLights.Add(default(Fox.Core.EntityLink)); }
					this.onLights[index] = value.GetValueAsEntityLink();
					return;
				case "offLights":
					while(this.offLights.Count <= index) { this.offLights.Add(default(Fox.Core.EntityLink)); }
					this.offLights[index] = value.GetValueAsEntityLink();
					return;
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}