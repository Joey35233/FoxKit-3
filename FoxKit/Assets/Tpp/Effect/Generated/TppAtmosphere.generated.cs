//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
	[UnityEditor.InitializeOnLoad]
	public partial class TppAtmosphere : Fox.Core.Data
	{
		// Properties
		[field: UnityEngine.SerializeField]
		public Fox.Path atshFilePath { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Path pcspFilePath { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.FilePtr atshFilePtr { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.FilePtr pcspFilePtr { get; set; }
		
		public bool useBakedData { get => Get_useBakedData(); set { Set_useBakedData(value); } }
		private partial bool Get_useBakedData();
		private partial void Set_useBakedData(bool value);
		
		[field: UnityEngine.SerializeField]
		public Fox.Core.Entity capturePosition { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float rayleighHeightScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Vector3 rayleighScatteringCoefficient { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Vector3 rayleighScatteringCoefficientOfCloudySky { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float mieHeightScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float mieAbsorptionRate { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float mieAnisotropy { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Vector3 mieScatteringCoefficient { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float mieAnisotropyOfCloudySky { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Vector3 mieScatteringCoefficientOfCloudySky { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint multiScatteringOrder { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Color groundColor { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float northAngle { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float latitude { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float longitude { get; set; }
		
		[field: UnityEngine.SerializeField]
		public int gmtTimeDifference { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint year { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint month { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint day { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float shadowRange { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float shadowRangeExtra { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float hiResShadowRange { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float shadowProjectionRange { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float shadowFadeRange { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float selfShadowBias { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float shadowMaskSpecular { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightFadeStart { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightFadeLength { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float sunLux { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float moonLux { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float starLight { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float sunMoonSize { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float sunMoonIntensity { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Path sunTexture { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.Path moonTexture { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Color moonColor { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Color sunColorExtinctionOfClearSky { get; set; }
		
		[field: UnityEngine.SerializeField]
		public UnityEngine.Color sunColorOfCloudySky { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float skyLightSunScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float skyColorSunScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float daySkyAmbientScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightSunLimitAngle { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightMoonLimitAngle { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightAttenuStart { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float dirLightAttenuEnd { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedLightDirSunRise { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedLightDirSunSet { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedLightDirMoonRise { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedLightDirMoonSet { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedRisingSunDir { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedFallingSunDir { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedRisingMoonDir { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 fixedFallingMoonDir { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float skyLightLuminanceScale { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint numBands { get; set; }
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<UnityEngine.Vector4> coefficients { get; private set; } = new CsSystem.Collections.Generic.List<UnityEngine.Vector4>();
		
		[field: UnityEngine.SerializeField]
		public float cloudiness { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float influenceOfFog { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected uint localFlags { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint priority { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float interpolateTimeInSecondOfDirLightSteppedMove { get; set; }
		
		[field: UnityEngine.SerializeField]
		public uint divisonNumOfDirLightSteppedMove { get; set; }
		
		public bool enable { get => Get_enable(); set { Set_enable(value); } }
		private partial bool Get_enable();
		private partial void Set_enable(bool value);
		
		public bool skyEnable { get => Get_skyEnable(); set { Set_skyEnable(value); } }
		private partial bool Get_skyEnable();
		private partial void Set_skyEnable(bool value);
		
		public bool sunLightEnable { get => Get_sunLightEnable(); set { Set_sunLightEnable(value); } }
		private partial bool Get_sunLightEnable();
		private partial void Set_sunLightEnable(bool value);
		
		public bool isCascadeBlend { get => Get_isCascadeBlend(); set { Set_isCascadeBlend(value); } }
		private partial bool Get_isCascadeBlend();
		private partial void Set_isCascadeBlend(bool value);
		
		public bool castShadow { get => Get_castShadow(); set { Set_castShadow(value); } }
		private partial bool Get_castShadow();
		private partial void Set_castShadow(bool value);
		
		public bool dirLightFade { get => Get_dirLightFade(); set { Set_dirLightFade(value); } }
		private partial bool Get_dirLightFade();
		private partial void Set_dirLightFade(bool value);
		
		public bool disableSkyCapture { get => Get_disableSkyCapture(); set { Set_disableSkyCapture(value); } }
		private partial bool Get_disableSkyCapture();
		private partial void Set_disableSkyCapture(bool value);
		
		public bool skyLightEnable { get => Get_skyLightEnable(); set { Set_skyLightEnable(value); } }
		private partial bool Get_skyLightEnable();
		private partial void Set_skyLightEnable(bool value);
		
		public bool usePrecomputedAmbient { get => Get_usePrecomputedAmbient(); set { Set_usePrecomputedAmbient(value); } }
		private partial bool Get_usePrecomputedAmbient();
		private partial void Set_usePrecomputedAmbient(bool value);
		
		public bool fogEnable { get => Get_fogEnable(); set { Set_fogEnable(value); } }
		private partial bool Get_fogEnable();
		private partial void Set_fogEnable(bool value);
		
		public bool expandHorizontalLineColor { get => Get_expandHorizontalLineColor(); set { Set_expandHorizontalLineColor(value); } }
		private partial bool Get_expandHorizontalLineColor();
		private partial void Set_expandHorizontalLineColor(bool value);
		
		public bool isSteppedMoveOfDirectionalLight { get => Get_isSteppedMoveOfDirectionalLight(); set { Set_isSteppedMoveOfDirectionalLight(value); } }
		private partial bool Get_isSteppedMoveOfDirectionalLight();
		private partial void Set_isSteppedMoveOfDirectionalLight(bool value);
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static TppAtmosphere()
		{
			if (Fox.Core.Data.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("TppAtmosphere", typeof(TppAtmosphere), Fox.Core.Data.ClassInfo, 608, "Light", 21);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("atshFilePath", Fox.Core.PropertyInfo.PropertyType.Path, 416, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("pcspFilePath", Fox.Core.PropertyInfo.PropertyType.Path, 424, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("atshFilePtr", Fox.Core.PropertyInfo.PropertyType.FilePtr, 432, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("pcspFilePtr", Fox.Core.PropertyInfo.PropertyType.FilePtr, 456, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("useBakedData", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("capturePosition", Fox.Core.PropertyInfo.PropertyType.EntityHandle, 488, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rayleighHeightScale", Fox.Core.PropertyInfo.PropertyType.Float, 496, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rayleighScatteringCoefficient", Fox.Core.PropertyInfo.PropertyType.Vector3, 128, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rayleighScatteringCoefficientOfCloudySky", Fox.Core.PropertyInfo.PropertyType.Vector3, 144, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieHeightScale", Fox.Core.PropertyInfo.PropertyType.Float, 500, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieAbsorptionRate", Fox.Core.PropertyInfo.PropertyType.Float, 504, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieAnisotropy", Fox.Core.PropertyInfo.PropertyType.Float, 508, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieScatteringCoefficient", Fox.Core.PropertyInfo.PropertyType.Vector3, 160, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieAnisotropyOfCloudySky", Fox.Core.PropertyInfo.PropertyType.Float, 512, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("mieScatteringCoefficientOfCloudySky", Fox.Core.PropertyInfo.PropertyType.Vector3, 176, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("multiScatteringOrder", Fox.Core.PropertyInfo.PropertyType.UInt32, 644, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("groundColor", Fox.Core.PropertyInfo.PropertyType.Color, 320, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("northAngle", Fox.Core.PropertyInfo.PropertyType.Float, 516, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("latitude", Fox.Core.PropertyInfo.PropertyType.Float, 520, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("longitude", Fox.Core.PropertyInfo.PropertyType.Float, 524, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("gmtTimeDifference", Fox.Core.PropertyInfo.PropertyType.Int32, 640, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("year", Fox.Core.PropertyInfo.PropertyType.UInt32, 648, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("month", Fox.Core.PropertyInfo.PropertyType.UInt32, 652, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("day", Fox.Core.PropertyInfo.PropertyType.UInt32, 656, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shadowRange", Fox.Core.PropertyInfo.PropertyType.Float, 540, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shadowRangeExtra", Fox.Core.PropertyInfo.PropertyType.Float, 544, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("hiResShadowRange", Fox.Core.PropertyInfo.PropertyType.Float, 548, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shadowProjectionRange", Fox.Core.PropertyInfo.PropertyType.Float, 552, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shadowFadeRange", Fox.Core.PropertyInfo.PropertyType.Float, 556, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("selfShadowBias", Fox.Core.PropertyInfo.PropertyType.Float, 560, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("shadowMaskSpecular", Fox.Core.PropertyInfo.PropertyType.Float, 568, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightFadeStart", Fox.Core.PropertyInfo.PropertyType.Float, 572, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightFadeLength", Fox.Core.PropertyInfo.PropertyType.Float, 576, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunLux", Fox.Core.PropertyInfo.PropertyType.Float, 588, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("moonLux", Fox.Core.PropertyInfo.PropertyType.Float, 592, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("starLight", Fox.Core.PropertyInfo.PropertyType.Float, 596, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunMoonSize", Fox.Core.PropertyInfo.PropertyType.Float, 580, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunMoonIntensity", Fox.Core.PropertyInfo.PropertyType.Float, 584, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunTexture", Fox.Core.PropertyInfo.PropertyType.Path, 400, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("moonTexture", Fox.Core.PropertyInfo.PropertyType.Path, 408, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("moonColor", Fox.Core.PropertyInfo.PropertyType.Color, 336, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunColorExtinctionOfClearSky", Fox.Core.PropertyInfo.PropertyType.Color, 352, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunColorOfCloudySky", Fox.Core.PropertyInfo.PropertyType.Color, 368, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("skyLightSunScale", Fox.Core.PropertyInfo.PropertyType.Float, 600, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("skyColorSunScale", Fox.Core.PropertyInfo.PropertyType.Float, 604, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("daySkyAmbientScale", Fox.Core.PropertyInfo.PropertyType.Float, 608, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightSunLimitAngle", Fox.Core.PropertyInfo.PropertyType.Float, 612, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightMoonLimitAngle", Fox.Core.PropertyInfo.PropertyType.Float, 616, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightAttenuStart", Fox.Core.PropertyInfo.PropertyType.Float, 620, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightAttenuEnd", Fox.Core.PropertyInfo.PropertyType.Float, 624, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedLightDirSunRise", Fox.Core.PropertyInfo.PropertyType.Vector3, 192, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedLightDirSunSet", Fox.Core.PropertyInfo.PropertyType.Vector3, 208, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedLightDirMoonRise", Fox.Core.PropertyInfo.PropertyType.Vector3, 224, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedLightDirMoonSet", Fox.Core.PropertyInfo.PropertyType.Vector3, 240, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedRisingSunDir", Fox.Core.PropertyInfo.PropertyType.Vector3, 256, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedFallingSunDir", Fox.Core.PropertyInfo.PropertyType.Vector3, 272, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedRisingMoonDir", Fox.Core.PropertyInfo.PropertyType.Vector3, 288, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fixedFallingMoonDir", Fox.Core.PropertyInfo.PropertyType.Vector3, 304, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("skyLightLuminanceScale", Fox.Core.PropertyInfo.PropertyType.Float, 632, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("numBands", Fox.Core.PropertyInfo.PropertyType.UInt32, 660, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("coefficients", Fox.Core.PropertyInfo.PropertyType.Vector4, 384, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("cloudiness", Fox.Core.PropertyInfo.PropertyType.Float, 628, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("influenceOfFog", Fox.Core.PropertyInfo.PropertyType.Float, 528, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("localFlags", Fox.Core.PropertyInfo.PropertyType.UInt32, 664, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("priority", Fox.Core.PropertyInfo.PropertyType.UInt32, 668, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("interpolateTimeInSecondOfDirLightSteppedMove", Fox.Core.PropertyInfo.PropertyType.Float, 636, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("divisonNumOfDirLightSteppedMove", Fox.Core.PropertyInfo.PropertyType.UInt32, 672, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("enable", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("skyEnable", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sunLightEnable", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("isCascadeBlend", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("castShadow", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dirLightFade", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("disableSkyCapture", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("skyLightEnable", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("usePrecomputedAmbient", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("fogEnable", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("expandHorizontalLineColor", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("isSteppedMoveOfDirectionalLight", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "atshFilePath":
					return new Fox.Core.Value(atshFilePath);
				case "pcspFilePath":
					return new Fox.Core.Value(pcspFilePath);
				case "atshFilePtr":
					return new Fox.Core.Value(atshFilePtr);
				case "pcspFilePtr":
					return new Fox.Core.Value(pcspFilePtr);
				case "useBakedData":
					return new Fox.Core.Value(useBakedData);
				case "capturePosition":
					return new Fox.Core.Value(capturePosition);
				case "rayleighHeightScale":
					return new Fox.Core.Value(rayleighHeightScale);
				case "rayleighScatteringCoefficient":
					return new Fox.Core.Value(rayleighScatteringCoefficient);
				case "rayleighScatteringCoefficientOfCloudySky":
					return new Fox.Core.Value(rayleighScatteringCoefficientOfCloudySky);
				case "mieHeightScale":
					return new Fox.Core.Value(mieHeightScale);
				case "mieAbsorptionRate":
					return new Fox.Core.Value(mieAbsorptionRate);
				case "mieAnisotropy":
					return new Fox.Core.Value(mieAnisotropy);
				case "mieScatteringCoefficient":
					return new Fox.Core.Value(mieScatteringCoefficient);
				case "mieAnisotropyOfCloudySky":
					return new Fox.Core.Value(mieAnisotropyOfCloudySky);
				case "mieScatteringCoefficientOfCloudySky":
					return new Fox.Core.Value(mieScatteringCoefficientOfCloudySky);
				case "multiScatteringOrder":
					return new Fox.Core.Value(multiScatteringOrder);
				case "groundColor":
					return new Fox.Core.Value(groundColor);
				case "northAngle":
					return new Fox.Core.Value(northAngle);
				case "latitude":
					return new Fox.Core.Value(latitude);
				case "longitude":
					return new Fox.Core.Value(longitude);
				case "gmtTimeDifference":
					return new Fox.Core.Value(gmtTimeDifference);
				case "year":
					return new Fox.Core.Value(year);
				case "month":
					return new Fox.Core.Value(month);
				case "day":
					return new Fox.Core.Value(day);
				case "shadowRange":
					return new Fox.Core.Value(shadowRange);
				case "shadowRangeExtra":
					return new Fox.Core.Value(shadowRangeExtra);
				case "hiResShadowRange":
					return new Fox.Core.Value(hiResShadowRange);
				case "shadowProjectionRange":
					return new Fox.Core.Value(shadowProjectionRange);
				case "shadowFadeRange":
					return new Fox.Core.Value(shadowFadeRange);
				case "selfShadowBias":
					return new Fox.Core.Value(selfShadowBias);
				case "shadowMaskSpecular":
					return new Fox.Core.Value(shadowMaskSpecular);
				case "dirLightFadeStart":
					return new Fox.Core.Value(dirLightFadeStart);
				case "dirLightFadeLength":
					return new Fox.Core.Value(dirLightFadeLength);
				case "sunLux":
					return new Fox.Core.Value(sunLux);
				case "moonLux":
					return new Fox.Core.Value(moonLux);
				case "starLight":
					return new Fox.Core.Value(starLight);
				case "sunMoonSize":
					return new Fox.Core.Value(sunMoonSize);
				case "sunMoonIntensity":
					return new Fox.Core.Value(sunMoonIntensity);
				case "sunTexture":
					return new Fox.Core.Value(sunTexture);
				case "moonTexture":
					return new Fox.Core.Value(moonTexture);
				case "moonColor":
					return new Fox.Core.Value(moonColor);
				case "sunColorExtinctionOfClearSky":
					return new Fox.Core.Value(sunColorExtinctionOfClearSky);
				case "sunColorOfCloudySky":
					return new Fox.Core.Value(sunColorOfCloudySky);
				case "skyLightSunScale":
					return new Fox.Core.Value(skyLightSunScale);
				case "skyColorSunScale":
					return new Fox.Core.Value(skyColorSunScale);
				case "daySkyAmbientScale":
					return new Fox.Core.Value(daySkyAmbientScale);
				case "dirLightSunLimitAngle":
					return new Fox.Core.Value(dirLightSunLimitAngle);
				case "dirLightMoonLimitAngle":
					return new Fox.Core.Value(dirLightMoonLimitAngle);
				case "dirLightAttenuStart":
					return new Fox.Core.Value(dirLightAttenuStart);
				case "dirLightAttenuEnd":
					return new Fox.Core.Value(dirLightAttenuEnd);
				case "fixedLightDirSunRise":
					return new Fox.Core.Value(fixedLightDirSunRise);
				case "fixedLightDirSunSet":
					return new Fox.Core.Value(fixedLightDirSunSet);
				case "fixedLightDirMoonRise":
					return new Fox.Core.Value(fixedLightDirMoonRise);
				case "fixedLightDirMoonSet":
					return new Fox.Core.Value(fixedLightDirMoonSet);
				case "fixedRisingSunDir":
					return new Fox.Core.Value(fixedRisingSunDir);
				case "fixedFallingSunDir":
					return new Fox.Core.Value(fixedFallingSunDir);
				case "fixedRisingMoonDir":
					return new Fox.Core.Value(fixedRisingMoonDir);
				case "fixedFallingMoonDir":
					return new Fox.Core.Value(fixedFallingMoonDir);
				case "skyLightLuminanceScale":
					return new Fox.Core.Value(skyLightLuminanceScale);
				case "numBands":
					return new Fox.Core.Value(numBands);
				case "coefficients":
					return new Fox.Core.Value(coefficients);
				case "cloudiness":
					return new Fox.Core.Value(cloudiness);
				case "influenceOfFog":
					return new Fox.Core.Value(influenceOfFog);
				case "localFlags":
					return new Fox.Core.Value(localFlags);
				case "priority":
					return new Fox.Core.Value(priority);
				case "interpolateTimeInSecondOfDirLightSteppedMove":
					return new Fox.Core.Value(interpolateTimeInSecondOfDirLightSteppedMove);
				case "divisonNumOfDirLightSteppedMove":
					return new Fox.Core.Value(divisonNumOfDirLightSteppedMove);
				case "enable":
					return new Fox.Core.Value(enable);
				case "skyEnable":
					return new Fox.Core.Value(skyEnable);
				case "sunLightEnable":
					return new Fox.Core.Value(sunLightEnable);
				case "isCascadeBlend":
					return new Fox.Core.Value(isCascadeBlend);
				case "castShadow":
					return new Fox.Core.Value(castShadow);
				case "dirLightFade":
					return new Fox.Core.Value(dirLightFade);
				case "disableSkyCapture":
					return new Fox.Core.Value(disableSkyCapture);
				case "skyLightEnable":
					return new Fox.Core.Value(skyLightEnable);
				case "usePrecomputedAmbient":
					return new Fox.Core.Value(usePrecomputedAmbient);
				case "fogEnable":
					return new Fox.Core.Value(fogEnable);
				case "expandHorizontalLineColor":
					return new Fox.Core.Value(expandHorizontalLineColor);
				case "isSteppedMoveOfDirectionalLight":
					return new Fox.Core.Value(isSteppedMoveOfDirectionalLight);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				case "coefficients":
					return new Fox.Core.Value(this.coefficients[index]);
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "atshFilePath":
					this.atshFilePath = value.GetValueAsPath();
					return;
				case "pcspFilePath":
					this.pcspFilePath = value.GetValueAsPath();
					return;
				case "atshFilePtr":
					this.atshFilePtr = value.GetValueAsFilePtr();
					return;
				case "pcspFilePtr":
					this.pcspFilePtr = value.GetValueAsFilePtr();
					return;
				case "useBakedData":
					this.useBakedData = value.GetValueAsBool();
					return;
				case "capturePosition":
					this.capturePosition = value.GetValueAsEntityHandle();
					return;
				case "rayleighHeightScale":
					this.rayleighHeightScale = value.GetValueAsFloat();
					return;
				case "rayleighScatteringCoefficient":
					this.rayleighScatteringCoefficient = value.GetValueAsVector3();
					return;
				case "rayleighScatteringCoefficientOfCloudySky":
					this.rayleighScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
					return;
				case "mieHeightScale":
					this.mieHeightScale = value.GetValueAsFloat();
					return;
				case "mieAbsorptionRate":
					this.mieAbsorptionRate = value.GetValueAsFloat();
					return;
				case "mieAnisotropy":
					this.mieAnisotropy = value.GetValueAsFloat();
					return;
				case "mieScatteringCoefficient":
					this.mieScatteringCoefficient = value.GetValueAsVector3();
					return;
				case "mieAnisotropyOfCloudySky":
					this.mieAnisotropyOfCloudySky = value.GetValueAsFloat();
					return;
				case "mieScatteringCoefficientOfCloudySky":
					this.mieScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
					return;
				case "multiScatteringOrder":
					this.multiScatteringOrder = value.GetValueAsUInt32();
					return;
				case "groundColor":
					this.groundColor = value.GetValueAsColor();
					return;
				case "northAngle":
					this.northAngle = value.GetValueAsFloat();
					return;
				case "latitude":
					this.latitude = value.GetValueAsFloat();
					return;
				case "longitude":
					this.longitude = value.GetValueAsFloat();
					return;
				case "gmtTimeDifference":
					this.gmtTimeDifference = value.GetValueAsInt32();
					return;
				case "year":
					this.year = value.GetValueAsUInt32();
					return;
				case "month":
					this.month = value.GetValueAsUInt32();
					return;
				case "day":
					this.day = value.GetValueAsUInt32();
					return;
				case "shadowRange":
					this.shadowRange = value.GetValueAsFloat();
					return;
				case "shadowRangeExtra":
					this.shadowRangeExtra = value.GetValueAsFloat();
					return;
				case "hiResShadowRange":
					this.hiResShadowRange = value.GetValueAsFloat();
					return;
				case "shadowProjectionRange":
					this.shadowProjectionRange = value.GetValueAsFloat();
					return;
				case "shadowFadeRange":
					this.shadowFadeRange = value.GetValueAsFloat();
					return;
				case "selfShadowBias":
					this.selfShadowBias = value.GetValueAsFloat();
					return;
				case "shadowMaskSpecular":
					this.shadowMaskSpecular = value.GetValueAsFloat();
					return;
				case "dirLightFadeStart":
					this.dirLightFadeStart = value.GetValueAsFloat();
					return;
				case "dirLightFadeLength":
					this.dirLightFadeLength = value.GetValueAsFloat();
					return;
				case "sunLux":
					this.sunLux = value.GetValueAsFloat();
					return;
				case "moonLux":
					this.moonLux = value.GetValueAsFloat();
					return;
				case "starLight":
					this.starLight = value.GetValueAsFloat();
					return;
				case "sunMoonSize":
					this.sunMoonSize = value.GetValueAsFloat();
					return;
				case "sunMoonIntensity":
					this.sunMoonIntensity = value.GetValueAsFloat();
					return;
				case "sunTexture":
					this.sunTexture = value.GetValueAsPath();
					return;
				case "moonTexture":
					this.moonTexture = value.GetValueAsPath();
					return;
				case "moonColor":
					this.moonColor = value.GetValueAsColor();
					return;
				case "sunColorExtinctionOfClearSky":
					this.sunColorExtinctionOfClearSky = value.GetValueAsColor();
					return;
				case "sunColorOfCloudySky":
					this.sunColorOfCloudySky = value.GetValueAsColor();
					return;
				case "skyLightSunScale":
					this.skyLightSunScale = value.GetValueAsFloat();
					return;
				case "skyColorSunScale":
					this.skyColorSunScale = value.GetValueAsFloat();
					return;
				case "daySkyAmbientScale":
					this.daySkyAmbientScale = value.GetValueAsFloat();
					return;
				case "dirLightSunLimitAngle":
					this.dirLightSunLimitAngle = value.GetValueAsFloat();
					return;
				case "dirLightMoonLimitAngle":
					this.dirLightMoonLimitAngle = value.GetValueAsFloat();
					return;
				case "dirLightAttenuStart":
					this.dirLightAttenuStart = value.GetValueAsFloat();
					return;
				case "dirLightAttenuEnd":
					this.dirLightAttenuEnd = value.GetValueAsFloat();
					return;
				case "fixedLightDirSunRise":
					this.fixedLightDirSunRise = value.GetValueAsVector3();
					return;
				case "fixedLightDirSunSet":
					this.fixedLightDirSunSet = value.GetValueAsVector3();
					return;
				case "fixedLightDirMoonRise":
					this.fixedLightDirMoonRise = value.GetValueAsVector3();
					return;
				case "fixedLightDirMoonSet":
					this.fixedLightDirMoonSet = value.GetValueAsVector3();
					return;
				case "fixedRisingSunDir":
					this.fixedRisingSunDir = value.GetValueAsVector3();
					return;
				case "fixedFallingSunDir":
					this.fixedFallingSunDir = value.GetValueAsVector3();
					return;
				case "fixedRisingMoonDir":
					this.fixedRisingMoonDir = value.GetValueAsVector3();
					return;
				case "fixedFallingMoonDir":
					this.fixedFallingMoonDir = value.GetValueAsVector3();
					return;
				case "skyLightLuminanceScale":
					this.skyLightLuminanceScale = value.GetValueAsFloat();
					return;
				case "numBands":
					this.numBands = value.GetValueAsUInt32();
					return;
				case "cloudiness":
					this.cloudiness = value.GetValueAsFloat();
					return;
				case "influenceOfFog":
					this.influenceOfFog = value.GetValueAsFloat();
					return;
				case "localFlags":
					this.localFlags = value.GetValueAsUInt32();
					return;
				case "priority":
					this.priority = value.GetValueAsUInt32();
					return;
				case "interpolateTimeInSecondOfDirLightSteppedMove":
					this.interpolateTimeInSecondOfDirLightSteppedMove = value.GetValueAsFloat();
					return;
				case "divisonNumOfDirLightSteppedMove":
					this.divisonNumOfDirLightSteppedMove = value.GetValueAsUInt32();
					return;
				case "enable":
					this.enable = value.GetValueAsBool();
					return;
				case "skyEnable":
					this.skyEnable = value.GetValueAsBool();
					return;
				case "sunLightEnable":
					this.sunLightEnable = value.GetValueAsBool();
					return;
				case "isCascadeBlend":
					this.isCascadeBlend = value.GetValueAsBool();
					return;
				case "castShadow":
					this.castShadow = value.GetValueAsBool();
					return;
				case "dirLightFade":
					this.dirLightFade = value.GetValueAsBool();
					return;
				case "disableSkyCapture":
					this.disableSkyCapture = value.GetValueAsBool();
					return;
				case "skyLightEnable":
					this.skyLightEnable = value.GetValueAsBool();
					return;
				case "usePrecomputedAmbient":
					this.usePrecomputedAmbient = value.GetValueAsBool();
					return;
				case "fogEnable":
					this.fogEnable = value.GetValueAsBool();
					return;
				case "expandHorizontalLineColor":
					this.expandHorizontalLineColor = value.GetValueAsBool();
					return;
				case "isSteppedMoveOfDirectionalLight":
					this.isSteppedMoveOfDirectionalLight = value.GetValueAsBool();
					return;
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "coefficients":
					while(this.coefficients.Count <= index) { this.coefficients.Add(default(UnityEngine.Vector4)); }
					this.coefficients[index] = value.GetValueAsVector4();
					return;
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}