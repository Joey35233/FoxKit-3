//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
	[UnityEditor.InitializeOnLoad]
	public partial class TppRainFilterInterrupt : Fox.Core.Data
	{
		// Properties
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<UnityEngine.Matrix4x4> planeMatrices { get; private set; } = new Fox.DynamicArray<UnityEngine.Matrix4x4>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<Fox.Path> maskTextures { get; private set; } = new Fox.DynamicArray<Fox.Path>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<uint> interruptFlags { get; private set; } = new Fox.DynamicArray<uint>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<uint> levels { get; private set; } = new Fox.DynamicArray<uint>();
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static TppRainFilterInterrupt()
		{
			if (Fox.Core.Data.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("TppRainFilterInterrupt", typeof(TppRainFilterInterrupt), Fox.Core.Data.ClassInfo, 208, null, 2);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("planeMatrices", Fox.Core.PropertyInfo.PropertyType.Matrix4, 208, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("maskTextures", Fox.Core.PropertyInfo.PropertyType.Path, 192, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("interruptFlags", Fox.Core.PropertyInfo.PropertyType.UInt32, 224, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("levels", Fox.Core.PropertyInfo.PropertyType.UInt32, 240, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "planeMatrices":
					return new Fox.Core.Value(planeMatrices);
				case "maskTextures":
					return new Fox.Core.Value(maskTextures);
				case "interruptFlags":
					return new Fox.Core.Value(interruptFlags);
				case "levels":
					return new Fox.Core.Value(levels);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				case "planeMatrices":
					return new Fox.Core.Value(this.planeMatrices[index]);
				case "maskTextures":
					return new Fox.Core.Value(this.maskTextures[index]);
				case "interruptFlags":
					return new Fox.Core.Value(this.interruptFlags[index]);
				case "levels":
					return new Fox.Core.Value(this.levels[index]);
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "planeMatrices":
					while(this.planeMatrices.Count <= index) { this.planeMatrices.Add(default(UnityEngine.Matrix4x4)); }
					this.planeMatrices[index] = value.GetValueAsMatrix4();
					return;
				case "maskTextures":
					while(this.maskTextures.Count <= index) { this.maskTextures.Add(default(Fox.Path)); }
					this.maskTextures[index] = value.GetValueAsPath();
					return;
				case "interruptFlags":
					while(this.interruptFlags.Count <= index) { this.interruptFlags.Add(default(uint)); }
					this.interruptFlags[index] = value.GetValueAsUInt32();
					return;
				case "levels":
					while(this.levels.Count <= index) { this.levels.Add(default(uint)); }
					this.levels[index] = value.GetValueAsUInt32();
					return;
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}