//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Anim
{
	[UnityEditor.InitializeOnLoad]
	public partial class EventDataUnit : Fox.Core.Data
	{
		// Properties
		[field: UnityEngine.SerializeField]
		public string eventName { get; set; }
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<Fox.Anim.TimeSection> sections { get; private set; } = new Fox.DynamicArray<Fox.Anim.TimeSection>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<string> paramString { get; private set; } = new Fox.DynamicArray<string>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<int> paramInt { get; private set; } = new Fox.DynamicArray<int>();
		
		[field: UnityEngine.SerializeField]
		public Fox.DynamicArray<float> paramFloat { get; private set; } = new Fox.DynamicArray<float>();
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static EventDataUnit()
		{
			if (Fox.Core.Data.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("EventDataUnit", typeof(EventDataUnit), Fox.Core.Data.ClassInfo, 136, null, 2);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("eventName", Fox.Core.PropertyInfo.PropertyType.String, 120, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sections", Fox.Core.PropertyInfo.PropertyType.EntityPtr, 128, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, typeof(Fox.Anim.TimeSection), null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("paramString", Fox.Core.PropertyInfo.PropertyType.String, 144, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("paramInt", Fox.Core.PropertyInfo.PropertyType.Int32, 160, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("paramFloat", Fox.Core.PropertyInfo.PropertyType.Float, 176, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "eventName":
					return new Fox.Core.Value(eventName);
				case "sections":
					return new Fox.Core.Value(sections);
				case "paramString":
					return new Fox.Core.Value(paramString);
				case "paramInt":
					return new Fox.Core.Value(paramInt);
				case "paramFloat":
					return new Fox.Core.Value(paramFloat);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				case "sections":
					return new Fox.Core.Value(this.sections[index]);
				case "paramString":
					return new Fox.Core.Value(this.paramString[index]);
				case "paramInt":
					return new Fox.Core.Value(this.paramInt[index]);
				case "paramFloat":
					return new Fox.Core.Value(this.paramFloat[index]);
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "eventName":
					this.eventName = value.GetValueAsString();
					return;
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "sections":
					while(this.sections.Count <= index) { this.sections.Add(default(Fox.Anim.TimeSection)); }
					this.sections[index] = value.GetValueAsEntityPtr<Fox.Anim.TimeSection>();
					return;
				case "paramString":
					while(this.paramString.Count <= index) { this.paramString.Add(default(string)); }
					this.paramString[index] = value.GetValueAsString();
					return;
				case "paramInt":
					while(this.paramInt.Count <= index) { this.paramInt.Add(default(int)); }
					this.paramInt[index] = value.GetValueAsInt32();
					return;
				case "paramFloat":
					while(this.paramFloat.Count <= index) { this.paramFloat.Add(default(float)); }
					this.paramFloat[index] = value.GetValueAsFloat();
					return;
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}