//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.GameKit
{
	[UnityEditor.InitializeOnLoad]
	public partial class WindParameter : Fox.GameKit.EnvironmentParameter
	{
		// Properties
		public float speed { get => Get_speed(); set { Set_speed(value); } }
		private partial float Get_speed();
		private partial void Set_speed(float value);
		
		public UnityEngine.Quaternion rotation { get => Get_rotation(); set { Set_rotation(value); } }
		private partial UnityEngine.Quaternion Get_rotation();
		private partial void Set_rotation(UnityEngine.Quaternion value);
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 velocity { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float speedTurbulentRate { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float speedTurbulentCycle { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float rotTurbulentRate { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float rotTurbulentCycle { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float influenceOfGlobal { get; set; }
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static WindParameter()
		{
			if (Fox.GameKit.EnvironmentParameter.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("WindParameter", typeof(WindParameter), Fox.GameKit.EnvironmentParameter.ClassInfo, 80, null, 6);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("speed", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rotation", Fox.Core.PropertyInfo.PropertyType.Quat, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("velocity", Fox.Core.PropertyInfo.PropertyType.Vector3, 64, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("speedTurbulentRate", Fox.Core.PropertyInfo.PropertyType.Float, 80, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("speedTurbulentCycle", Fox.Core.PropertyInfo.PropertyType.Float, 84, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rotTurbulentRate", Fox.Core.PropertyInfo.PropertyType.Float, 88, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("rotTurbulentCycle", Fox.Core.PropertyInfo.PropertyType.Float, 92, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("influenceOfGlobal", Fox.Core.PropertyInfo.PropertyType.Float, 96, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "speed":
					return new Fox.Core.Value(speed);
				case "rotation":
					return new Fox.Core.Value(rotation);
				case "velocity":
					return new Fox.Core.Value(velocity);
				case "speedTurbulentRate":
					return new Fox.Core.Value(speedTurbulentRate);
				case "speedTurbulentCycle":
					return new Fox.Core.Value(speedTurbulentCycle);
				case "rotTurbulentRate":
					return new Fox.Core.Value(rotTurbulentRate);
				case "rotTurbulentCycle":
					return new Fox.Core.Value(rotTurbulentCycle);
				case "influenceOfGlobal":
					return new Fox.Core.Value(influenceOfGlobal);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "speed":
					this.speed = value.GetValueAsFloat();
					return;
				case "rotation":
					this.rotation = value.GetValueAsQuat();
					return;
				case "velocity":
					this.velocity = value.GetValueAsVector3();
					return;
				case "speedTurbulentRate":
					this.speedTurbulentRate = value.GetValueAsFloat();
					return;
				case "speedTurbulentCycle":
					this.speedTurbulentCycle = value.GetValueAsFloat();
					return;
				case "rotTurbulentRate":
					this.rotTurbulentRate = value.GetValueAsFloat();
					return;
				case "rotTurbulentCycle":
					this.rotTurbulentCycle = value.GetValueAsFloat();
					return;
				case "influenceOfGlobal":
					this.influenceOfGlobal = value.GetValueAsFloat();
					return;
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}