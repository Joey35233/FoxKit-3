//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.GameKit
{
	[UnityEditor.InitializeOnLoad]
	public partial class Camera : Fox.Core.Entity
	{
		// Properties
		[field: UnityEngine.SerializeField]
		protected Fox.Kernel.String priorityName { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool enable { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Quaternion transform_rotation_quat { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 transform_translation { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float focusDistance { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float focalLength { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool useEffectiveFocalLength { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float effectiveFocalLengthRatio { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float aperture { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Quaternion listenerVirtualTrans_rotation_quat { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected UnityEngine.Vector3 listenerVirtualTrans_translation { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool listenerVirtualFlag { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float nearClipDistance { get; set; }
		
		[field: UnityEngine.SerializeField]
		public float farClipDistance { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float shutterSpeed { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool useDefaultExposureValue { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float minExposure { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float maxExposure { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float exposureCompensation { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool useDefaultBloom { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float bloomSize { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float bloomWeight { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected float bloomBrightnessExtraction { get; set; }
		
		[field: UnityEngine.SerializeField]
		protected bool cancelCameraBlur { get; set; }
		
		public float keyValue { get => Get_keyValue(); set { Set_keyValue(value); } }
		private partial float Get_keyValue();
		private partial void Set_keyValue(float value);
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static Camera()
		{
			if (Fox.Core.Entity.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo(new Fox.Kernel.String("Camera"), typeof(Camera), Fox.Core.Entity.ClassInfo, 0, null, 10);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("priorityName"), Fox.Core.PropertyInfo.PropertyType.String, 264, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("enable"), Fox.Core.PropertyInfo.PropertyType.Bool, 224, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("transform_rotation_quat"), Fox.Core.PropertyInfo.PropertyType.Quat, 288, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("transform_translation"), Fox.Core.PropertyInfo.PropertyType.Vector3, 304, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("focusDistance"), Fox.Core.PropertyInfo.PropertyType.Float, 56, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("focalLength"), Fox.Core.PropertyInfo.PropertyType.Float, 60, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("useEffectiveFocalLength"), Fox.Core.PropertyInfo.PropertyType.Bool, 227, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("effectiveFocalLengthRatio"), Fox.Core.PropertyInfo.PropertyType.Float, 64, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("aperture"), Fox.Core.PropertyInfo.PropertyType.Float, 68, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("listenerVirtualTrans_rotation_quat"), Fox.Core.PropertyInfo.PropertyType.Quat, 352, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("listenerVirtualTrans_translation"), Fox.Core.PropertyInfo.PropertyType.Vector3, 368, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("listenerVirtualFlag"), Fox.Core.PropertyInfo.PropertyType.Bool, 226, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("nearClipDistance"), Fox.Core.PropertyInfo.PropertyType.Float, 72, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("farClipDistance"), Fox.Core.PropertyInfo.PropertyType.Float, 76, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("shutterSpeed"), Fox.Core.PropertyInfo.PropertyType.Float, 80, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("useDefaultExposureValue"), Fox.Core.PropertyInfo.PropertyType.Bool, 229, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("minExposure"), Fox.Core.PropertyInfo.PropertyType.Float, 84, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("maxExposure"), Fox.Core.PropertyInfo.PropertyType.Float, 88, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("exposureCompensation"), Fox.Core.PropertyInfo.PropertyType.Float, 92, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("useDefaultBloom"), Fox.Core.PropertyInfo.PropertyType.Bool, 230, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("bloomSize"), Fox.Core.PropertyInfo.PropertyType.Float, 96, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("bloomWeight"), Fox.Core.PropertyInfo.PropertyType.Float, 104, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("bloomBrightnessExtraction"), Fox.Core.PropertyInfo.PropertyType.Float, 100, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("cancelCameraBlur"), Fox.Core.PropertyInfo.PropertyType.Bool, 228, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo(new Fox.Kernel.String("keyValue"), Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));

			ClassInfoInitialized = true;
		}

		// Constructors
		public Camera(ulong id) : base(id) { }
		public Camera() : base() { }
		
		public override Fox.Core.Value GetProperty(Fox.Kernel.String propertyName)
		{
			switch (propertyName.CString)
			{
				case "priorityName":
					return new Fox.Core.Value(priorityName);
				case "enable":
					return new Fox.Core.Value(enable);
				case "transform_rotation_quat":
					return new Fox.Core.Value(transform_rotation_quat);
				case "transform_translation":
					return new Fox.Core.Value(transform_translation);
				case "focusDistance":
					return new Fox.Core.Value(focusDistance);
				case "focalLength":
					return new Fox.Core.Value(focalLength);
				case "useEffectiveFocalLength":
					return new Fox.Core.Value(useEffectiveFocalLength);
				case "effectiveFocalLengthRatio":
					return new Fox.Core.Value(effectiveFocalLengthRatio);
				case "aperture":
					return new Fox.Core.Value(aperture);
				case "listenerVirtualTrans_rotation_quat":
					return new Fox.Core.Value(listenerVirtualTrans_rotation_quat);
				case "listenerVirtualTrans_translation":
					return new Fox.Core.Value(listenerVirtualTrans_translation);
				case "listenerVirtualFlag":
					return new Fox.Core.Value(listenerVirtualFlag);
				case "nearClipDistance":
					return new Fox.Core.Value(nearClipDistance);
				case "farClipDistance":
					return new Fox.Core.Value(farClipDistance);
				case "shutterSpeed":
					return new Fox.Core.Value(shutterSpeed);
				case "useDefaultExposureValue":
					return new Fox.Core.Value(useDefaultExposureValue);
				case "minExposure":
					return new Fox.Core.Value(minExposure);
				case "maxExposure":
					return new Fox.Core.Value(maxExposure);
				case "exposureCompensation":
					return new Fox.Core.Value(exposureCompensation);
				case "useDefaultBloom":
					return new Fox.Core.Value(useDefaultBloom);
				case "bloomSize":
					return new Fox.Core.Value(bloomSize);
				case "bloomWeight":
					return new Fox.Core.Value(bloomWeight);
				case "bloomBrightnessExtraction":
					return new Fox.Core.Value(bloomBrightnessExtraction);
				case "cancelCameraBlur":
					return new Fox.Core.Value(cancelCameraBlur);
				case "keyValue":
					return new Fox.Core.Value(keyValue);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(Fox.Kernel.String propertyName, ushort index)
		{
			switch (propertyName.CString)
			{
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(Fox.Kernel.String propertyName, Fox.Kernel.String key)
		{
			switch (propertyName.CString)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(Fox.Kernel.String propertyName, Fox.Core.Value value)
		{
			switch (propertyName.CString)
			{
				case "priorityName":
					this.priorityName = value.GetValueAsString();
					return;
				case "enable":
					this.enable = value.GetValueAsBool();
					return;
				case "transform_rotation_quat":
					this.transform_rotation_quat = value.GetValueAsQuat();
					return;
				case "transform_translation":
					this.transform_translation = value.GetValueAsVector3();
					return;
				case "focusDistance":
					this.focusDistance = value.GetValueAsFloat();
					return;
				case "focalLength":
					this.focalLength = value.GetValueAsFloat();
					return;
				case "useEffectiveFocalLength":
					this.useEffectiveFocalLength = value.GetValueAsBool();
					return;
				case "effectiveFocalLengthRatio":
					this.effectiveFocalLengthRatio = value.GetValueAsFloat();
					return;
				case "aperture":
					this.aperture = value.GetValueAsFloat();
					return;
				case "listenerVirtualTrans_rotation_quat":
					this.listenerVirtualTrans_rotation_quat = value.GetValueAsQuat();
					return;
				case "listenerVirtualTrans_translation":
					this.listenerVirtualTrans_translation = value.GetValueAsVector3();
					return;
				case "listenerVirtualFlag":
					this.listenerVirtualFlag = value.GetValueAsBool();
					return;
				case "nearClipDistance":
					this.nearClipDistance = value.GetValueAsFloat();
					return;
				case "farClipDistance":
					this.farClipDistance = value.GetValueAsFloat();
					return;
				case "shutterSpeed":
					this.shutterSpeed = value.GetValueAsFloat();
					return;
				case "useDefaultExposureValue":
					this.useDefaultExposureValue = value.GetValueAsBool();
					return;
				case "minExposure":
					this.minExposure = value.GetValueAsFloat();
					return;
				case "maxExposure":
					this.maxExposure = value.GetValueAsFloat();
					return;
				case "exposureCompensation":
					this.exposureCompensation = value.GetValueAsFloat();
					return;
				case "useDefaultBloom":
					this.useDefaultBloom = value.GetValueAsBool();
					return;
				case "bloomSize":
					this.bloomSize = value.GetValueAsFloat();
					return;
				case "bloomWeight":
					this.bloomWeight = value.GetValueAsFloat();
					return;
				case "bloomBrightnessExtraction":
					this.bloomBrightnessExtraction = value.GetValueAsFloat();
					return;
				case "cancelCameraBlur":
					this.cancelCameraBlur = value.GetValueAsBool();
					return;
				case "keyValue":
					this.keyValue = value.GetValueAsFloat();
					return;
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(Fox.Kernel.String propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName.CString)
			{
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(Fox.Kernel.String propertyName, Fox.Kernel.String key, Fox.Core.Value value)
		{
			switch (propertyName.CString)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}