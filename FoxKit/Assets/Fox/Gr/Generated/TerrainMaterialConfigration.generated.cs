//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Gr
{
	[UnityEditor.InitializeOnLoad]
	public partial class TerrainMaterialConfigration : Fox.Core.Data
	{
		// Properties
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<uint> slot0 { get; private set; } = new CsSystem.Collections.Generic.List<uint>();
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<uint> slot1 { get; private set; } = new CsSystem.Collections.Generic.List<uint>();
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<uint> slot2 { get; private set; } = new CsSystem.Collections.Generic.List<uint>();
		
		[field: UnityEngine.SerializeField]
		public CsSystem.Collections.Generic.List<uint> slot3 { get; private set; } = new CsSystem.Collections.Generic.List<uint>();
		
		// ClassInfos
		public static new bool ClassInfoInitialized = false;
		private static Fox.Core.EntityInfo classInfo;
		public static new Fox.Core.EntityInfo ClassInfo
		{
			get
			{
				return classInfo;
			}
		}
		public override Fox.Core.EntityInfo GetClassEntityInfo()
		{
			return classInfo;
		}
		static TerrainMaterialConfigration()
		{
			if (Fox.Core.Data.ClassInfoInitialized)
				classInfo = new Fox.Core.EntityInfo("TerrainMaterialConfigration", typeof(TerrainMaterialConfigration), Fox.Core.Data.ClassInfo, 128, null, 0);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("slot0", Fox.Core.PropertyInfo.PropertyType.UInt32, 120, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("slot1", Fox.Core.PropertyInfo.PropertyType.UInt32, 136, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("slot2", Fox.Core.PropertyInfo.PropertyType.UInt32, 152, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("slot3", Fox.Core.PropertyInfo.PropertyType.UInt32, 168, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));

			ClassInfoInitialized = true;
		}
		
		public override Fox.Core.Value GetProperty(string propertyName)
		{
			switch (propertyName)
			{
				case "slot0":
					return new Fox.Core.Value(slot0);
				case "slot1":
					return new Fox.Core.Value(slot1);
				case "slot2":
					return new Fox.Core.Value(slot2);
				case "slot3":
					return new Fox.Core.Value(slot3);
				default:
					return base.GetProperty(propertyName);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, ushort index)
		{
			switch (propertyName)
			{
				case "slot0":
					return new Fox.Core.Value(this.slot0[index]);
				case "slot1":
					return new Fox.Core.Value(this.slot1[index]);
				case "slot2":
					return new Fox.Core.Value(this.slot2[index]);
				case "slot3":
					return new Fox.Core.Value(this.slot3[index]);
				default:
					return base.GetPropertyElement(propertyName, index);
			}
		}

		public override Fox.Core.Value GetPropertyElement(string propertyName, string key)
		{
			switch (propertyName)
			{
				default:
					return base.GetPropertyElement(propertyName, key);
			}
		}

		public override void SetProperty(string propertyName, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetProperty(propertyName, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				case "slot0":
					while(this.slot0.Count <= index) { this.slot0.Add(default(uint)); }
					this.slot0[index] = value.GetValueAsUInt32();
					return;
				case "slot1":
					while(this.slot1.Count <= index) { this.slot1.Add(default(uint)); }
					this.slot1[index] = value.GetValueAsUInt32();
					return;
				case "slot2":
					while(this.slot2.Count <= index) { this.slot2.Add(default(uint)); }
					this.slot2[index] = value.GetValueAsUInt32();
					return;
				case "slot3":
					while(this.slot3.Count <= index) { this.slot3.Add(default(uint)); }
					this.slot3[index] = value.GetValueAsUInt32();
					return;
				default:
					base.SetPropertyElement(propertyName, index, value);
					return;
			}
		}

		public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
		{
			switch (propertyName)
			{
				default:
					base.SetPropertyElement(propertyName, key, value);
					return;
			}
		}
	}
}