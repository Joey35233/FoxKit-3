//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
    public partial class TppAtmosphere : Fox.Core.Data 
    {
        // Properties
        public Fox.Core.Path atshFilePath;
        
        public Fox.Core.Path pcspFilePath;
        
        public Fox.Core.FilePtr<Fox.Core.File> atshFilePtr;
        
        public Fox.Core.FilePtr<Fox.Core.File> pcspFilePtr;
        
        public bool useBakedData;
        
        public Fox.Core.EntityHandle capturePosition;
        
        public float rayleighHeightScale;
        
        public UnityEngine.Vector3 rayleighScatteringCoefficient;
        
        public UnityEngine.Vector3 rayleighScatteringCoefficientOfCloudySky;
        
        public float mieHeightScale;
        
        public float mieAbsorptionRate;
        
        public float mieAnisotropy;
        
        public UnityEngine.Vector3 mieScatteringCoefficient;
        
        public float mieAnisotropyOfCloudySky;
        
        public UnityEngine.Vector3 mieScatteringCoefficientOfCloudySky;
        
        public uint multiScatteringOrder;
        
        public UnityEngine.Color groundColor;
        
        public float northAngle;
        
        public float latitude;
        
        public float longitude;
        
        public int gmtTimeDifference;
        
        public uint year;
        
        public uint month;
        
        public uint day;
        
        public float shadowRange;
        
        public float shadowRangeExtra;
        
        public float hiResShadowRange;
        
        public float shadowProjectionRange;
        
        public float shadowFadeRange;
        
        public float selfShadowBias;
        
        public float shadowMaskSpecular;
        
        public float dirLightFadeStart;
        
        public float dirLightFadeLength;
        
        public float sunLux;
        
        public float moonLux;
        
        public float starLight;
        
        public float sunMoonSize;
        
        public float sunMoonIntensity;
        
        public Fox.Core.Path sunTexture;
        
        public Fox.Core.Path moonTexture;
        
        public UnityEngine.Color moonColor;
        
        public UnityEngine.Color sunColorExtinctionOfClearSky;
        
        public UnityEngine.Color sunColorOfCloudySky;
        
        public float skyLightSunScale;
        
        public float skyColorSunScale;
        
        public float daySkyAmbientScale;
        
        public float dirLightSunLimitAngle;
        
        public float dirLightMoonLimitAngle;
        
        public float dirLightAttenuStart;
        
        public float dirLightAttenuEnd;
        
        public UnityEngine.Vector3 fixedLightDirSunRise;
        
        public UnityEngine.Vector3 fixedLightDirSunSet;
        
        public UnityEngine.Vector3 fixedLightDirMoonRise;
        
        public UnityEngine.Vector3 fixedLightDirMoonSet;
        
        public UnityEngine.Vector3 fixedRisingSunDir;
        
        public UnityEngine.Vector3 fixedFallingSunDir;
        
        public UnityEngine.Vector3 fixedRisingMoonDir;
        
        public UnityEngine.Vector3 fixedFallingMoonDir;
        
        public float skyLightLuminanceScale;
        
        public uint numBands;
        
        public CsSystem.Collections.Generic.List<UnityEngine.Vector4> coefficients = new CsSystem.Collections.Generic.List<UnityEngine.Vector4>();
        
        public float cloudiness;
        
        public float influenceOfFog;
        
        public uint localFlags;
        
        public uint priority;
        
        public float interpolateTimeInSecondOfDirLightSteppedMove;
        
        public uint divisonNumOfDirLightSteppedMove;
        
        public bool enable;
        
        public bool skyEnable;
        
        public bool sunLightEnable;
        
        public bool isCascadeBlend;
        
        public bool castShadow;
        
        public bool dirLightFade;
        
        public bool disableSkyCapture;
        
        public bool skyLightEnable;
        
        public bool usePrecomputedAmbient;
        
        public bool fogEnable;
        
        public bool expandHorizontalLineColor;
        
        public bool isSteppedMoveOfDirectionalLight;
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public  override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppAtmosphere()
        {
            classInfo = new Fox.EntityInfo("TppAtmosphere", new Fox.Core.Data(0, 0, 0).GetClassEntityInfo(), 608, "Light", 21);
			
			classInfo.StaticProperties.Insert("atshFilePath", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Path, 416, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("pcspFilePath", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Path, 424, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("atshFilePtr", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.FilePtr, 432, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("pcspFilePtr", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.FilePtr, 456, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("useBakedData", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("capturePosition", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityHandle, 488, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("rayleighHeightScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 496, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("rayleighScatteringCoefficient", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 128, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("rayleighScatteringCoefficientOfCloudySky", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 144, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieHeightScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 500, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieAbsorptionRate", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 504, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieAnisotropy", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 508, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieScatteringCoefficient", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 160, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieAnisotropyOfCloudySky", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 512, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("mieScatteringCoefficientOfCloudySky", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 176, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("multiScatteringOrder", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 644, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("groundColor", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Color, 320, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("northAngle", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 516, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("latitude", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 520, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("longitude", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 524, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("gmtTimeDifference", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 640, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("year", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 648, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("month", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 652, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("day", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 656, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("shadowRange", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 540, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("shadowRangeExtra", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 544, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("hiResShadowRange", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 548, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("shadowProjectionRange", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 552, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("shadowFadeRange", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 556, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("selfShadowBias", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 560, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("shadowMaskSpecular", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 568, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightFadeStart", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 572, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightFadeLength", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 576, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunLux", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 588, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("moonLux", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 592, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("starLight", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 596, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunMoonSize", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 580, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunMoonIntensity", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 584, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunTexture", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Path, 400, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("moonTexture", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Path, 408, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("moonColor", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Color, 336, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunColorExtinctionOfClearSky", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Color, 352, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunColorOfCloudySky", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Color, 368, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("skyLightSunScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 600, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("skyColorSunScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 604, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("daySkyAmbientScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 608, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightSunLimitAngle", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 612, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightMoonLimitAngle", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 616, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightAttenuStart", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 620, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightAttenuEnd", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 624, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedLightDirSunRise", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 192, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedLightDirSunSet", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 208, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedLightDirMoonRise", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 224, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedLightDirMoonSet", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 240, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedRisingSunDir", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 256, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedFallingSunDir", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 272, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedRisingMoonDir", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 288, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fixedFallingMoonDir", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 304, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("skyLightLuminanceScale", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 632, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("numBands", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 660, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("coefficients", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector4, 384, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("cloudiness", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 628, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("influenceOfFog", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 528, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("localFlags", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 664, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("priority", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 668, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("interpolateTimeInSecondOfDirLightSteppedMove", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 636, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("divisonNumOfDirLightSteppedMove", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 672, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("enable", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("skyEnable", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("sunLightEnable", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isCascadeBlend", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("castShadow", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("dirLightFade", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("disableSkyCapture", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("skyLightEnable", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("usePrecomputedAmbient", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("fogEnable", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("expandHorizontalLineColor", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("isSteppedMoveOfDirectionalLight", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public TppAtmosphere(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(string propertyName, Fox.Value value)
        {
            switch(propertyName)
            {
                case "atshFilePath":
                    this.atshFilePath = value.GetValueAsPath();
                    return;
                case "pcspFilePath":
                    this.pcspFilePath = value.GetValueAsPath();
                    return;
                case "atshFilePtr":
                    this.atshFilePtr = value.GetValueAsFilePtr();
                    return;
                case "pcspFilePtr":
                    this.pcspFilePtr = value.GetValueAsFilePtr();
                    return;
                case "useBakedData":
                    this.useBakedData = value.GetValueAsBool();
                    return;
                case "capturePosition":
                    this.capturePosition = value.GetValueAsEntityHandle();
                    return;
                case "rayleighHeightScale":
                    this.rayleighHeightScale = value.GetValueAsFloat();
                    return;
                case "rayleighScatteringCoefficient":
                    this.rayleighScatteringCoefficient = value.GetValueAsVector3();
                    return;
                case "rayleighScatteringCoefficientOfCloudySky":
                    this.rayleighScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
                    return;
                case "mieHeightScale":
                    this.mieHeightScale = value.GetValueAsFloat();
                    return;
                case "mieAbsorptionRate":
                    this.mieAbsorptionRate = value.GetValueAsFloat();
                    return;
                case "mieAnisotropy":
                    this.mieAnisotropy = value.GetValueAsFloat();
                    return;
                case "mieScatteringCoefficient":
                    this.mieScatteringCoefficient = value.GetValueAsVector3();
                    return;
                case "mieAnisotropyOfCloudySky":
                    this.mieAnisotropyOfCloudySky = value.GetValueAsFloat();
                    return;
                case "mieScatteringCoefficientOfCloudySky":
                    this.mieScatteringCoefficientOfCloudySky = value.GetValueAsVector3();
                    return;
                case "multiScatteringOrder":
                    this.multiScatteringOrder = value.GetValueAsUInt32();
                    return;
                case "groundColor":
                    this.groundColor = value.GetValueAsColor();
                    return;
                case "northAngle":
                    this.northAngle = value.GetValueAsFloat();
                    return;
                case "latitude":
                    this.latitude = value.GetValueAsFloat();
                    return;
                case "longitude":
                    this.longitude = value.GetValueAsFloat();
                    return;
                case "gmtTimeDifference":
                    this.gmtTimeDifference = value.GetValueAsInt32();
                    return;
                case "year":
                    this.year = value.GetValueAsUInt32();
                    return;
                case "month":
                    this.month = value.GetValueAsUInt32();
                    return;
                case "day":
                    this.day = value.GetValueAsUInt32();
                    return;
                case "shadowRange":
                    this.shadowRange = value.GetValueAsFloat();
                    return;
                case "shadowRangeExtra":
                    this.shadowRangeExtra = value.GetValueAsFloat();
                    return;
                case "hiResShadowRange":
                    this.hiResShadowRange = value.GetValueAsFloat();
                    return;
                case "shadowProjectionRange":
                    this.shadowProjectionRange = value.GetValueAsFloat();
                    return;
                case "shadowFadeRange":
                    this.shadowFadeRange = value.GetValueAsFloat();
                    return;
                case "selfShadowBias":
                    this.selfShadowBias = value.GetValueAsFloat();
                    return;
                case "shadowMaskSpecular":
                    this.shadowMaskSpecular = value.GetValueAsFloat();
                    return;
                case "dirLightFadeStart":
                    this.dirLightFadeStart = value.GetValueAsFloat();
                    return;
                case "dirLightFadeLength":
                    this.dirLightFadeLength = value.GetValueAsFloat();
                    return;
                case "sunLux":
                    this.sunLux = value.GetValueAsFloat();
                    return;
                case "moonLux":
                    this.moonLux = value.GetValueAsFloat();
                    return;
                case "starLight":
                    this.starLight = value.GetValueAsFloat();
                    return;
                case "sunMoonSize":
                    this.sunMoonSize = value.GetValueAsFloat();
                    return;
                case "sunMoonIntensity":
                    this.sunMoonIntensity = value.GetValueAsFloat();
                    return;
                case "sunTexture":
                    this.sunTexture = value.GetValueAsPath();
                    return;
                case "moonTexture":
                    this.moonTexture = value.GetValueAsPath();
                    return;
                case "moonColor":
                    this.moonColor = value.GetValueAsColor();
                    return;
                case "sunColorExtinctionOfClearSky":
                    this.sunColorExtinctionOfClearSky = value.GetValueAsColor();
                    return;
                case "sunColorOfCloudySky":
                    this.sunColorOfCloudySky = value.GetValueAsColor();
                    return;
                case "skyLightSunScale":
                    this.skyLightSunScale = value.GetValueAsFloat();
                    return;
                case "skyColorSunScale":
                    this.skyColorSunScale = value.GetValueAsFloat();
                    return;
                case "daySkyAmbientScale":
                    this.daySkyAmbientScale = value.GetValueAsFloat();
                    return;
                case "dirLightSunLimitAngle":
                    this.dirLightSunLimitAngle = value.GetValueAsFloat();
                    return;
                case "dirLightMoonLimitAngle":
                    this.dirLightMoonLimitAngle = value.GetValueAsFloat();
                    return;
                case "dirLightAttenuStart":
                    this.dirLightAttenuStart = value.GetValueAsFloat();
                    return;
                case "dirLightAttenuEnd":
                    this.dirLightAttenuEnd = value.GetValueAsFloat();
                    return;
                case "fixedLightDirSunRise":
                    this.fixedLightDirSunRise = value.GetValueAsVector3();
                    return;
                case "fixedLightDirSunSet":
                    this.fixedLightDirSunSet = value.GetValueAsVector3();
                    return;
                case "fixedLightDirMoonRise":
                    this.fixedLightDirMoonRise = value.GetValueAsVector3();
                    return;
                case "fixedLightDirMoonSet":
                    this.fixedLightDirMoonSet = value.GetValueAsVector3();
                    return;
                case "fixedRisingSunDir":
                    this.fixedRisingSunDir = value.GetValueAsVector3();
                    return;
                case "fixedFallingSunDir":
                    this.fixedFallingSunDir = value.GetValueAsVector3();
                    return;
                case "fixedRisingMoonDir":
                    this.fixedRisingMoonDir = value.GetValueAsVector3();
                    return;
                case "fixedFallingMoonDir":
                    this.fixedFallingMoonDir = value.GetValueAsVector3();
                    return;
                case "skyLightLuminanceScale":
                    this.skyLightLuminanceScale = value.GetValueAsFloat();
                    return;
                case "numBands":
                    this.numBands = value.GetValueAsUInt32();
                    return;
                case "cloudiness":
                    this.cloudiness = value.GetValueAsFloat();
                    return;
                case "influenceOfFog":
                    this.influenceOfFog = value.GetValueAsFloat();
                    return;
                case "localFlags":
                    this.localFlags = value.GetValueAsUInt32();
                    return;
                case "priority":
                    this.priority = value.GetValueAsUInt32();
                    return;
                case "interpolateTimeInSecondOfDirLightSteppedMove":
                    this.interpolateTimeInSecondOfDirLightSteppedMove = value.GetValueAsFloat();
                    return;
                case "divisonNumOfDirLightSteppedMove":
                    this.divisonNumOfDirLightSteppedMove = value.GetValueAsUInt32();
                    return;
                case "enable":
                    this.enable = value.GetValueAsBool();
                    return;
                case "skyEnable":
                    this.skyEnable = value.GetValueAsBool();
                    return;
                case "sunLightEnable":
                    this.sunLightEnable = value.GetValueAsBool();
                    return;
                case "isCascadeBlend":
                    this.isCascadeBlend = value.GetValueAsBool();
                    return;
                case "castShadow":
                    this.castShadow = value.GetValueAsBool();
                    return;
                case "dirLightFade":
                    this.dirLightFade = value.GetValueAsBool();
                    return;
                case "disableSkyCapture":
                    this.disableSkyCapture = value.GetValueAsBool();
                    return;
                case "skyLightEnable":
                    this.skyLightEnable = value.GetValueAsBool();
                    return;
                case "usePrecomputedAmbient":
                    this.usePrecomputedAmbient = value.GetValueAsBool();
                    return;
                case "fogEnable":
                    this.fogEnable = value.GetValueAsBool();
                    return;
                case "expandHorizontalLineColor":
                    this.expandHorizontalLineColor = value.GetValueAsBool();
                    return;
                case "isSteppedMoveOfDirectionalLight":
                    this.isSteppedMoveOfDirectionalLight = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Value value)
        {
            switch(propertyName)
            {
                case "coefficients":
                    while(this.coefficients.Count <= index) { this.coefficients.Add(default(UnityEngine.Vector4)); }
                    this.coefficients[index] = value.GetValueAsVector4();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Value value)
        {
            switch(propertyName)
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}