//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Geo
{
    public partial class GeoModuleCondition : Fox.Geo.GeoTrapCondition 
    {
        // Properties
        public bool isAndCheck;
        
        public Fox.Core.DynamicArray<Fox.String> checkFuncNames = new Fox.Core.DynamicArray<Fox.String>();
        
        public Fox.Core.DynamicArray<Fox.String> execFuncNames = new Fox.Core.DynamicArray<Fox.String>();
        
        public Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>> checkCallbackDataElements = new Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>>();
        
        public Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>> execCallbackDataElements = new Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>>();
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public  override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static GeoModuleCondition()
        {
            classInfo = new Fox.EntityInfo("GeoModuleCondition", new Fox.Geo.GeoTrapCondition().GetClassEntityInfo(), 352, "Trap", 0);
			
			classInfo.StaticProperties.Insert("isAndCheck", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 320, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("checkFuncNames", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 328, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("execFuncNames", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 344, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("checkCallbackDataElements", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityPtr, 360, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, typeof(Fox.Geo.GeoTrapModuleCallbackDataElement), null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("execCallbackDataElements", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityPtr, 376, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, typeof(Fox.Geo.GeoTrapModuleCallbackDataElement), null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructors
		public GeoModuleCondition(ulong address, ulong id) : base(address, id) { }
		public GeoModuleCondition() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Value value)
        {
            switch(propertyName)
            {
                case "isAndCheck":
                    this.isAndCheck = value.GetValueAsBool();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Value value)
        {
            switch(propertyName)
            {
                case "checkFuncNames":
                    while(this.checkFuncNames.Count <= index) { this.checkFuncNames.Add(default(Fox.String)); }
                    this.checkFuncNames[index] = value.GetValueAsString();
                    return;
                case "execFuncNames":
                    while(this.execFuncNames.Count <= index) { this.execFuncNames.Add(default(Fox.String)); }
                    this.execFuncNames[index] = value.GetValueAsString();
                    return;
                case "checkCallbackDataElements":
                    while(this.checkCallbackDataElements.Count <= index) { this.checkCallbackDataElements.Add(default(Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>)); }
                    this.checkCallbackDataElements[index] = value.GetValueAsEntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>();
                    return;
                case "execCallbackDataElements":
                    while(this.execCallbackDataElements.Count <= index) { this.execCallbackDataElements.Add(default(Fox.Core.EntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>)); }
                    this.execCallbackDataElements[index] = value.GetValueAsEntityPtr<Fox.Geo.GeoTrapModuleCallbackDataElement>();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Value value)
        {
            switch(propertyName)
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}