//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Phx
{
    [UnityEditor.InitializeOnLoad]
    public partial class PhxVehicleNormalEngine : Fox.Core.Data 
    {
        // Properties
        public Fox.Core.DynamicArray<Fox.Core.EntityLink> vehicleAxes = new Fox.Core.DynamicArray<Fox.Core.EntityLink>();
        
        public Fox.Core.DynamicArray<float> torqueDistributions = new Fox.Core.DynamicArray<float>();
        
        public Fox.Core.DynamicArray<float> gearRatios = new Fox.Core.DynamicArray<float>();
        
        public Fox.Core.EntityPtr<Fox.Phx.PhVehicleNormalEngineParam> vehicleNormalEngineParam = new Fox.Core.EntityPtr<Fox.Phx.PhVehicleNormalEngineParam>();
        
        public Fox.Core.DynamicArray<float> specPointAngularVelocity = new Fox.Core.DynamicArray<float>();
        
        public Fox.Core.DynamicArray<float> specPointTorque = new Fox.Core.DynamicArray<float>();
        
        public Fox.Core.DynamicArray<float> specPointBreakTorque = new Fox.Core.DynamicArray<float>();
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhxVehicleNormalEngine()
        {
            classInfo = new Fox.EntityInfo("PhxVehicleNormalEngine", typeof(PhxVehicleNormalEngine), new Fox.Core.Data().GetClassEntityInfo(), 120, "Phx", 1);
			classInfo.StaticProperties.Insert("vehicleAxes", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityLink, 128, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("torqueDistributions", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 144, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("gearRatios", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 160, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("vehicleNormalEngineParam", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.EntityPtr, 120, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, typeof(Fox.Phx.PhVehicleNormalEngineParam), null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("specPointAngularVelocity", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("specPointTorque", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("specPointBreakTorque", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructors
		public PhxVehicleNormalEngine(ulong id) : base(id) { }
		public PhxVehicleNormalEngine() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Value value)
        {
            switch(propertyName)
            {
                case "vehicleNormalEngineParam":
                    this.vehicleNormalEngineParam = value.GetValueAsEntityPtr<Fox.Phx.PhVehicleNormalEngineParam>();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Value value)
        {
            switch(propertyName)
            {
                case "vehicleAxes":
                    while(this.vehicleAxes.Count <= index) { this.vehicleAxes.Add(default(Fox.Core.EntityLink)); }
                    this.vehicleAxes[index] = value.GetValueAsEntityLink();
                    return;
                case "torqueDistributions":
                    while(this.torqueDistributions.Count <= index) { this.torqueDistributions.Add(default(float)); }
                    this.torqueDistributions[index] = value.GetValueAsFloat();
                    return;
                case "gearRatios":
                    while(this.gearRatios.Count <= index) { this.gearRatios.Add(default(float)); }
                    this.gearRatios[index] = value.GetValueAsFloat();
                    return;
                case "specPointAngularVelocity":
                    while(this.specPointAngularVelocity.Count <= index) { this.specPointAngularVelocity.Add(default(float)); }
                    this.specPointAngularVelocity[index] = value.GetValueAsFloat();
                    return;
                case "specPointTorque":
                    while(this.specPointTorque.Count <= index) { this.specPointTorque.Add(default(float)); }
                    this.specPointTorque[index] = value.GetValueAsFloat();
                    return;
                case "specPointBreakTorque":
                    while(this.specPointBreakTorque.Count <= index) { this.specPointBreakTorque.Add(default(float)); }
                    this.specPointBreakTorque[index] = value.GetValueAsFloat();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}