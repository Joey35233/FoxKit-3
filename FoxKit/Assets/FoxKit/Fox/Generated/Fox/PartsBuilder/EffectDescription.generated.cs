//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.PartsBuilder
{
    public partial class EffectDescription : Fox.PartsBuilder.PartDescription 
    {
        // Properties
        public CsSystem.Collections.Generic.List<string> connectDestinationSkelNames = new CsSystem.Collections.Generic.List<string>();
        
        public CsSystem.Collections.Generic.List<string> connectDestinationCnpNames = new CsSystem.Collections.Generic.List<string>();
        
        public CsSystem.Collections.Generic.List<UnityEngine.Vector3> offsetSkelPositions = new CsSystem.Collections.Generic.List<UnityEngine.Vector3>();
        
        public CsSystem.Collections.Generic.List<UnityEngine.Vector3> offsetCnpPositions = new CsSystem.Collections.Generic.List<UnityEngine.Vector3>();
        
        public CsSystem.Collections.Generic.List<UnityEngine.Vector4> generalSkelParameters = new CsSystem.Collections.Generic.List<UnityEngine.Vector4>();
        
        public CsSystem.Collections.Generic.List<UnityEngine.Vector4> generalCnpParameters = new CsSystem.Collections.Generic.List<UnityEngine.Vector4>();
        
        public bool effectConnect;
        
        public bool changeEffectConnectSetting;
        
        public bool visibleModelWithEffect;
        
        public bool createStartEffect;
        
        public uint effectRandomSeed;
        
        public EffectKind effectKind;
        
        public string effectVariationName;
        
        public string effectFileFromVfxFileLoader;
        
        public Fox.Core.FilePtr<Fox.Core.File> effectFileFromFilePtr;
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public  override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static EffectDescription()
        {
            classInfo = new Fox.EntityInfo("EffectDescription", new Fox.PartsBuilder.PartDescription(0, 0, 0).GetClassEntityInfo(), 232, "PartsBuilder", 6);
			
			classInfo.StaticProperties.Insert("connectDestinationSkelNames", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 152, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("connectDestinationCnpNames", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 168, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("offsetSkelPositions", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 184, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("offsetCnpPositions", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector3, 200, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("generalSkelParameters", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector4, 216, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("generalCnpParameters", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Vector4, 232, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectConnect", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 248, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("changeEffectConnectSetting", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 249, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("visibleModelWithEffect", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 250, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("createStartEffect", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Bool, 251, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectRandomSeed", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.UInt32, 252, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectKind", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.Int32, 256, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, typeof(EffectKind), Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectVariationName", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 264, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectFileFromVfxFileLoader", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.String, 272, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("effectFileFromFilePtr", new Fox.Core.PropertyInfo(Fox.Core.PropertyInfo.PropertyType.FilePtr, 280, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructor
		public EffectDescription(ulong address, ushort idA, ushort idB) : base(address, idA, idB) { }
        
        public override void SetProperty(string propertyName, Fox.Value value)
        {
            switch(propertyName)
            {
                case "effectConnect":
                    this.effectConnect = value.GetValueAsBool();
                    return;
                case "changeEffectConnectSetting":
                    this.changeEffectConnectSetting = value.GetValueAsBool();
                    return;
                case "visibleModelWithEffect":
                    this.visibleModelWithEffect = value.GetValueAsBool();
                    return;
                case "createStartEffect":
                    this.createStartEffect = value.GetValueAsBool();
                    return;
                case "effectRandomSeed":
                    this.effectRandomSeed = value.GetValueAsUInt32();
                    return;
                case "effectKind":
                    this.effectKind = (EffectKind)value.GetValueAsInt32();
                    return;
                case "effectVariationName":
                    this.effectVariationName = value.GetValueAsString();
                    return;
                case "effectFileFromVfxFileLoader":
                    this.effectFileFromVfxFileLoader = value.GetValueAsString();
                    return;
                case "effectFileFromFilePtr":
                    this.effectFileFromFilePtr = value.GetValueAsFilePtr();
                    return;
                default:
				    
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Value value)
        {
            switch(propertyName)
            {
                case "connectDestinationSkelNames":
                    while(this.connectDestinationSkelNames.Count <= index) { this.connectDestinationSkelNames.Add(default(string)); }
                    this.connectDestinationSkelNames[index] = value.GetValueAsString();
                    return;
                case "connectDestinationCnpNames":
                    while(this.connectDestinationCnpNames.Count <= index) { this.connectDestinationCnpNames.Add(default(string)); }
                    this.connectDestinationCnpNames[index] = value.GetValueAsString();
                    return;
                case "offsetSkelPositions":
                    while(this.offsetSkelPositions.Count <= index) { this.offsetSkelPositions.Add(default(UnityEngine.Vector3)); }
                    this.offsetSkelPositions[index] = value.GetValueAsVector3();
                    return;
                case "offsetCnpPositions":
                    while(this.offsetCnpPositions.Count <= index) { this.offsetCnpPositions.Add(default(UnityEngine.Vector3)); }
                    this.offsetCnpPositions[index] = value.GetValueAsVector3();
                    return;
                case "generalSkelParameters":
                    while(this.generalSkelParameters.Count <= index) { this.generalSkelParameters.Add(default(UnityEngine.Vector4)); }
                    this.generalSkelParameters[index] = value.GetValueAsVector4();
                    return;
                case "generalCnpParameters":
                    while(this.generalCnpParameters.Count <= index) { this.generalCnpParameters.Add(default(UnityEngine.Vector4)); }
                    this.generalCnpParameters[index] = value.GetValueAsVector4();
                    return;
                default:
					
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Value value)
        {
            switch(propertyName)
            {
                default:
					
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}