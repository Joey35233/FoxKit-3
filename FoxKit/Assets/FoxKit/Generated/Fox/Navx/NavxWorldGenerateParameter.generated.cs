//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Navx
{
    [UnityEditor.InitializeOnLoad]
    public partial class NavxWorldGenerateParameter : Fox.Core.TransformData 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        public float resolution { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float verticalThreshold { get; set; }
        
        [field: UnityEngine.SerializeField]
        public bool doesDivideIslandWithSector { get; set; }
        
        [field: UnityEngine.SerializeField]
        public bool doesHoleSimplification { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float holeSimplificationConvexThreshold { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float holeSimplificationObbExpandThreshold { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float holeSimplificationObbToAabbThreshold { get; set; }
        
        [field: UnityEngine.SerializeField]
        public float holeSimplificationSmoothingThreshold { get; set; }
        
        [field: UnityEngine.SerializeField]
        public bool isHoleSimplificationDoesNotClosePassage { get; set; }
        
        [field: UnityEngine.SerializeField]
        public uint holeSimplificationReduceCount { get; set; }
        
        [field: UnityEngine.SerializeField]
        public bool doesAdjustSearchSpaceToNavmesh { get; set; }
        
        [field: UnityEngine.SerializeField]
        public bool doesGenerateFillNavVolumeInRadius { get; set; }
        
        [field: UnityEngine.SerializeField]
        public Fox.FoxKernel.Path roughGraphFilePath { get; set; }
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.FilePtr roughGraphFilePtr { get; set; }
        
        [field: UnityEngine.SerializeField]
        public Fox.FoxKernel.String worldName { get; set; }
        
        [field: UnityEngine.SerializeField]
        public uint maxFileSizeInKb { get; set; }
        
        [field: UnityEngine.SerializeField]
        public Fox.FoxKernel.DynamicArray<Fox.Core.EntityPtr<Fox.Navx.NavxNavigableParameter>> parameters { get; set; } = new Fox.FoxKernel.DynamicArray<Fox.Core.EntityPtr<Fox.Navx.NavxNavigableParameter>>();
        
        [field: UnityEngine.SerializeField]
        public uint sectorSizeHorizontal { get; set; }
        
        [field: UnityEngine.SerializeField]
        public uint tileSizeHorizontal { get; set; }
        
        [field: UnityEngine.SerializeField]
        public uint searchSpaceBucketSizeHorizontal { get; set; }
        
        [field: UnityEngine.SerializeField]
        public Fox.FoxKernel.DynamicArray<Fox.FoxKernel.String> collisionAttributes { get; set; } = new Fox.FoxKernel.DynamicArray<Fox.FoxKernel.String>();
        
        [field: UnityEngine.SerializeField]
        public Fox.FoxKernel.Path loadFox2FileListScriptPath { get; set; }
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static NavxWorldGenerateParameter()
        {
            classInfo = new Fox.EntityInfo("NavxWorldGenerateParameter", typeof(NavxWorldGenerateParameter), new Fox.Core.TransformData().GetClassEntityInfo(), 400, "Navx", 27);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("resolution", Fox.Core.PropertyInfo.PropertyType.Float, 304, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("verticalThreshold", Fox.Core.PropertyInfo.PropertyType.Float, 308, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("doesDivideIslandWithSector", Fox.Core.PropertyInfo.PropertyType.Bool, 312, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("doesHoleSimplification", Fox.Core.PropertyInfo.PropertyType.Bool, 313, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("holeSimplificationConvexThreshold", Fox.Core.PropertyInfo.PropertyType.Float, 316, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("holeSimplificationObbExpandThreshold", Fox.Core.PropertyInfo.PropertyType.Float, 320, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("holeSimplificationObbToAabbThreshold", Fox.Core.PropertyInfo.PropertyType.Float, 324, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("holeSimplificationSmoothingThreshold", Fox.Core.PropertyInfo.PropertyType.Float, 328, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("isHoleSimplificationDoesNotClosePassage", Fox.Core.PropertyInfo.PropertyType.Bool, 332, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("holeSimplificationReduceCount", Fox.Core.PropertyInfo.PropertyType.UInt32, 336, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("doesAdjustSearchSpaceToNavmesh", Fox.Core.PropertyInfo.PropertyType.Bool, 340, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("doesGenerateFillNavVolumeInRadius", Fox.Core.PropertyInfo.PropertyType.Bool, 341, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("roughGraphFilePath", Fox.Core.PropertyInfo.PropertyType.Path, 344, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("roughGraphFilePtr", Fox.Core.PropertyInfo.PropertyType.FilePtr, 352, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorOnly, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("worldName", Fox.Core.PropertyInfo.PropertyType.String, 376, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("maxFileSizeInKb", Fox.Core.PropertyInfo.PropertyType.UInt32, 384, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("parameters", Fox.Core.PropertyInfo.PropertyType.EntityPtr, 392, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, typeof(Fox.Navx.NavxNavigableParameter), null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("sectorSizeHorizontal", Fox.Core.PropertyInfo.PropertyType.UInt32, 408, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("tileSizeHorizontal", Fox.Core.PropertyInfo.PropertyType.UInt32, 412, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("searchSpaceBucketSizeHorizontal", Fox.Core.PropertyInfo.PropertyType.UInt32, 416, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("collisionAttributes", Fox.Core.PropertyInfo.PropertyType.String, 424, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("loadFox2FileListScriptPath", Fox.Core.PropertyInfo.PropertyType.Path, 440, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
        }

        // Constructors
		public NavxWorldGenerateParameter(ulong id) : base(id) { }
		public NavxWorldGenerateParameter() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "resolution":
                    this.resolution = value.GetValueAsFloat();
                    return;
                case "verticalThreshold":
                    this.verticalThreshold = value.GetValueAsFloat();
                    return;
                case "doesDivideIslandWithSector":
                    this.doesDivideIslandWithSector = value.GetValueAsBool();
                    return;
                case "doesHoleSimplification":
                    this.doesHoleSimplification = value.GetValueAsBool();
                    return;
                case "holeSimplificationConvexThreshold":
                    this.holeSimplificationConvexThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationObbExpandThreshold":
                    this.holeSimplificationObbExpandThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationObbToAabbThreshold":
                    this.holeSimplificationObbToAabbThreshold = value.GetValueAsFloat();
                    return;
                case "holeSimplificationSmoothingThreshold":
                    this.holeSimplificationSmoothingThreshold = value.GetValueAsFloat();
                    return;
                case "isHoleSimplificationDoesNotClosePassage":
                    this.isHoleSimplificationDoesNotClosePassage = value.GetValueAsBool();
                    return;
                case "holeSimplificationReduceCount":
                    this.holeSimplificationReduceCount = value.GetValueAsUInt32();
                    return;
                case "doesAdjustSearchSpaceToNavmesh":
                    this.doesAdjustSearchSpaceToNavmesh = value.GetValueAsBool();
                    return;
                case "doesGenerateFillNavVolumeInRadius":
                    this.doesGenerateFillNavVolumeInRadius = value.GetValueAsBool();
                    return;
                case "roughGraphFilePath":
                    this.roughGraphFilePath = value.GetValueAsPath();
                    return;
                case "roughGraphFilePtr":
                    this.roughGraphFilePtr = value.GetValueAsFilePtr();
                    return;
                case "worldName":
                    this.worldName = value.GetValueAsString();
                    return;
                case "maxFileSizeInKb":
                    this.maxFileSizeInKb = value.GetValueAsUInt32();
                    return;
                case "sectorSizeHorizontal":
                    this.sectorSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "tileSizeHorizontal":
                    this.tileSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "searchSpaceBucketSizeHorizontal":
                    this.searchSpaceBucketSizeHorizontal = value.GetValueAsUInt32();
                    return;
                case "loadFox2FileListScriptPath":
                    this.loadFox2FileListScriptPath = value.GetValueAsPath();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "parameters":
                    while(this.parameters.Count <= index) { this.parameters.Add(default(Fox.Core.EntityPtr<Fox.Navx.NavxNavigableParameter>)); }
                    this.parameters[index] = value.GetValueAsEntityPtr<Fox.Navx.NavxNavigableParameter>();
                    return;
                case "collisionAttributes":
                    while(this.collisionAttributes.Count <= index) { this.collisionAttributes.Add(default(Fox.FoxKernel.String)); }
                    this.collisionAttributes[index] = value.GetValueAsString();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}