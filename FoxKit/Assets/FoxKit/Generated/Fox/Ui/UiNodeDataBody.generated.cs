//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Ui
{
    [UnityEditor.InitializeOnLoad]
    public partial class UiNodeDataBody : Fox.Core.DataBody 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        protected Fox.Core.DynamicArray<Fox.Core.EntityHandle> inputEdges { get; set; } = new Fox.Core.DynamicArray<Fox.Core.EntityHandle>();
        
        [field: UnityEngine.SerializeField]
        protected Fox.Core.DynamicArray<Fox.Core.EntityHandle> outputEdges { get; set; } = new Fox.Core.DynamicArray<Fox.Core.EntityHandle>();
        
        [field: UnityEngine.SerializeField]
        protected Fox.Core.Path uigName { get; set; }
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static UiNodeDataBody()
        {
            classInfo = new Fox.EntityInfo("UiNodeDataBody", typeof(UiNodeDataBody), new Fox.Core.DataBody().GetClassEntityInfo(), 0, null, 0);
			classInfo.StaticProperties.Insert("inputEdges", new Fox.Core.PropertyInfo("inputEdges", Fox.Core.PropertyInfo.PropertyType.EntityHandle, 88, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("outputEdges", new Fox.Core.PropertyInfo("outputEdges", Fox.Core.PropertyInfo.PropertyType.EntityHandle, 104, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("uigName", new Fox.Core.PropertyInfo("uigName", Fox.Core.PropertyInfo.PropertyType.Path, 120, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructors
		public UiNodeDataBody(ulong id) : base(id) { }
		public UiNodeDataBody() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "uigName":
                    this.uigName = value.GetValueAsPath();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "inputEdges":
                    while(this.inputEdges.Count <= index) { this.inputEdges.Add(default(Fox.Core.EntityHandle)); }
                    this.inputEdges[index] = value.GetValueAsEntityHandle();
                    return;
                case "outputEdges":
                    while(this.outputEdges.Count <= index) { this.outputEdges.Add(default(Fox.Core.EntityHandle)); }
                    this.outputEdges[index] = value.GetValueAsEntityHandle();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}