//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Fox.Phx
{
    [UnityEditor.InitializeOnLoad]
    public partial class PhxVehicleAxis : Fox.Core.Data 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        protected Fox.Core.EntityPtr<Fox.Phx.PhVehicleAxisParam> vehicleAxisParam { get; set; } = new Fox.Core.EntityPtr<Fox.Phx.PhVehicleAxisParam>();
        
        [field: UnityEngine.SerializeField]
        protected Fox.Core.EntityPtr<Fox.Phx.PhxWheelConstraintParam> wheelConstraintParam { get; set; } = new Fox.Core.EntityPtr<Fox.Phx.PhxWheelConstraintParam>();
        
        [field: UnityEngine.SerializeField]
        protected Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Phx.PhxWheelAssociationUnitParam>> wheelAssociationUnitParams { get; set; } = new Fox.Core.DynamicArray<Fox.Core.EntityPtr<Fox.Phx.PhxWheelAssociationUnitParam>>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<float> torqueDistributions { get; set; } = new Fox.Core.DynamicArray<float>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<float> gearRatios { get; set; } = new Fox.Core.DynamicArray<float>();
        
        public UnityEngine.Vector3 wheelFront { get => Get_wheelFront(); set { Set_wheelFront(value); } }
        protected partial UnityEngine.Vector3 Get_wheelFront();
        protected partial void Set_wheelFront(UnityEngine.Vector3 value);
        
        public UnityEngine.Vector3 wheelUp { get => Get_wheelUp(); set { Set_wheelUp(value); } }
        protected partial UnityEngine.Vector3 Get_wheelUp();
        protected partial void Set_wheelUp(UnityEngine.Vector3 value);
        
        public UnityEngine.Vector3 wheelPositionOffset { get => Get_wheelPositionOffset(); set { Set_wheelPositionOffset(value); } }
        protected partial UnityEngine.Vector3 Get_wheelPositionOffset();
        protected partial void Set_wheelPositionOffset(UnityEngine.Vector3 value);
        
        public float wheelRadius { get => Get_wheelRadius(); set { Set_wheelRadius(value); } }
        protected partial float Get_wheelRadius();
        protected partial void Set_wheelRadius(float value);
        
        public float wheelFriction { get => Get_wheelFriction(); set { Set_wheelFriction(value); } }
        protected partial float Get_wheelFriction();
        protected partial void Set_wheelFriction(float value);
        
        public float wheelRestitution { get => Get_wheelRestitution(); set { Set_wheelRestitution(value); } }
        protected partial float Get_wheelRestitution();
        protected partial void Set_wheelRestitution(float value);
        
        public float wheelInertia { get => Get_wheelInertia(); set { Set_wheelInertia(value); } }
        protected partial float Get_wheelInertia();
        protected partial void Set_wheelInertia(float value);
        
        public float suspentionLength { get => Get_suspentionLength(); set { Set_suspentionLength(value); } }
        protected partial float Get_suspentionLength();
        protected partial void Set_suspentionLength(float value);
        
        public float maxSuspentionForceCoeff { get => Get_maxSuspentionForceCoeff(); set { Set_maxSuspentionForceCoeff(value); } }
        protected partial float Get_maxSuspentionForceCoeff();
        protected partial void Set_maxSuspentionForceCoeff(float value);
        
        public float dampingCoeffElong { get => Get_dampingCoeffElong(); set { Set_dampingCoeffElong(value); } }
        protected partial float Get_dampingCoeffElong();
        protected partial void Set_dampingCoeffElong(float value);
        
        public float dampingCoeffCompress { get => Get_dampingCoeffCompress(); set { Set_dampingCoeffCompress(value); } }
        protected partial float Get_dampingCoeffCompress();
        protected partial void Set_dampingCoeffCompress(float value);
        
        public float maxBreakTorqueCoeff { get => Get_maxBreakTorqueCoeff(); set { Set_maxBreakTorqueCoeff(value); } }
        protected partial float Get_maxBreakTorqueCoeff();
        protected partial void Set_maxBreakTorqueCoeff(float value);
        
        public bool useDifferential { get => Get_useDifferential(); set { Set_useDifferential(value); } }
        protected partial bool Get_useDifferential();
        protected partial void Set_useDifferential(bool value);
        
        public Fox.Core.DynamicArray<Fox.Core.String> AssignedBoneNames { get => Get_AssignedBoneNames(); set { Set_AssignedBoneNames(value); } }
        protected partial Fox.Core.DynamicArray<Fox.Core.String> Get_AssignedBoneNames();
        protected partial void Set_AssignedBoneNames(Fox.Core.DynamicArray<Fox.Core.String> value);
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static PhxVehicleAxis()
        {
            classInfo = new Fox.EntityInfo("PhxVehicleAxis", typeof(PhxVehicleAxis), new Fox.Core.Data().GetClassEntityInfo(), 128, "Phx", 1);
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("vehicleAxisParam", Fox.Core.PropertyInfo.PropertyType.EntityPtr, 120, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, typeof(Fox.Phx.PhVehicleAxisParam), null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelConstraintParam", Fox.Core.PropertyInfo.PropertyType.EntityPtr, 128, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, typeof(Fox.Phx.PhxWheelConstraintParam), null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelAssociationUnitParams", Fox.Core.PropertyInfo.PropertyType.EntityPtr, 136, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.Never, Fox.Core.PropertyInfo.PropertyExport.Never, typeof(Fox.Phx.PhxWheelAssociationUnitParam), null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("torqueDistributions", Fox.Core.PropertyInfo.PropertyType.Float, 152, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("gearRatios", Fox.Core.PropertyInfo.PropertyType.Float, 168, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Field));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelFront", Fox.Core.PropertyInfo.PropertyType.Vector3, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelUp", Fox.Core.PropertyInfo.PropertyType.Vector3, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelPositionOffset", Fox.Core.PropertyInfo.PropertyType.Vector3, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelRadius", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelFriction", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelRestitution", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("wheelInertia", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("suspentionLength", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("maxSuspentionForceCoeff", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dampingCoeffElong", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("dampingCoeffCompress", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("maxBreakTorqueCoeff", Fox.Core.PropertyInfo.PropertyType.Float, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("useDifferential", Fox.Core.PropertyInfo.PropertyType.Bool, 0, 1, Fox.Core.PropertyInfo.ContainerType.StaticArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
			classInfo.AddStaticProperty(new Fox.Core.PropertyInfo("AssignedBoneNames", Fox.Core.PropertyInfo.PropertyType.String, 0, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance, Fox.Core.PropertyInfo.BackingType.Accessor));
        }

        // Constructors
		public PhxVehicleAxis(ulong id) : base(id) { }
		public PhxVehicleAxis() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "vehicleAxisParam":
                    this.vehicleAxisParam = value.GetValueAsEntityPtr<Fox.Phx.PhVehicleAxisParam>();
                    return;
                case "wheelConstraintParam":
                    this.wheelConstraintParam = value.GetValueAsEntityPtr<Fox.Phx.PhxWheelConstraintParam>();
                    return;
                case "wheelFront":
                    this.wheelFront = value.GetValueAsVector3();
                    return;
                case "wheelUp":
                    this.wheelUp = value.GetValueAsVector3();
                    return;
                case "wheelPositionOffset":
                    this.wheelPositionOffset = value.GetValueAsVector3();
                    return;
                case "wheelRadius":
                    this.wheelRadius = value.GetValueAsFloat();
                    return;
                case "wheelFriction":
                    this.wheelFriction = value.GetValueAsFloat();
                    return;
                case "wheelRestitution":
                    this.wheelRestitution = value.GetValueAsFloat();
                    return;
                case "wheelInertia":
                    this.wheelInertia = value.GetValueAsFloat();
                    return;
                case "suspentionLength":
                    this.suspentionLength = value.GetValueAsFloat();
                    return;
                case "maxSuspentionForceCoeff":
                    this.maxSuspentionForceCoeff = value.GetValueAsFloat();
                    return;
                case "dampingCoeffElong":
                    this.dampingCoeffElong = value.GetValueAsFloat();
                    return;
                case "dampingCoeffCompress":
                    this.dampingCoeffCompress = value.GetValueAsFloat();
                    return;
                case "maxBreakTorqueCoeff":
                    this.maxBreakTorqueCoeff = value.GetValueAsFloat();
                    return;
                case "useDifferential":
                    this.useDifferential = value.GetValueAsBool();
                    return;
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "wheelAssociationUnitParams":
                    while(this.wheelAssociationUnitParams.Count <= index) { this.wheelAssociationUnitParams.Add(default(Fox.Core.EntityPtr<Fox.Phx.PhxWheelAssociationUnitParam>)); }
                    this.wheelAssociationUnitParams[index] = value.GetValueAsEntityPtr<Fox.Phx.PhxWheelAssociationUnitParam>();
                    return;
                case "torqueDistributions":
                    while(this.torqueDistributions.Count <= index) { this.torqueDistributions.Add(default(float)); }
                    this.torqueDistributions[index] = value.GetValueAsFloat();
                    return;
                case "gearRatios":
                    while(this.gearRatios.Count <= index) { this.gearRatios.Add(default(float)); }
                    this.gearRatios[index] = value.GetValueAsFloat();
                    return;
                case "AssignedBoneNames":
                    while(this.AssignedBoneNames.Count <= index) { this.AssignedBoneNames.Add(default(Fox.Core.String)); }
                    this.AssignedBoneNames[index] = value.GetValueAsString();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}