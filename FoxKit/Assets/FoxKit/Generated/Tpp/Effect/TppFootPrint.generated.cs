//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using CsSystem = System;
using Fox;

namespace Tpp.Effect
{
    [UnityEditor.InitializeOnLoad]
    public partial class TppFootPrint : Fox.Core.TransformData 
    {
        // Properties
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<UnityEngine.Matrix4x4> matrices { get; set; } = new Fox.Core.DynamicArray<UnityEngine.Matrix4x4>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<uint> footChara { get; set; } = new Fox.Core.DynamicArray<uint>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<uint> footLR { get; set; } = new Fox.Core.DynamicArray<uint>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<float> alpha { get; set; } = new Fox.Core.DynamicArray<float>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<bool> blood { get; set; } = new Fox.Core.DynamicArray<bool>();
        
        [field: UnityEngine.SerializeField]
        public Fox.Core.DynamicArray<bool> enable { get; set; } = new Fox.Core.DynamicArray<bool>();
        
        // PropertyInfo
        private static Fox.EntityInfo classInfo;
        public static new Fox.EntityInfo ClassInfo
        {
            get
            {
                return classInfo;
            }
        }
        public override Fox.EntityInfo GetClassEntityInfo()
        {
            return classInfo;
        }
        static TppFootPrint()
        {
            classInfo = new Fox.EntityInfo("TppFootPrint", typeof(TppFootPrint), new Fox.Core.TransformData().GetClassEntityInfo(), 416, null, 1);
			classInfo.StaticProperties.Insert("matrices", new Fox.Core.PropertyInfo("matrices", Fox.Core.PropertyInfo.PropertyType.Matrix4, 368, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("footChara", new Fox.Core.PropertyInfo("footChara", Fox.Core.PropertyInfo.PropertyType.UInt32, 384, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("footLR", new Fox.Core.PropertyInfo("footLR", Fox.Core.PropertyInfo.PropertyType.UInt32, 400, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("alpha", new Fox.Core.PropertyInfo("alpha", Fox.Core.PropertyInfo.PropertyType.Float, 416, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("blood", new Fox.Core.PropertyInfo("blood", Fox.Core.PropertyInfo.PropertyType.Bool, 432, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
			classInfo.StaticProperties.Insert("enable", new Fox.Core.PropertyInfo("enable", Fox.Core.PropertyInfo.PropertyType.Bool, 448, 1, Fox.Core.PropertyInfo.ContainerType.DynamicArray, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, Fox.Core.PropertyInfo.PropertyExport.EditorAndGame, null, null, Fox.Core.PropertyInfo.PropertyStorage.Instance));
        }

        // Constructors
		public TppFootPrint(ulong id) : base(id) { }
		public TppFootPrint() : base() { }
        
        public override void SetProperty(string propertyName, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetProperty(propertyName, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, ushort index, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                case "matrices":
                    while(this.matrices.Count <= index) { this.matrices.Add(default(UnityEngine.Matrix4x4)); }
                    this.matrices[index] = value.GetValueAsMatrix4();
                    return;
                case "footChara":
                    while(this.footChara.Count <= index) { this.footChara.Add(default(uint)); }
                    this.footChara[index] = value.GetValueAsUInt32();
                    return;
                case "footLR":
                    while(this.footLR.Count <= index) { this.footLR.Add(default(uint)); }
                    this.footLR[index] = value.GetValueAsUInt32();
                    return;
                case "alpha":
                    while(this.alpha.Count <= index) { this.alpha.Add(default(float)); }
                    this.alpha[index] = value.GetValueAsFloat();
                    return;
                case "blood":
                    while(this.blood.Count <= index) { this.blood.Add(default(bool)); }
                    this.blood[index] = value.GetValueAsBool();
                    return;
                case "enable":
                    while(this.enable.Count <= index) { this.enable.Add(default(bool)); }
                    this.enable[index] = value.GetValueAsBool();
                    return;
                default:
                    base.SetPropertyElement(propertyName, index, value);
                    return;
            }
        }
        
        public override void SetPropertyElement(string propertyName, string key, Fox.Core.Value value)
        {
            switch(propertyName)
            {
                default:
                    base.SetPropertyElement(propertyName, key, value);
                    return;
            }
        }
    }
}